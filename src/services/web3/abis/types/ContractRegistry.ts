/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ContractRegistryInterface extends utils.Interface {
  functions: {
    "BANCOR_CONVERTER_UPGRADER()": FunctionFragment;
    "BNT_TOKEN()": FunctionFragment;
    "getAddress(bytes32)": FunctionFragment;
    "CONTRACT_REGISTRY()": FunctionFragment;
    "unregisterAddress(bytes32)": FunctionFragment;
    "contractNames(uint256)": FunctionFragment;
    "BANCOR_CONVERTER_FACTORY()": FunctionFragment;
    "BNT_CONVERTER()": FunctionFragment;
    "registerAddress(bytes32,address)": FunctionFragment;
    "itemCount()": FunctionFragment;
    "BANCOR_FORMULA()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "CONTRACT_FEATURES()": FunctionFragment;
    "owner()": FunctionFragment;
    "BANCOR_NETWORK()": FunctionFragment;
    "BANCOR_GAS_PRICE_LIMIT()": FunctionFragment;
    "addressOf(bytes32)": FunctionFragment;
    "BANCOR_X()": FunctionFragment;
    "newOwner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BANCOR_CONVERTER_UPGRADER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BNT_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "CONTRACT_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contractNames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "BANCOR_CONVERTER_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BNT_CONVERTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "itemCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BANCOR_FORMULA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONTRACT_FEATURES",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BANCOR_NETWORK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BANCOR_GAS_PRICE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressOf",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "BANCOR_X", values?: undefined): string;
  encodeFunctionData(functionFragment: "newOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BANCOR_CONVERTER_UPGRADER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BNT_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CONTRACT_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BANCOR_CONVERTER_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BNT_CONVERTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "itemCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BANCOR_FORMULA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONTRACT_FEATURES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BANCOR_NETWORK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BANCOR_GAS_PRICE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addressOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BANCOR_X", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddressUpdate(bytes32,address)": EventFragment;
    "OwnerUpdate(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdate"): EventFragment;
}

export type AddressUpdateEvent = TypedEvent<
  [string, string],
  { _contractName: string; _contractAddress: string }
>;

export type AddressUpdateEventFilter = TypedEventFilter<AddressUpdateEvent>;

export type OwnerUpdateEvent = TypedEvent<
  [string, string],
  { _prevOwner: string; _newOwner: string }
>;

export type OwnerUpdateEventFilter = TypedEventFilter<OwnerUpdateEvent>;

export interface ContractRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ContractRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BANCOR_CONVERTER_UPGRADER(overrides?: CallOverrides): Promise<[string]>;

    BNT_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    getAddress(
      _contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    CONTRACT_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    unregisterAddress(
      _contractName: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    BANCOR_CONVERTER_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    BNT_CONVERTER(overrides?: CallOverrides): Promise<[string]>;

    registerAddress(
      _contractName: BytesLike,
      _contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    itemCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    BANCOR_FORMULA(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    CONTRACT_FEATURES(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    BANCOR_NETWORK(overrides?: CallOverrides): Promise<[string]>;

    BANCOR_GAS_PRICE_LIMIT(overrides?: CallOverrides): Promise<[string]>;

    addressOf(
      _contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    BANCOR_X(overrides?: CallOverrides): Promise<[string]>;

    newOwner(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BANCOR_CONVERTER_UPGRADER(overrides?: CallOverrides): Promise<string>;

  BNT_TOKEN(overrides?: CallOverrides): Promise<string>;

  getAddress(
    _contractName: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  CONTRACT_REGISTRY(overrides?: CallOverrides): Promise<string>;

  unregisterAddress(
    _contractName: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractNames(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  BANCOR_CONVERTER_FACTORY(overrides?: CallOverrides): Promise<string>;

  BNT_CONVERTER(overrides?: CallOverrides): Promise<string>;

  registerAddress(
    _contractName: BytesLike,
    _contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  itemCount(overrides?: CallOverrides): Promise<BigNumber>;

  BANCOR_FORMULA(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  CONTRACT_FEATURES(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  BANCOR_NETWORK(overrides?: CallOverrides): Promise<string>;

  BANCOR_GAS_PRICE_LIMIT(overrides?: CallOverrides): Promise<string>;

  addressOf(
    _contractName: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  BANCOR_X(overrides?: CallOverrides): Promise<string>;

  newOwner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BANCOR_CONVERTER_UPGRADER(overrides?: CallOverrides): Promise<string>;

    BNT_TOKEN(overrides?: CallOverrides): Promise<string>;

    getAddress(
      _contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    CONTRACT_REGISTRY(overrides?: CallOverrides): Promise<string>;

    unregisterAddress(
      _contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    contractNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    BANCOR_CONVERTER_FACTORY(overrides?: CallOverrides): Promise<string>;

    BNT_CONVERTER(overrides?: CallOverrides): Promise<string>;

    registerAddress(
      _contractName: BytesLike,
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    itemCount(overrides?: CallOverrides): Promise<BigNumber>;

    BANCOR_FORMULA(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    CONTRACT_FEATURES(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    BANCOR_NETWORK(overrides?: CallOverrides): Promise<string>;

    BANCOR_GAS_PRICE_LIMIT(overrides?: CallOverrides): Promise<string>;

    addressOf(
      _contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    BANCOR_X(overrides?: CallOverrides): Promise<string>;

    newOwner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddressUpdate(bytes32,address)"(
      _contractName?: BytesLike | null,
      _contractAddress?: null
    ): AddressUpdateEventFilter;
    AddressUpdate(
      _contractName?: BytesLike | null,
      _contractAddress?: null
    ): AddressUpdateEventFilter;

    "OwnerUpdate(address,address)"(
      _prevOwner?: string | null,
      _newOwner?: string | null
    ): OwnerUpdateEventFilter;
    OwnerUpdate(
      _prevOwner?: string | null,
      _newOwner?: string | null
    ): OwnerUpdateEventFilter;
  };

  estimateGas: {
    BANCOR_CONVERTER_UPGRADER(overrides?: CallOverrides): Promise<BigNumber>;

    BNT_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    getAddress(
      _contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CONTRACT_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    unregisterAddress(
      _contractName: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BANCOR_CONVERTER_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    BNT_CONVERTER(overrides?: CallOverrides): Promise<BigNumber>;

    registerAddress(
      _contractName: BytesLike,
      _contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    itemCount(overrides?: CallOverrides): Promise<BigNumber>;

    BANCOR_FORMULA(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    CONTRACT_FEATURES(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    BANCOR_NETWORK(overrides?: CallOverrides): Promise<BigNumber>;

    BANCOR_GAS_PRICE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    addressOf(
      _contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BANCOR_X(overrides?: CallOverrides): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BANCOR_CONVERTER_UPGRADER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BNT_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAddress(
      _contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CONTRACT_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unregisterAddress(
      _contractName: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BANCOR_CONVERTER_FACTORY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BNT_CONVERTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerAddress(
      _contractName: BytesLike,
      _contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    itemCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BANCOR_FORMULA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    CONTRACT_FEATURES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BANCOR_NETWORK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BANCOR_GAS_PRICE_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressOf(
      _contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BANCOR_X(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
