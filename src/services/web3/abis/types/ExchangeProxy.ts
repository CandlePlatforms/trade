/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type LimitOrderStruct = {
  makerToken: string;
  takerToken: string;
  makerAmount: BigNumberish;
  takerAmount: BigNumberish;
  takerTokenFeeAmount: BigNumberish;
  maker: string;
  taker: string;
  sender: string;
  feeRecipient: string;
  pool: BytesLike;
  expiry: BigNumberish;
  salt: BigNumberish;
};

export type LimitOrderStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  makerToken: string;
  takerToken: string;
  makerAmount: BigNumber;
  takerAmount: BigNumber;
  takerTokenFeeAmount: BigNumber;
  maker: string;
  taker: string;
  sender: string;
  feeRecipient: string;
  pool: string;
  expiry: BigNumber;
  salt: BigNumber;
};

export type SignatureStruct = {
  signatureType: BigNumberish;
  v: BigNumberish;
  r: BytesLike;
  s: BytesLike;
};

export type SignatureStructOutput = [number, number, string, string] & {
  signatureType: number;
  v: number;
  r: string;
  s: string;
};

export type RfqOrderStruct = {
  makerToken: string;
  takerToken: string;
  makerAmount: BigNumberish;
  takerAmount: BigNumberish;
  maker: string;
  taker: string;
  txOrigin: string;
  pool: BytesLike;
  expiry: BigNumberish;
  salt: BigNumberish;
};

export type RfqOrderStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  makerToken: string;
  takerToken: string;
  makerAmount: BigNumber;
  takerAmount: BigNumber;
  maker: string;
  taker: string;
  txOrigin: string;
  pool: string;
  expiry: BigNumber;
  salt: BigNumber;
};

export type OrderInfoStruct = {
  orderHash: BytesLike;
  status: BigNumberish;
  takerTokenFilledAmount: BigNumberish;
};

export type OrderInfoStructOutput = [string, number, BigNumber] & {
  orderHash: string;
  status: number;
  takerTokenFilledAmount: BigNumber;
};

export interface ExchangeProxyInterface extends utils.Interface {
  functions: {
    "EIP712_DOMAIN_SEPARATOR()": FunctionFragment;
    "FEATURE_NAME()": FunctionFragment;
    "FEATURE_VERSION()": FunctionFragment;
    "GREEDY_TOKENS_BLOOM_FILTER()": FunctionFragment;
    "PROTOCOL_FEE_MULTIPLIER()": FunctionFragment;
    "_fillLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128,address,address)": FunctionFragment;
    "_fillRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128,address)": FunctionFragment;
    "batchCancelLimitOrders((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[])": FunctionFragment;
    "batchCancelPairLimitOrders(address[],address[],uint256[])": FunctionFragment;
    "batchCancelPairRfqOrders(address[],address[],uint256[])": FunctionFragment;
    "batchCancelRfqOrders((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256)[])": FunctionFragment;
    "batchGetLimitOrderRelevantStates((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[])": FunctionFragment;
    "batchGetRfqOrderRelevantStates((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[])": FunctionFragment;
    "cancelLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))": FunctionFragment;
    "cancelPairLimitOrders(address,address,uint256)": FunctionFragment;
    "cancelPairRfqOrders(address,address,uint256)": FunctionFragment;
    "cancelRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))": FunctionFragment;
    "fillLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": FunctionFragment;
    "fillOrKillLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": FunctionFragment;
    "fillOrKillRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": FunctionFragment;
    "fillRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": FunctionFragment;
    "getLimitOrderHash((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))": FunctionFragment;
    "getLimitOrderInfo((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))": FunctionFragment;
    "getLimitOrderRelevantState((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32))": FunctionFragment;
    "getProtocolFeeMultiplier()": FunctionFragment;
    "getRfqOrderHash((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))": FunctionFragment;
    "getRfqOrderInfo((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))": FunctionFragment;
    "getRfqOrderRelevantState((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32))": FunctionFragment;
    "migrate()": FunctionFragment;
    "registerAllowedRfqOrigins(address[],bool)": FunctionFragment;
    "transferProtocolFeesForPools(bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEATURE_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEATURE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GREEDY_TOKENS_BLOOM_FILTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_FEE_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_fillLimitOrder",
    values: [LimitOrderStruct, SignatureStruct, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_fillRfqOrder",
    values: [RfqOrderStruct, SignatureStruct, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelLimitOrders",
    values: [LimitOrderStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelPairLimitOrders",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelPairRfqOrders",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelRfqOrders",
    values: [RfqOrderStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchGetLimitOrderRelevantStates",
    values: [LimitOrderStruct[], SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchGetRfqOrderRelevantStates",
    values: [RfqOrderStruct[], SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLimitOrder",
    values: [LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPairLimitOrders",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPairRfqOrders",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRfqOrder",
    values: [RfqOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "fillLimitOrder",
    values: [LimitOrderStruct, SignatureStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrKillLimitOrder",
    values: [LimitOrderStruct, SignatureStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrKillRfqOrder",
    values: [RfqOrderStruct, SignatureStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillRfqOrder",
    values: [RfqOrderStruct, SignatureStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitOrderHash",
    values: [LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitOrderInfo",
    values: [LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitOrderRelevantState",
    values: [LimitOrderStruct, SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRfqOrderHash",
    values: [RfqOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRfqOrderInfo",
    values: [RfqOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRfqOrderRelevantState",
    values: [RfqOrderStruct, SignatureStruct]
  ): string;
  encodeFunctionData(functionFragment: "migrate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerAllowedRfqOrigins",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferProtocolFeesForPools",
    values: [BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEATURE_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEATURE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GREEDY_TOKENS_BLOOM_FILTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_FEE_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_fillLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_fillRfqOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelPairLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelPairRfqOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelRfqOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchGetLimitOrderRelevantStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchGetRfqOrderRelevantStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPairLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPairRfqOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRfqOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrKillLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrKillRfqOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillRfqOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitOrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitOrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitOrderRelevantState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRfqOrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRfqOrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRfqOrderRelevantState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAllowedRfqOrigins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferProtocolFeesForPools",
    data: BytesLike
  ): Result;

  events: {
    "LimitOrderFilled(bytes32,address,address,address,address,address,uint128,uint128,uint128,uint256,bytes32)": EventFragment;
    "OrderCancelled(bytes32,address)": EventFragment;
    "PairCancelledLimitOrders(address,address,address,uint256)": EventFragment;
    "PairCancelledRfqOrders(address,address,address,uint256)": EventFragment;
    "RfqOrderFilled(bytes32,address,address,address,address,uint128,uint128,bytes32)": EventFragment;
    "RfqOrderOriginsAllowed(address,address[],bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LimitOrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairCancelledLimitOrders"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairCancelledRfqOrders"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RfqOrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RfqOrderOriginsAllowed"): EventFragment;
}

export type LimitOrderFilledEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  {
    orderHash: string;
    maker: string;
    taker: string;
    feeRecipient: string;
    makerToken: string;
    takerToken: string;
    takerTokenFilledAmount: BigNumber;
    makerTokenFilledAmount: BigNumber;
    takerTokenFeeFilledAmount: BigNumber;
    protocolFeePaid: BigNumber;
    pool: string;
  }
>;

export type LimitOrderFilledEventFilter =
  TypedEventFilter<LimitOrderFilledEvent>;

export type OrderCancelledEvent = TypedEvent<
  [string, string],
  { orderHash: string; maker: string }
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export type PairCancelledLimitOrdersEvent = TypedEvent<
  [string, string, string, BigNumber],
  {
    maker: string;
    makerToken: string;
    takerToken: string;
    minValidSalt: BigNumber;
  }
>;

export type PairCancelledLimitOrdersEventFilter =
  TypedEventFilter<PairCancelledLimitOrdersEvent>;

export type PairCancelledRfqOrdersEvent = TypedEvent<
  [string, string, string, BigNumber],
  {
    maker: string;
    makerToken: string;
    takerToken: string;
    minValidSalt: BigNumber;
  }
>;

export type PairCancelledRfqOrdersEventFilter =
  TypedEventFilter<PairCancelledRfqOrdersEvent>;

export type RfqOrderFilledEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber, string],
  {
    orderHash: string;
    maker: string;
    taker: string;
    makerToken: string;
    takerToken: string;
    takerTokenFilledAmount: BigNumber;
    makerTokenFilledAmount: BigNumber;
    pool: string;
  }
>;

export type RfqOrderFilledEventFilter = TypedEventFilter<RfqOrderFilledEvent>;

export type RfqOrderOriginsAllowedEvent = TypedEvent<
  [string, string[], boolean],
  { origin: string; addrs: string[]; allowed: boolean }
>;

export type RfqOrderOriginsAllowedEventFilter =
  TypedEventFilter<RfqOrderOriginsAllowedEvent>;

export interface ExchangeProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExchangeProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    FEATURE_NAME(overrides?: CallOverrides): Promise<[string]>;

    FEATURE_VERSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    GREEDY_TOKENS_BLOOM_FILTER(overrides?: CallOverrides): Promise<[string]>;

    PROTOCOL_FEE_MULTIPLIER(overrides?: CallOverrides): Promise<[number]>;

    _fillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _fillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchCancelLimitOrders(
      orders: LimitOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchCancelPairLimitOrders(
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchCancelPairRfqOrders(
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchCancelRfqOrders(
      orders: RfqOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchGetLimitOrderRelevantStates(
      orders: LimitOrderStruct[],
      signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<
      [OrderInfoStructOutput[], BigNumber[], boolean[]] & {
        orderInfos: OrderInfoStructOutput[];
        actualFillableTakerTokenAmounts: BigNumber[];
        isSignatureValids: boolean[];
      }
    >;

    batchGetRfqOrderRelevantStates(
      orders: RfqOrderStruct[],
      signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<
      [OrderInfoStructOutput[], BigNumber[], boolean[]] & {
        orderInfos: OrderInfoStructOutput[];
        actualFillableTakerTokenAmounts: BigNumber[];
        isSignatureValids: boolean[];
      }
    >;

    cancelLimitOrder(
      order: LimitOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelPairLimitOrders(
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelPairRfqOrders(
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelRfqOrder(
      order: RfqOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOrKillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOrKillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLimitOrderHash(
      order: LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { orderHash: string }>;

    getLimitOrderInfo(
      order: LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<[OrderInfoStructOutput] & { orderInfo: OrderInfoStructOutput }>;

    getLimitOrderRelevantState(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      overrides?: CallOverrides
    ): Promise<
      [OrderInfoStructOutput, BigNumber, boolean] & {
        orderInfo: OrderInfoStructOutput;
        actualFillableTakerTokenAmount: BigNumber;
        isSignatureValid: boolean;
      }
    >;

    getProtocolFeeMultiplier(
      overrides?: CallOverrides
    ): Promise<[number] & { multiplier: number }>;

    getRfqOrderHash(
      order: RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { orderHash: string }>;

    getRfqOrderInfo(
      order: RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<[OrderInfoStructOutput] & { orderInfo: OrderInfoStructOutput }>;

    getRfqOrderRelevantState(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      overrides?: CallOverrides
    ): Promise<
      [OrderInfoStructOutput, BigNumber, boolean] & {
        orderInfo: OrderInfoStructOutput;
        actualFillableTakerTokenAmount: BigNumber;
        isSignatureValid: boolean;
      }
    >;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAllowedRfqOrigins(
      origins: string[],
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferProtocolFeesForPools(
      poolIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  FEATURE_NAME(overrides?: CallOverrides): Promise<string>;

  FEATURE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

  GREEDY_TOKENS_BLOOM_FILTER(overrides?: CallOverrides): Promise<string>;

  PROTOCOL_FEE_MULTIPLIER(overrides?: CallOverrides): Promise<number>;

  _fillLimitOrder(
    order: LimitOrderStruct,
    signature: SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    taker: string,
    sender: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _fillRfqOrder(
    order: RfqOrderStruct,
    signature: SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    taker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchCancelLimitOrders(
    orders: LimitOrderStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchCancelPairLimitOrders(
    makerTokens: string[],
    takerTokens: string[],
    minValidSalts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchCancelPairRfqOrders(
    makerTokens: string[],
    takerTokens: string[],
    minValidSalts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchCancelRfqOrders(
    orders: RfqOrderStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchGetLimitOrderRelevantStates(
    orders: LimitOrderStruct[],
    signatures: SignatureStruct[],
    overrides?: CallOverrides
  ): Promise<
    [OrderInfoStructOutput[], BigNumber[], boolean[]] & {
      orderInfos: OrderInfoStructOutput[];
      actualFillableTakerTokenAmounts: BigNumber[];
      isSignatureValids: boolean[];
    }
  >;

  batchGetRfqOrderRelevantStates(
    orders: RfqOrderStruct[],
    signatures: SignatureStruct[],
    overrides?: CallOverrides
  ): Promise<
    [OrderInfoStructOutput[], BigNumber[], boolean[]] & {
      orderInfos: OrderInfoStructOutput[];
      actualFillableTakerTokenAmounts: BigNumber[];
      isSignatureValids: boolean[];
    }
  >;

  cancelLimitOrder(
    order: LimitOrderStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelPairLimitOrders(
    makerToken: string,
    takerToken: string,
    minValidSalt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelPairRfqOrders(
    makerToken: string,
    takerToken: string,
    minValidSalt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelRfqOrder(
    order: RfqOrderStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillLimitOrder(
    order: LimitOrderStruct,
    signature: SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOrKillLimitOrder(
    order: LimitOrderStruct,
    signature: SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOrKillRfqOrder(
    order: RfqOrderStruct,
    signature: SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillRfqOrder(
    order: RfqOrderStruct,
    signature: SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLimitOrderHash(
    order: LimitOrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getLimitOrderInfo(
    order: LimitOrderStruct,
    overrides?: CallOverrides
  ): Promise<OrderInfoStructOutput>;

  getLimitOrderRelevantState(
    order: LimitOrderStruct,
    signature: SignatureStruct,
    overrides?: CallOverrides
  ): Promise<
    [OrderInfoStructOutput, BigNumber, boolean] & {
      orderInfo: OrderInfoStructOutput;
      actualFillableTakerTokenAmount: BigNumber;
      isSignatureValid: boolean;
    }
  >;

  getProtocolFeeMultiplier(overrides?: CallOverrides): Promise<number>;

  getRfqOrderHash(
    order: RfqOrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getRfqOrderInfo(
    order: RfqOrderStruct,
    overrides?: CallOverrides
  ): Promise<OrderInfoStructOutput>;

  getRfqOrderRelevantState(
    order: RfqOrderStruct,
    signature: SignatureStruct,
    overrides?: CallOverrides
  ): Promise<
    [OrderInfoStructOutput, BigNumber, boolean] & {
      orderInfo: OrderInfoStructOutput;
      actualFillableTakerTokenAmount: BigNumber;
      isSignatureValid: boolean;
    }
  >;

  migrate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAllowedRfqOrigins(
    origins: string[],
    allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferProtocolFeesForPools(
    poolIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    FEATURE_NAME(overrides?: CallOverrides): Promise<string>;

    FEATURE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    GREEDY_TOKENS_BLOOM_FILTER(overrides?: CallOverrides): Promise<string>;

    PROTOCOL_FEE_MULTIPLIER(overrides?: CallOverrides): Promise<number>;

    _fillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      sender: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerTokenFilledAmount: BigNumber;
        makerTokenFilledAmount: BigNumber;
      }
    >;

    _fillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerTokenFilledAmount: BigNumber;
        makerTokenFilledAmount: BigNumber;
      }
    >;

    batchCancelLimitOrders(
      orders: LimitOrderStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchCancelPairLimitOrders(
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchCancelPairRfqOrders(
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchCancelRfqOrders(
      orders: RfqOrderStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchGetLimitOrderRelevantStates(
      orders: LimitOrderStruct[],
      signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<
      [OrderInfoStructOutput[], BigNumber[], boolean[]] & {
        orderInfos: OrderInfoStructOutput[];
        actualFillableTakerTokenAmounts: BigNumber[];
        isSignatureValids: boolean[];
      }
    >;

    batchGetRfqOrderRelevantStates(
      orders: RfqOrderStruct[],
      signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<
      [OrderInfoStructOutput[], BigNumber[], boolean[]] & {
        orderInfos: OrderInfoStructOutput[];
        actualFillableTakerTokenAmounts: BigNumber[];
        isSignatureValids: boolean[];
      }
    >;

    cancelLimitOrder(
      order: LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelPairLimitOrders(
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelPairRfqOrders(
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelRfqOrder(
      order: RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    fillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerTokenFilledAmount: BigNumber;
        makerTokenFilledAmount: BigNumber;
      }
    >;

    fillOrKillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillOrKillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerTokenFilledAmount: BigNumber;
        makerTokenFilledAmount: BigNumber;
      }
    >;

    getLimitOrderHash(
      order: LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getLimitOrderInfo(
      order: LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<OrderInfoStructOutput>;

    getLimitOrderRelevantState(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      overrides?: CallOverrides
    ): Promise<
      [OrderInfoStructOutput, BigNumber, boolean] & {
        orderInfo: OrderInfoStructOutput;
        actualFillableTakerTokenAmount: BigNumber;
        isSignatureValid: boolean;
      }
    >;

    getProtocolFeeMultiplier(overrides?: CallOverrides): Promise<number>;

    getRfqOrderHash(
      order: RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getRfqOrderInfo(
      order: RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<OrderInfoStructOutput>;

    getRfqOrderRelevantState(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      overrides?: CallOverrides
    ): Promise<
      [OrderInfoStructOutput, BigNumber, boolean] & {
        orderInfo: OrderInfoStructOutput;
        actualFillableTakerTokenAmount: BigNumber;
        isSignatureValid: boolean;
      }
    >;

    migrate(overrides?: CallOverrides): Promise<string>;

    registerAllowedRfqOrigins(
      origins: string[],
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferProtocolFeesForPools(
      poolIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LimitOrderFilled(bytes32,address,address,address,address,address,uint128,uint128,uint128,uint256,bytes32)"(
      orderHash?: null,
      maker?: null,
      taker?: null,
      feeRecipient?: null,
      makerToken?: null,
      takerToken?: null,
      takerTokenFilledAmount?: null,
      makerTokenFilledAmount?: null,
      takerTokenFeeFilledAmount?: null,
      protocolFeePaid?: null,
      pool?: null
    ): LimitOrderFilledEventFilter;
    LimitOrderFilled(
      orderHash?: null,
      maker?: null,
      taker?: null,
      feeRecipient?: null,
      makerToken?: null,
      takerToken?: null,
      takerTokenFilledAmount?: null,
      makerTokenFilledAmount?: null,
      takerTokenFeeFilledAmount?: null,
      protocolFeePaid?: null,
      pool?: null
    ): LimitOrderFilledEventFilter;

    "OrderCancelled(bytes32,address)"(
      orderHash?: null,
      maker?: null
    ): OrderCancelledEventFilter;
    OrderCancelled(orderHash?: null, maker?: null): OrderCancelledEventFilter;

    "PairCancelledLimitOrders(address,address,address,uint256)"(
      maker?: null,
      makerToken?: null,
      takerToken?: null,
      minValidSalt?: null
    ): PairCancelledLimitOrdersEventFilter;
    PairCancelledLimitOrders(
      maker?: null,
      makerToken?: null,
      takerToken?: null,
      minValidSalt?: null
    ): PairCancelledLimitOrdersEventFilter;

    "PairCancelledRfqOrders(address,address,address,uint256)"(
      maker?: null,
      makerToken?: null,
      takerToken?: null,
      minValidSalt?: null
    ): PairCancelledRfqOrdersEventFilter;
    PairCancelledRfqOrders(
      maker?: null,
      makerToken?: null,
      takerToken?: null,
      minValidSalt?: null
    ): PairCancelledRfqOrdersEventFilter;

    "RfqOrderFilled(bytes32,address,address,address,address,uint128,uint128,bytes32)"(
      orderHash?: null,
      maker?: null,
      taker?: null,
      makerToken?: null,
      takerToken?: null,
      takerTokenFilledAmount?: null,
      makerTokenFilledAmount?: null,
      pool?: null
    ): RfqOrderFilledEventFilter;
    RfqOrderFilled(
      orderHash?: null,
      maker?: null,
      taker?: null,
      makerToken?: null,
      takerToken?: null,
      takerTokenFilledAmount?: null,
      makerTokenFilledAmount?: null,
      pool?: null
    ): RfqOrderFilledEventFilter;

    "RfqOrderOriginsAllowed(address,address[],bool)"(
      origin?: null,
      addrs?: null,
      allowed?: null
    ): RfqOrderOriginsAllowedEventFilter;
    RfqOrderOriginsAllowed(
      origin?: null,
      addrs?: null,
      allowed?: null
    ): RfqOrderOriginsAllowedEventFilter;
  };

  estimateGas: {
    EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    FEATURE_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    FEATURE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    GREEDY_TOKENS_BLOOM_FILTER(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_FEE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    _fillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _fillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchCancelLimitOrders(
      orders: LimitOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchCancelPairLimitOrders(
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchCancelPairRfqOrders(
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchCancelRfqOrders(
      orders: RfqOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchGetLimitOrderRelevantStates(
      orders: LimitOrderStruct[],
      signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchGetRfqOrderRelevantStates(
      orders: RfqOrderStruct[],
      signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelLimitOrder(
      order: LimitOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelPairLimitOrders(
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelPairRfqOrders(
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelRfqOrder(
      order: RfqOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOrKillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOrKillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLimitOrderHash(
      order: LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLimitOrderInfo(
      order: LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLimitOrderRelevantState(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    getRfqOrderHash(
      order: RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRfqOrderInfo(
      order: RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRfqOrderRelevantState(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAllowedRfqOrigins(
      origins: string[],
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferProtocolFeesForPools(
      poolIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EIP712_DOMAIN_SEPARATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEATURE_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEATURE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GREEDY_TOKENS_BLOOM_FILTER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PROTOCOL_FEE_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _fillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _fillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchCancelLimitOrders(
      orders: LimitOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchCancelPairLimitOrders(
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchCancelPairRfqOrders(
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchCancelRfqOrders(
      orders: RfqOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchGetLimitOrderRelevantStates(
      orders: LimitOrderStruct[],
      signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchGetRfqOrderRelevantStates(
      orders: RfqOrderStruct[],
      signatures: SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelLimitOrder(
      order: LimitOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelPairLimitOrders(
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelPairRfqOrders(
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelRfqOrder(
      order: RfqOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOrKillLimitOrder(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOrKillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillRfqOrder(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLimitOrderHash(
      order: LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLimitOrderInfo(
      order: LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLimitOrderRelevantState(
      order: LimitOrderStruct,
      signature: SignatureStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolFeeMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRfqOrderHash(
      order: RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRfqOrderInfo(
      order: RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRfqOrderRelevantState(
      order: RfqOrderStruct,
      signature: SignatureStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAllowedRfqOrigins(
      origins: string[],
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferProtocolFeesForPools(
      poolIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
