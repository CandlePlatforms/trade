/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface StakingRewardsInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "ROLE_PUBLISHER()": FunctionFragment;
    "ROLE_SUPERVISOR()": FunctionFragment;
    "ROLE_UPDATER()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "newOwner()": FunctionFragment;
    "onAddingLiquidity(address,address,address,uint256,uint256)": FunctionFragment;
    "onRemovingLiquidity(uint256,address,address,address,uint256,uint256)": FunctionFragment;
    "onlyOwnerCanUpdateRegistry()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingPoolRewards(address,address)": FunctionFragment;
    "pendingReserveRewards(address,address,address)": FunctionFragment;
    "pendingRewards(address)": FunctionFragment;
    "prevRegistry()": FunctionFragment;
    "registry()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "restoreRegistry()": FunctionFragment;
    "restrictRegistryUpdate(bool)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardsMultiplier(address,address,address)": FunctionFragment;
    "stakeReserveRewards(address,address,uint256,address)": FunctionFragment;
    "stakeRewards(uint256,address)": FunctionFragment;
    "store()": FunctionFragment;
    "storePoolRewards(address[],address)": FunctionFragment;
    "totalClaimedRewards(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateRegistry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_PUBLISHER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_SUPERVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_UPDATER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "newOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onAddingLiquidity",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onRemovingLiquidity",
    values: [BigNumberish, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingPoolRewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingReserveRewards",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "prevRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "restoreRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restrictRegistryUpdate",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsMultiplier",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeReserveRewards",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeRewards",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "store", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "storePoolRewards",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimedRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_PUBLISHER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_SUPERVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_UPDATER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onAddingLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onRemovingLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingPoolRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingReserveRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prevRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restoreRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictRegistryUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeReserveRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storePoolRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistry",
    data: BytesLike
  ): Result;

  events: {
    "OwnerUpdate(address,address)": EventFragment;
    "RewardsClaimed(address,uint256)": EventFragment;
    "RewardsStaked(address,address,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type OwnerUpdateEvent = TypedEvent<
  [string, string],
  { prevOwner: string; newOwner: string }
>;

export type OwnerUpdateEventFilter = TypedEventFilter<OwnerUpdateEvent>;

export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber],
  { provider: string; amount: BigNumber }
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export type RewardsStakedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { provider: string; poolToken: string; amount: BigNumber; newId: BigNumber }
>;

export type RewardsStakedEventFilter = TypedEventFilter<RewardsStakedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StakingRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingRewardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ROLE_PUBLISHER(overrides?: CallOverrides): Promise<[string]>;

    ROLE_SUPERVISOR(overrides?: CallOverrides): Promise<[string]>;

    ROLE_UPDATER(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    newOwner(overrides?: CallOverrides): Promise<[string]>;

    onAddingLiquidity(
      provider: string,
      poolAnchor: string,
      reserveToken: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onRemovingLiquidity(
      arg0: BigNumberish,
      provider: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingPoolRewards(
      provider: string,
      poolToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingReserveRewards(
      provider: string,
      poolToken: string,
      reserveToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingRewards(
      provider: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    prevRegistry(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    restoreRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    restrictRegistryUpdate(
      restrictOwnerOnly: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardsMultiplier(
      provider: string,
      poolToken: string,
      reserveToken: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    stakeReserveRewards(
      poolToken: string,
      reserveToken: string,
      maxAmount: BigNumberish,
      newPoolToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeRewards(
      maxAmount: BigNumberish,
      newPoolToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    store(overrides?: CallOverrides): Promise<[string]>;

    storePoolRewards(
      providers: string[],
      poolToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalClaimedRewards(
      provider: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  ROLE_PUBLISHER(overrides?: CallOverrides): Promise<string>;

  ROLE_SUPERVISOR(overrides?: CallOverrides): Promise<string>;

  ROLE_UPDATER(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  newOwner(overrides?: CallOverrides): Promise<string>;

  onAddingLiquidity(
    provider: string,
    poolAnchor: string,
    reserveToken: string,
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onRemovingLiquidity(
    arg0: BigNumberish,
    provider: string,
    arg2: string,
    arg3: string,
    arg4: BigNumberish,
    arg5: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingPoolRewards(
    provider: string,
    poolToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingReserveRewards(
    provider: string,
    poolToken: string,
    reserveToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingRewards(
    provider: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  prevRegistry(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  restoreRegistry(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  restrictRegistryUpdate(
    restrictOwnerOnly: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardsMultiplier(
    provider: string,
    poolToken: string,
    reserveToken: string,
    overrides?: CallOverrides
  ): Promise<number>;

  stakeReserveRewards(
    poolToken: string,
    reserveToken: string,
    maxAmount: BigNumberish,
    newPoolToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeRewards(
    maxAmount: BigNumberish,
    newPoolToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  store(overrides?: CallOverrides): Promise<string>;

  storePoolRewards(
    providers: string[],
    poolToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalClaimedRewards(
    provider: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRegistry(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    ROLE_PUBLISHER(overrides?: CallOverrides): Promise<string>;

    ROLE_SUPERVISOR(overrides?: CallOverrides): Promise<string>;

    ROLE_UPDATER(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    claimRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    newOwner(overrides?: CallOverrides): Promise<string>;

    onAddingLiquidity(
      provider: string,
      poolAnchor: string,
      reserveToken: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onRemovingLiquidity(
      arg0: BigNumberish,
      provider: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingPoolRewards(
      provider: string,
      poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingReserveRewards(
      provider: string,
      poolToken: string,
      reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingRewards(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prevRegistry(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    restoreRegistry(overrides?: CallOverrides): Promise<void>;

    restrictRegistryUpdate(
      restrictOwnerOnly: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardsMultiplier(
      provider: string,
      poolToken: string,
      reserveToken: string,
      overrides?: CallOverrides
    ): Promise<number>;

    stakeReserveRewards(
      poolToken: string,
      reserveToken: string,
      maxAmount: BigNumberish,
      newPoolToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    stakeRewards(
      maxAmount: BigNumberish,
      newPoolToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    store(overrides?: CallOverrides): Promise<string>;

    storePoolRewards(
      providers: string[],
      poolToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalClaimedRewards(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegistry(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnerUpdate(address,address)"(
      prevOwner?: string | null,
      newOwner?: string | null
    ): OwnerUpdateEventFilter;
    OwnerUpdate(
      prevOwner?: string | null,
      newOwner?: string | null
    ): OwnerUpdateEventFilter;

    "RewardsClaimed(address,uint256)"(
      provider?: string | null,
      amount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      provider?: string | null,
      amount?: null
    ): RewardsClaimedEventFilter;

    "RewardsStaked(address,address,uint256,uint256)"(
      provider?: string | null,
      poolToken?: string | null,
      amount?: null,
      newId?: BigNumberish | null
    ): RewardsStakedEventFilter;
    RewardsStaked(
      provider?: string | null,
      poolToken?: string | null,
      amount?: null,
      newId?: BigNumberish | null
    ): RewardsStakedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_PUBLISHER(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_SUPERVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_UPDATER(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<BigNumber>;

    onAddingLiquidity(
      provider: string,
      poolAnchor: string,
      reserveToken: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onRemovingLiquidity(
      arg0: BigNumberish,
      provider: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingPoolRewards(
      provider: string,
      poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingReserveRewards(
      provider: string,
      poolToken: string,
      reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingRewards(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prevRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    restoreRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    restrictRegistryUpdate(
      restrictOwnerOnly: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardsMultiplier(
      provider: string,
      poolToken: string,
      reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeReserveRewards(
      poolToken: string,
      reserveToken: string,
      maxAmount: BigNumberish,
      newPoolToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeRewards(
      maxAmount: BigNumberish,
      newPoolToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    store(overrides?: CallOverrides): Promise<BigNumber>;

    storePoolRewards(
      providers: string[],
      poolToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalClaimedRewards(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_PUBLISHER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_SUPERVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_UPDATER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onAddingLiquidity(
      provider: string,
      poolAnchor: string,
      reserveToken: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onRemovingLiquidity(
      arg0: BigNumberish,
      provider: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onlyOwnerCanUpdateRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingPoolRewards(
      provider: string,
      poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingReserveRewards(
      provider: string,
      poolToken: string,
      reserveToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingRewards(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prevRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    restoreRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    restrictRegistryUpdate(
      restrictOwnerOnly: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardsMultiplier(
      provider: string,
      poolToken: string,
      reserveToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeReserveRewards(
      poolToken: string,
      reserveToken: string,
      maxAmount: BigNumberish,
      newPoolToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeRewards(
      maxAmount: BigNumberish,
      newPoolToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    store(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    storePoolRewards(
      providers: string[],
      poolToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalClaimedRewards(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
