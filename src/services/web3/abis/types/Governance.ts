/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface GovernanceInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "exit()": FunctionFragment;
    "govToken()": FunctionFragment;
    "newOwner()": FunctionFragment;
    "newProposalMinimum()": FunctionFragment;
    "owner()": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proposalStats(uint256)": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "propose(address,string)": FunctionFragment;
    "quorum()": FunctionFragment;
    "setNewProposalMinimum(uint256)": FunctionFragment;
    "setQuorum(uint256)": FunctionFragment;
    "setVoteDuration(uint256)": FunctionFragment;
    "setVoteLockDuration(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "tallyVotes(uint256)": FunctionFragment;
    "totalVotes()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "voteAgainst(uint256)": FunctionFragment;
    "voteDuration()": FunctionFragment;
    "voteFor(uint256)": FunctionFragment;
    "voteLockDuration()": FunctionFragment;
    "voteLockFraction()": FunctionFragment;
    "voteLocks(address)": FunctionFragment;
    "votesAgainstOf(address,uint256)": FunctionFragment;
    "votesForOf(address,uint256)": FunctionFragment;
    "votesOf(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exit", values?: undefined): string;
  encodeFunctionData(functionFragment: "govToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "newOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newProposalMinimum",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setNewProposalMinimum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuorum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoteDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoteLockDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "tallyVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteAgainst",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voteFor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteLockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voteLockFraction",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voteLocks", values: [string]): string;
  encodeFunctionData(
    functionFragment: "votesAgainstOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votesForOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "votesOf", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "govToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newProposalMinimum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNewProposalMinimum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setQuorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVoteDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVoteLockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tallyVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteAgainst",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteLockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteLockFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteLocks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votesAgainstOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votesForOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votesOf", data: BytesLike): Result;

  events: {
    "NewProposal(uint256,uint256,uint256,address,address)": EventFragment;
    "NewProposalMinimumUpdated(uint256)": EventFragment;
    "OwnerUpdate(address,address)": EventFragment;
    "ProposalExecuted(uint256,address)": EventFragment;
    "ProposalFinished(uint256,uint256,uint256,bool)": EventFragment;
    "QuorumUpdated(uint256)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "Unstaked(address,uint256)": EventFragment;
    "Vote(uint256,address,bool,uint256)": EventFragment;
    "VoteDurationUpdated(uint256)": EventFragment;
    "VoteLockDurationUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewProposalMinimumUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteDurationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteLockDurationUpdated"): EventFragment;
}

export type NewProposalEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string],
  {
    _id: BigNumber;
    _start: BigNumber;
    _duration: BigNumber;
    _proposer: string;
    _executor: string;
  }
>;

export type NewProposalEventFilter = TypedEventFilter<NewProposalEvent>;

export type NewProposalMinimumUpdatedEvent = TypedEvent<
  [BigNumber],
  { _minimum: BigNumber }
>;

export type NewProposalMinimumUpdatedEventFilter =
  TypedEventFilter<NewProposalMinimumUpdatedEvent>;

export type OwnerUpdateEvent = TypedEvent<
  [string, string],
  { _prevOwner: string; _newOwner: string }
>;

export type OwnerUpdateEventFilter = TypedEventFilter<OwnerUpdateEvent>;

export type ProposalExecutedEvent = TypedEvent<
  [BigNumber, string],
  { _id: BigNumber; _executor: string }
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export type ProposalFinishedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, boolean],
  {
    _id: BigNumber;
    _for: BigNumber;
    _against: BigNumber;
    _quorumReached: boolean;
  }
>;

export type ProposalFinishedEventFilter =
  TypedEventFilter<ProposalFinishedEvent>;

export type QuorumUpdatedEvent = TypedEvent<
  [BigNumber],
  { _quorum: BigNumber }
>;

export type QuorumUpdatedEventFilter = TypedEventFilter<QuorumUpdatedEvent>;

export type StakedEvent = TypedEvent<
  [string, BigNumber],
  { _user: string; _amount: BigNumber }
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export type UnstakedEvent = TypedEvent<
  [string, BigNumber],
  { _user: string; _amount: BigNumber }
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export type VoteEvent = TypedEvent<
  [BigNumber, string, boolean, BigNumber],
  { _id: BigNumber; _voter: string; _vote: boolean; _weight: BigNumber }
>;

export type VoteEventFilter = TypedEventFilter<VoteEvent>;

export type VoteDurationUpdatedEvent = TypedEvent<
  [BigNumber],
  { _voteDuration: BigNumber }
>;

export type VoteDurationUpdatedEventFilter =
  TypedEventFilter<VoteDurationUpdatedEvent>;

export type VoteLockDurationUpdatedEvent = TypedEvent<
  [BigNumber],
  { _duration: BigNumber }
>;

export type VoteLockDurationUpdatedEventFilter =
  TypedEventFilter<VoteLockDurationUpdatedEvent>;

export interface Governance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    govToken(overrides?: CallOverrides): Promise<[string]>;

    newOwner(overrides?: CallOverrides): Promise<[string]>;

    newProposalMinimum(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalStats(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string,
        string,
        string
      ] & {
        id: BigNumber;
        totalVotesFor: BigNumber;
        totalVotesAgainst: BigNumber;
        start: BigNumber;
        end: BigNumber;
        totalAvailableVotes: BigNumber;
        quorum: BigNumber;
        quorumRequired: BigNumber;
        open: boolean;
        executed: boolean;
        proposer: string;
        executor: string;
        hash: string;
      }
    >;

    propose(
      _executor: string,
      _hash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    quorum(overrides?: CallOverrides): Promise<[BigNumber]>;

    setNewProposalMinimum(
      _minimum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setQuorum(
      _quorum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVoteDuration(
      _voteDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVoteLockDuration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tallyVotes(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteAgainst(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    voteFor(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteLockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    voteLockFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    voteLocks(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    votesAgainstOf(
      _voter: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votesForOf(
      _voter: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votesOf(_voter: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  govToken(overrides?: CallOverrides): Promise<string>;

  newOwner(overrides?: CallOverrides): Promise<string>;

  newProposalMinimum(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  proposalStats(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      string,
      string,
      string
    ] & {
      id: BigNumber;
      totalVotesFor: BigNumber;
      totalVotesAgainst: BigNumber;
      start: BigNumber;
      end: BigNumber;
      totalAvailableVotes: BigNumber;
      quorum: BigNumber;
      quorumRequired: BigNumber;
      open: boolean;
      executed: boolean;
      proposer: string;
      executor: string;
      hash: string;
    }
  >;

  propose(
    _executor: string,
    _hash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  quorum(overrides?: CallOverrides): Promise<BigNumber>;

  setNewProposalMinimum(
    _minimum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setQuorum(
    _quorum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVoteDuration(
    _voteDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVoteLockDuration(
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tallyVotes(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteAgainst(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteDuration(overrides?: CallOverrides): Promise<BigNumber>;

  voteFor(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  voteLockFraction(overrides?: CallOverrides): Promise<BigNumber>;

  voteLocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  votesAgainstOf(
    _voter: string,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votesForOf(
    _voter: string,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votesOf(_voter: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    execute(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    exit(overrides?: CallOverrides): Promise<void>;

    govToken(overrides?: CallOverrides): Promise<string>;

    newOwner(overrides?: CallOverrides): Promise<string>;

    newProposalMinimum(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposalStats(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string,
        string,
        string
      ] & {
        id: BigNumber;
        totalVotesFor: BigNumber;
        totalVotesAgainst: BigNumber;
        start: BigNumber;
        end: BigNumber;
        totalAvailableVotes: BigNumber;
        quorum: BigNumber;
        quorumRequired: BigNumber;
        open: boolean;
        executed: boolean;
        proposer: string;
        executor: string;
        hash: string;
      }
    >;

    propose(
      _executor: string,
      _hash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    quorum(overrides?: CallOverrides): Promise<BigNumber>;

    setNewProposalMinimum(
      _minimum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setQuorum(_quorum: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setVoteDuration(
      _voteDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVoteLockDuration(
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    tallyVotes(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    voteAgainst(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    voteDuration(overrides?: CallOverrides): Promise<BigNumber>;

    voteFor(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    voteLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    voteLockFraction(overrides?: CallOverrides): Promise<BigNumber>;

    voteLocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    votesAgainstOf(
      _voter: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votesForOf(
      _voter: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votesOf(_voter: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "NewProposal(uint256,uint256,uint256,address,address)"(
      _id?: BigNumberish | null,
      _start?: null,
      _duration?: null,
      _proposer?: null,
      _executor?: null
    ): NewProposalEventFilter;
    NewProposal(
      _id?: BigNumberish | null,
      _start?: null,
      _duration?: null,
      _proposer?: null,
      _executor?: null
    ): NewProposalEventFilter;

    "NewProposalMinimumUpdated(uint256)"(
      _minimum?: null
    ): NewProposalMinimumUpdatedEventFilter;
    NewProposalMinimumUpdated(
      _minimum?: null
    ): NewProposalMinimumUpdatedEventFilter;

    "OwnerUpdate(address,address)"(
      _prevOwner?: string | null,
      _newOwner?: string | null
    ): OwnerUpdateEventFilter;
    OwnerUpdate(
      _prevOwner?: string | null,
      _newOwner?: string | null
    ): OwnerUpdateEventFilter;

    "ProposalExecuted(uint256,address)"(
      _id?: BigNumberish | null,
      _executor?: string | null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      _id?: BigNumberish | null,
      _executor?: string | null
    ): ProposalExecutedEventFilter;

    "ProposalFinished(uint256,uint256,uint256,bool)"(
      _id?: BigNumberish | null,
      _for?: null,
      _against?: null,
      _quorumReached?: null
    ): ProposalFinishedEventFilter;
    ProposalFinished(
      _id?: BigNumberish | null,
      _for?: null,
      _against?: null,
      _quorumReached?: null
    ): ProposalFinishedEventFilter;

    "QuorumUpdated(uint256)"(_quorum?: null): QuorumUpdatedEventFilter;
    QuorumUpdated(_quorum?: null): QuorumUpdatedEventFilter;

    "Staked(address,uint256)"(
      _user?: string | null,
      _amount?: null
    ): StakedEventFilter;
    Staked(_user?: string | null, _amount?: null): StakedEventFilter;

    "Unstaked(address,uint256)"(
      _user?: string | null,
      _amount?: null
    ): UnstakedEventFilter;
    Unstaked(_user?: string | null, _amount?: null): UnstakedEventFilter;

    "Vote(uint256,address,bool,uint256)"(
      _id?: BigNumberish | null,
      _voter?: string | null,
      _vote?: null,
      _weight?: null
    ): VoteEventFilter;
    Vote(
      _id?: BigNumberish | null,
      _voter?: string | null,
      _vote?: null,
      _weight?: null
    ): VoteEventFilter;

    "VoteDurationUpdated(uint256)"(
      _voteDuration?: null
    ): VoteDurationUpdatedEventFilter;
    VoteDurationUpdated(_voteDuration?: null): VoteDurationUpdatedEventFilter;

    "VoteLockDurationUpdated(uint256)"(
      _duration?: null
    ): VoteLockDurationUpdatedEventFilter;
    VoteLockDurationUpdated(
      _duration?: null
    ): VoteLockDurationUpdatedEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    govToken(overrides?: CallOverrides): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<BigNumber>;

    newProposalMinimum(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposalStats(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      _executor: string,
      _hash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    quorum(overrides?: CallOverrides): Promise<BigNumber>;

    setNewProposalMinimum(
      _minimum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setQuorum(
      _quorum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVoteDuration(
      _voteDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVoteLockDuration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tallyVotes(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteAgainst(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteDuration(overrides?: CallOverrides): Promise<BigNumber>;

    voteFor(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    voteLockFraction(overrides?: CallOverrides): Promise<BigNumber>;

    voteLocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    votesAgainstOf(
      _voter: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votesForOf(
      _voter: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votesOf(_voter: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    govToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newProposalMinimum(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalStats(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      _executor: string,
      _hash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    quorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setNewProposalMinimum(
      _minimum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setQuorum(
      _quorum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVoteDuration(
      _voteDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVoteLockDuration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tallyVotes(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteAgainst(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteFor(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteLockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteLockFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteLocks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votesAgainstOf(
      _voter: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votesForOf(
      _voter: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votesOf(
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
