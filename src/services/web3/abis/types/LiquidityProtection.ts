/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LiquidityProtectionInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "acceptStoreOwnership()": FunctionFragment;
    "acceptWalletOwnership()": FunctionFragment;
    "addLiquidity(address,address,uint256)": FunctionFragment;
    "addLiquidityFor(address,address,address,uint256)": FunctionFragment;
    "claimBalance(uint256,uint256)": FunctionFragment;
    "newOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolAvailableSpace(address)": FunctionFragment;
    "poolROI(address,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "removeLiquidity(uint256,uint32)": FunctionFragment;
    "removeLiquidityReturn(uint256,uint32,uint256)": FunctionFragment;
    "settings()": FunctionFragment;
    "stats()": FunctionFragment;
    "store()": FunctionFragment;
    "systemStore()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferPosition(uint256,address)": FunctionFragment;
    "transferPositionAndNotify(uint256,address,address,bytes)": FunctionFragment;
    "transferStoreOwnership(address)": FunctionFragment;
    "transferWalletOwnership(address)": FunctionFragment;
    "wallet()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptStoreOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptWalletOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityFor",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBalance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "newOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolAvailableSpace",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolROI",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityReturn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(functionFragment: "stats", values?: undefined): string;
  encodeFunctionData(functionFragment: "store", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "systemStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPosition",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPositionAndNotify",
    values: [BigNumberish, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferStoreOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWalletOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "wallet", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptStoreOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptWalletOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolAvailableSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolROI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPositionAndNotify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferStoreOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWalletOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wallet", data: BytesLike): Result;

  events: {
    "OwnerUpdate(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerUpdate"): EventFragment;
}

export type OwnerUpdateEvent = TypedEvent<
  [string, string],
  { _prevOwner: string; _newOwner: string }
>;

export type OwnerUpdateEventFilter = TypedEventFilter<OwnerUpdateEvent>;

export interface LiquidityProtection extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityProtectionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptStoreOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptWalletOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidity(
      poolAnchor: string,
      reserveToken: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityFor(
      owner: string,
      poolAnchor: string,
      reserveToken: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimBalance(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolAvailableSpace(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    poolROI(
      poolToken: string,
      reserveToken: string,
      reserveAmount: BigNumberish,
      poolRateN: BigNumberish,
      poolRateD: BigNumberish,
      reserveRateN: BigNumberish,
      reserveRateD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeLiquidity(
      id: BigNumberish,
      portion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityReturn(
      id: BigNumberish,
      portion: BigNumberish,
      removeTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    settings(overrides?: CallOverrides): Promise<[string]>;

    stats(overrides?: CallOverrides): Promise<[string]>;

    store(overrides?: CallOverrides): Promise<[string]>;

    systemStore(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferPosition(
      id: BigNumberish,
      newProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferPositionAndNotify(
      id: BigNumberish,
      newProvider: string,
      callback: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferStoreOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferWalletOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wallet(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptStoreOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptWalletOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidity(
    poolAnchor: string,
    reserveToken: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityFor(
    owner: string,
    poolAnchor: string,
    reserveToken: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimBalance(
    startIndex: BigNumberish,
    endIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolAvailableSpace(
    poolAnchor: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  poolROI(
    poolToken: string,
    reserveToken: string,
    reserveAmount: BigNumberish,
    poolRateN: BigNumberish,
    poolRateD: BigNumberish,
    reserveRateN: BigNumberish,
    reserveRateD: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeLiquidity(
    id: BigNumberish,
    portion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityReturn(
    id: BigNumberish,
    portion: BigNumberish,
    removeTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  settings(overrides?: CallOverrides): Promise<string>;

  stats(overrides?: CallOverrides): Promise<string>;

  store(overrides?: CallOverrides): Promise<string>;

  systemStore(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferPosition(
    id: BigNumberish,
    newProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferPositionAndNotify(
    id: BigNumberish,
    newProvider: string,
    callback: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferStoreOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferWalletOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wallet(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    acceptStoreOwnership(overrides?: CallOverrides): Promise<void>;

    acceptWalletOwnership(overrides?: CallOverrides): Promise<void>;

    addLiquidity(
      poolAnchor: string,
      reserveToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidityFor(
      owner: string,
      poolAnchor: string,
      reserveToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBalance(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    newOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolAvailableSpace(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    poolROI(
      poolToken: string,
      reserveToken: string,
      reserveAmount: BigNumberish,
      poolRateN: BigNumberish,
      poolRateD: BigNumberish,
      reserveRateN: BigNumberish,
      reserveRateD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      id: BigNumberish,
      portion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityReturn(
      id: BigNumberish,
      portion: BigNumberish,
      removeTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    settings(overrides?: CallOverrides): Promise<string>;

    stats(overrides?: CallOverrides): Promise<string>;

    store(overrides?: CallOverrides): Promise<string>;

    systemStore(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPosition(
      id: BigNumberish,
      newProvider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferPositionAndNotify(
      id: BigNumberish,
      newProvider: string,
      callback: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferStoreOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferWalletOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wallet(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnerUpdate(address,address)"(
      _prevOwner?: string | null,
      _newOwner?: string | null
    ): OwnerUpdateEventFilter;
    OwnerUpdate(
      _prevOwner?: string | null,
      _newOwner?: string | null
    ): OwnerUpdateEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptStoreOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptWalletOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidity(
      poolAnchor: string,
      reserveToken: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityFor(
      owner: string,
      poolAnchor: string,
      reserveToken: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimBalance(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolAvailableSpace(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolROI(
      poolToken: string,
      reserveToken: string,
      reserveAmount: BigNumberish,
      poolRateN: BigNumberish,
      poolRateD: BigNumberish,
      reserveRateN: BigNumberish,
      reserveRateD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      id: BigNumberish,
      portion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityReturn(
      id: BigNumberish,
      portion: BigNumberish,
      removeTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    stats(overrides?: CallOverrides): Promise<BigNumber>;

    store(overrides?: CallOverrides): Promise<BigNumber>;

    systemStore(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferPosition(
      id: BigNumberish,
      newProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferPositionAndNotify(
      id: BigNumberish,
      newProvider: string,
      callback: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferStoreOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferWalletOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptStoreOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptWalletOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      poolAnchor: string,
      reserveToken: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityFor(
      owner: string,
      poolAnchor: string,
      reserveToken: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimBalance(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolAvailableSpace(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolROI(
      poolToken: string,
      reserveToken: string,
      reserveAmount: BigNumberish,
      poolRateN: BigNumberish,
      poolRateD: BigNumberish,
      reserveRateN: BigNumberish,
      reserveRateD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      id: BigNumberish,
      portion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityReturn(
      id: BigNumberish,
      portion: BigNumberish,
      removeTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    store(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferPosition(
      id: BigNumberish,
      newProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferPositionAndNotify(
      id: BigNumberish,
      newProvider: string,
      callback: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferStoreOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferWalletOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
