/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ConverterInterface extends utils.Interface {
  functions: {
    "acceptAnchorOwnership()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "acceptTokenOwnership()": FunctionFragment;
    "addLiquidity(address[],uint256[],uint256)": FunctionFragment;
    "addLiquidityCost(address[],uint256,uint256)": FunctionFragment;
    "addLiquidityReturn(address[],uint256[])": FunctionFragment;
    "addReserve(address,uint32)": FunctionFragment;
    "anchor()": FunctionFragment;
    "averageRateInfo()": FunctionFragment;
    "connectorTokenCount()": FunctionFragment;
    "connectorTokens(uint256)": FunctionFragment;
    "connectors(address)": FunctionFragment;
    "conversionFee()": FunctionFragment;
    "convert(address,address,uint256,address,address)": FunctionFragment;
    "converterType()": FunctionFragment;
    "getConnectorBalance(address)": FunctionFragment;
    "getReturn(address,address,uint256)": FunctionFragment;
    "isActive()": FunctionFragment;
    "isV28OrHigher()": FunctionFragment;
    "maxConversionFee()": FunctionFragment;
    "newOwner()": FunctionFragment;
    "onUpgradeComplete()": FunctionFragment;
    "onlyOwnerCanUpdateRegistry()": FunctionFragment;
    "owner()": FunctionFragment;
    "prevRegistry()": FunctionFragment;
    "processNetworkFees()": FunctionFragment;
    "recentAverageRate(address)": FunctionFragment;
    "registry()": FunctionFragment;
    "removeLiquidity(uint256,address[],uint256[])": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "removeLiquidityReturn(uint256,address[])": FunctionFragment;
    "reserveBalance(address)": FunctionFragment;
    "reserveBalances()": FunctionFragment;
    "reserveTokenCount()": FunctionFragment;
    "reserveTokens()": FunctionFragment;
    "reserveWeight(address)": FunctionFragment;
    "restoreRegistry()": FunctionFragment;
    "restrictRegistryUpdate(bool)": FunctionFragment;
    "setConversionFee(uint32)": FunctionFragment;
    "sourceAmountAndFee(address,address,uint256)": FunctionFragment;
    "syncReserveBalances()": FunctionFragment;
    "targetAmountAndFee(address,address,uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "transferAnchorOwnership(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferReservesOnUpgrade(address)": FunctionFragment;
    "transferTokenOwnership(address)": FunctionFragment;
    "updateRegistry()": FunctionFragment;
    "upgrade()": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptAnchorOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTokenOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityCost",
    values: [string[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityReturn",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addReserve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "anchor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "averageRateInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "connectors", values: [string]): string;
  encodeFunctionData(
    functionFragment: "conversionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "converterType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConnectorBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReturn",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isV28OrHigher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxConversionFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "newOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onUpgradeComplete",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prevRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processNetworkFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recentAverageRate",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityReturn",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "restoreRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restrictRegistryUpdate",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setConversionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sourceAmountAndFee",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "syncReserveBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetAmountAndFee",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferAnchorOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferReservesOnUpgrade",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokenOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptAnchorOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTokenOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addReserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "anchor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "averageRateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "connectors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "conversionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "converterType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConnectorBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReturn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isV28OrHigher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxConversionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onUpgradeComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prevRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processNetworkFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recentAverageRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restoreRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictRegistryUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConversionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sourceAmountAndFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncReserveBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetAmountAndFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAnchorOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferReservesOnUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokenOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Activation(uint16,address,bool)": EventFragment;
    "Conversion(address,address,address,uint256,uint256,int256)": EventFragment;
    "ConversionFeeUpdate(uint32,uint32)": EventFragment;
    "LiquidityAdded(address,address,uint256,uint256,uint256)": EventFragment;
    "LiquidityRemoved(address,address,uint256,uint256,uint256)": EventFragment;
    "OwnerUpdate(address,address)": EventFragment;
    "TokenRateUpdate(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Activation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Conversion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConversionFeeUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRateUpdate"): EventFragment;
}

export type ActivationEvent = TypedEvent<
  [number, string, boolean],
  { _type: number; _anchor: string; _activated: boolean }
>;

export type ActivationEventFilter = TypedEventFilter<ActivationEvent>;

export type ConversionEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  {
    _fromToken: string;
    _toToken: string;
    _trader: string;
    _amount: BigNumber;
    _return: BigNumber;
    _conversionFee: BigNumber;
  }
>;

export type ConversionEventFilter = TypedEventFilter<ConversionEvent>;

export type ConversionFeeUpdateEvent = TypedEvent<
  [number, number],
  { _prevFee: number; _newFee: number }
>;

export type ConversionFeeUpdateEventFilter =
  TypedEventFilter<ConversionFeeUpdateEvent>;

export type LiquidityAddedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    _provider: string;
    _reserveToken: string;
    _amount: BigNumber;
    _newBalance: BigNumber;
    _newSupply: BigNumber;
  }
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export type LiquidityRemovedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    _provider: string;
    _reserveToken: string;
    _amount: BigNumber;
    _newBalance: BigNumber;
    _newSupply: BigNumber;
  }
>;

export type LiquidityRemovedEventFilter =
  TypedEventFilter<LiquidityRemovedEvent>;

export type OwnerUpdateEvent = TypedEvent<
  [string, string],
  { _prevOwner: string; _newOwner: string }
>;

export type OwnerUpdateEventFilter = TypedEventFilter<OwnerUpdateEvent>;

export type TokenRateUpdateEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { _token1: string; _token2: string; _rateN: BigNumber; _rateD: BigNumber }
>;

export type TokenRateUpdateEventFilter = TypedEventFilter<TokenRateUpdateEvent>;

export interface Converter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConverterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptAnchorOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptTokenOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidity(
      _reserveTokens: string[],
      _reserveAmounts: BigNumberish[],
      _minReturn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityCost(
      _reserveTokens: string[],
      _reserveTokenIndex: BigNumberish,
      _reserveAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    addLiquidityReturn(
      _reserveTokens: string[],
      _reserveAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addReserve(
      _token: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anchor(overrides?: CallOverrides): Promise<[string]>;

    averageRateInfo(overrides?: CallOverrides): Promise<[BigNumber]>;

    connectorTokenCount(overrides?: CallOverrides): Promise<[number]>;

    connectorTokens(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    connectors(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

    conversionFee(overrides?: CallOverrides): Promise<[number]>;

    convert(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    converterType(overrides?: CallOverrides): Promise<[number]>;

    getConnectorBalance(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReturn(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    isV28OrHigher(overrides?: CallOverrides): Promise<[boolean]>;

    maxConversionFee(overrides?: CallOverrides): Promise<[number]>;

    newOwner(overrides?: CallOverrides): Promise<[string]>;

    onUpgradeComplete(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    prevRegistry(overrides?: CallOverrides): Promise<[string]>;

    processNetworkFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recentAverageRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidity(
      _amount: BigNumberish,
      _reserveTokens: string[],
      _reserveMinReturnAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityReturn(
      _amount: BigNumberish,
      _reserveTokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    reserveBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reserveBalances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    reserveTokenCount(overrides?: CallOverrides): Promise<[number]>;

    reserveTokens(overrides?: CallOverrides): Promise<[string[]]>;

    reserveWeight(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    restoreRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConversionFee(
      _conversionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sourceAmountAndFee(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    syncReserveBalances(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    targetAmountAndFee(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferAnchorOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferReservesOnUpgrade(
      _newConverter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferTokenOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[number]>;
  };

  acceptAnchorOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptTokenOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidity(
    _reserveTokens: string[],
    _reserveAmounts: BigNumberish[],
    _minReturn: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityCost(
    _reserveTokens: string[],
    _reserveTokenIndex: BigNumberish,
    _reserveAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  addLiquidityReturn(
    _reserveTokens: string[],
    _reserveAmounts: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addReserve(
    _token: string,
    _weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anchor(overrides?: CallOverrides): Promise<string>;

  averageRateInfo(overrides?: CallOverrides): Promise<BigNumber>;

  connectorTokenCount(overrides?: CallOverrides): Promise<number>;

  connectorTokens(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  connectors(
    _address: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

  conversionFee(overrides?: CallOverrides): Promise<number>;

  convert(
    _sourceToken: string,
    _targetToken: string,
    _amount: BigNumberish,
    _trader: string,
    _beneficiary: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  converterType(overrides?: CallOverrides): Promise<number>;

  getConnectorBalance(
    _connectorToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReturn(
    _sourceToken: string,
    _targetToken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  isV28OrHigher(overrides?: CallOverrides): Promise<boolean>;

  maxConversionFee(overrides?: CallOverrides): Promise<number>;

  newOwner(overrides?: CallOverrides): Promise<string>;

  onUpgradeComplete(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  prevRegistry(overrides?: CallOverrides): Promise<string>;

  processNetworkFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recentAverageRate(
    _token: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  registry(overrides?: CallOverrides): Promise<string>;

  removeLiquidity(
    _amount: BigNumberish,
    _reserveTokens: string[],
    _reserveMinReturnAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityReturn(
    _amount: BigNumberish,
    _reserveTokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  reserveBalance(
    _reserveToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reserveBalances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  reserveTokenCount(overrides?: CallOverrides): Promise<number>;

  reserveTokens(overrides?: CallOverrides): Promise<string[]>;

  reserveWeight(
    _reserveToken: string,
    overrides?: CallOverrides
  ): Promise<number>;

  restoreRegistry(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  restrictRegistryUpdate(
    _onlyOwnerCanUpdateRegistry: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConversionFee(
    _conversionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sourceAmountAndFee(
    _sourceToken: string,
    _targetToken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  syncReserveBalances(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  targetAmountAndFee(
    _sourceToken: string,
    _targetToken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  token(overrides?: CallOverrides): Promise<string>;

  transferAnchorOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferReservesOnUpgrade(
    _newConverter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferTokenOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRegistry(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgrade(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    acceptAnchorOwnership(overrides?: CallOverrides): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    acceptTokenOwnership(overrides?: CallOverrides): Promise<void>;

    addLiquidity(
      _reserveTokens: string[],
      _reserveAmounts: BigNumberish[],
      _minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidityCost(
      _reserveTokens: string[],
      _reserveTokenIndex: BigNumberish,
      _reserveAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    addLiquidityReturn(
      _reserveTokens: string[],
      _reserveAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addReserve(
      _token: string,
      _weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    anchor(overrides?: CallOverrides): Promise<string>;

    averageRateInfo(overrides?: CallOverrides): Promise<BigNumber>;

    connectorTokenCount(overrides?: CallOverrides): Promise<number>;

    connectorTokens(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    connectors(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

    conversionFee(overrides?: CallOverrides): Promise<number>;

    convert(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    converterType(overrides?: CallOverrides): Promise<number>;

    getConnectorBalance(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReturn(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    isV28OrHigher(overrides?: CallOverrides): Promise<boolean>;

    maxConversionFee(overrides?: CallOverrides): Promise<number>;

    newOwner(overrides?: CallOverrides): Promise<string>;

    onUpgradeComplete(overrides?: CallOverrides): Promise<void>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    prevRegistry(overrides?: CallOverrides): Promise<string>;

    processNetworkFees(overrides?: CallOverrides): Promise<void>;

    recentAverageRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    registry(overrides?: CallOverrides): Promise<string>;

    removeLiquidity(
      _amount: BigNumberish,
      _reserveTokens: string[],
      _reserveMinReturnAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    liquidate(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    removeLiquidityReturn(
      _amount: BigNumberish,
      _reserveTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    reserveBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveBalances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    reserveTokenCount(overrides?: CallOverrides): Promise<number>;

    reserveTokens(overrides?: CallOverrides): Promise<string[]>;

    reserveWeight(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<number>;

    restoreRegistry(overrides?: CallOverrides): Promise<void>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setConversionFee(
      _conversionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sourceAmountAndFee(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    syncReserveBalances(overrides?: CallOverrides): Promise<void>;

    targetAmountAndFee(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    token(overrides?: CallOverrides): Promise<string>;

    transferAnchorOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferReservesOnUpgrade(
      _newConverter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTokenOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegistry(overrides?: CallOverrides): Promise<void>;

    upgrade(overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "Activation(uint16,address,bool)"(
      _type?: BigNumberish | null,
      _anchor?: string | null,
      _activated?: boolean | null
    ): ActivationEventFilter;
    Activation(
      _type?: BigNumberish | null,
      _anchor?: string | null,
      _activated?: boolean | null
    ): ActivationEventFilter;

    "Conversion(address,address,address,uint256,uint256,int256)"(
      _fromToken?: string | null,
      _toToken?: string | null,
      _trader?: string | null,
      _amount?: null,
      _return?: null,
      _conversionFee?: null
    ): ConversionEventFilter;
    Conversion(
      _fromToken?: string | null,
      _toToken?: string | null,
      _trader?: string | null,
      _amount?: null,
      _return?: null,
      _conversionFee?: null
    ): ConversionEventFilter;

    "ConversionFeeUpdate(uint32,uint32)"(
      _prevFee?: null,
      _newFee?: null
    ): ConversionFeeUpdateEventFilter;
    ConversionFeeUpdate(
      _prevFee?: null,
      _newFee?: null
    ): ConversionFeeUpdateEventFilter;

    "LiquidityAdded(address,address,uint256,uint256,uint256)"(
      _provider?: string | null,
      _reserveToken?: string | null,
      _amount?: null,
      _newBalance?: null,
      _newSupply?: null
    ): LiquidityAddedEventFilter;
    LiquidityAdded(
      _provider?: string | null,
      _reserveToken?: string | null,
      _amount?: null,
      _newBalance?: null,
      _newSupply?: null
    ): LiquidityAddedEventFilter;

    "LiquidityRemoved(address,address,uint256,uint256,uint256)"(
      _provider?: string | null,
      _reserveToken?: string | null,
      _amount?: null,
      _newBalance?: null,
      _newSupply?: null
    ): LiquidityRemovedEventFilter;
    LiquidityRemoved(
      _provider?: string | null,
      _reserveToken?: string | null,
      _amount?: null,
      _newBalance?: null,
      _newSupply?: null
    ): LiquidityRemovedEventFilter;

    "OwnerUpdate(address,address)"(
      _prevOwner?: string | null,
      _newOwner?: string | null
    ): OwnerUpdateEventFilter;
    OwnerUpdate(
      _prevOwner?: string | null,
      _newOwner?: string | null
    ): OwnerUpdateEventFilter;

    "TokenRateUpdate(address,address,uint256,uint256)"(
      _token1?: string | null,
      _token2?: string | null,
      _rateN?: null,
      _rateD?: null
    ): TokenRateUpdateEventFilter;
    TokenRateUpdate(
      _token1?: string | null,
      _token2?: string | null,
      _rateN?: null,
      _rateD?: null
    ): TokenRateUpdateEventFilter;
  };

  estimateGas: {
    acceptAnchorOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptTokenOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidity(
      _reserveTokens: string[],
      _reserveAmounts: BigNumberish[],
      _minReturn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityCost(
      _reserveTokens: string[],
      _reserveTokenIndex: BigNumberish,
      _reserveAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidityReturn(
      _reserveTokens: string[],
      _reserveAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addReserve(
      _token: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anchor(overrides?: CallOverrides): Promise<BigNumber>;

    averageRateInfo(overrides?: CallOverrides): Promise<BigNumber>;

    connectorTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    connectorTokens(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    connectors(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    conversionFee(overrides?: CallOverrides): Promise<BigNumber>;

    convert(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    converterType(overrides?: CallOverrides): Promise<BigNumber>;

    getConnectorBalance(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReturn(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    isV28OrHigher(overrides?: CallOverrides): Promise<BigNumber>;

    maxConversionFee(overrides?: CallOverrides): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<BigNumber>;

    onUpgradeComplete(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prevRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    processNetworkFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recentAverageRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      _amount: BigNumberish,
      _reserveTokens: string[],
      _reserveMinReturnAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityReturn(
      _amount: BigNumberish,
      _reserveTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveBalances(overrides?: CallOverrides): Promise<BigNumber>;

    reserveTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    reserveTokens(overrides?: CallOverrides): Promise<BigNumber>;

    reserveWeight(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    restoreRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConversionFee(
      _conversionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sourceAmountAndFee(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    syncReserveBalances(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    targetAmountAndFee(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferAnchorOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferReservesOnUpgrade(
      _newConverter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferTokenOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptAnchorOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptTokenOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      _reserveTokens: string[],
      _reserveAmounts: BigNumberish[],
      _minReturn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityCost(
      _reserveTokens: string[],
      _reserveTokenIndex: BigNumberish,
      _reserveAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidityReturn(
      _reserveTokens: string[],
      _reserveAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addReserve(
      _token: string,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anchor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    averageRateInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorTokenCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connectorTokens(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connectors(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    conversionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convert(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    converterType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConnectorBalance(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReturn(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isV28OrHigher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxConversionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onUpgradeComplete(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onlyOwnerCanUpdateRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prevRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processNetworkFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recentAverageRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      _amount: BigNumberish,
      _reserveTokens: string[],
      _reserveMinReturnAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityReturn(
      _amount: BigNumberish,
      _reserveTokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveTokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveWeight(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    restoreRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConversionFee(
      _conversionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sourceAmountAndFee(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    syncReserveBalances(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    targetAmountAndFee(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAnchorOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferReservesOnUpgrade(
      _newConverter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferTokenOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgrade(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
