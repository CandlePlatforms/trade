/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LiquidityProtectionSettingsInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "ROLE_OWNER()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "addLiquidityDisabled(address,address)": FunctionFragment;
    "addPoolToWhitelist(address)": FunctionFragment;
    "addSubscriber(address)": FunctionFragment;
    "averageRateMaxDeviation()": FunctionFragment;
    "defaultNetworkTokenMintingLimit()": FunctionFragment;
    "disableAddLiquidity(address,address,bool)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isPoolSupported(address)": FunctionFragment;
    "isPoolWhitelisted(address)": FunctionFragment;
    "lockDuration()": FunctionFragment;
    "maxProtectionDelay()": FunctionFragment;
    "minNetworkCompensation()": FunctionFragment;
    "minNetworkTokenLiquidityForMinting()": FunctionFragment;
    "minProtectionDelay()": FunctionFragment;
    "networkToken()": FunctionFragment;
    "networkTokenMintingLimits(address)": FunctionFragment;
    "newOwner()": FunctionFragment;
    "onlyOwnerCanUpdateRegistry()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolWhitelist()": FunctionFragment;
    "prevRegistry()": FunctionFragment;
    "registry()": FunctionFragment;
    "removePoolFromWhitelist(address)": FunctionFragment;
    "removeSubscriber(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "restoreRegistry()": FunctionFragment;
    "restrictRegistryUpdate(bool)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAverageRateMaxDeviation(uint32)": FunctionFragment;
    "setDefaultNetworkTokenMintingLimit(uint256)": FunctionFragment;
    "setLockDuration(uint256)": FunctionFragment;
    "setMinNetworkCompensation(uint256)": FunctionFragment;
    "setMinNetworkTokenLiquidityForMinting(uint256)": FunctionFragment;
    "setNetworkTokenMintingLimit(address,uint256)": FunctionFragment;
    "setProtectionDelays(uint256,uint256)": FunctionFragment;
    "subscribers()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateRegistry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_OWNER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityDisabled",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPoolToWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSubscriber",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "averageRateMaxDeviation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultNetworkTokenMintingLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableAddLiquidity",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolSupported",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxProtectionDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minNetworkCompensation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minNetworkTokenLiquidityForMinting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minProtectionDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "networkToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "networkTokenMintingLimits",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "newOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prevRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removePoolFromWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSubscriber",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "restoreRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restrictRegistryUpdate",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAverageRateMaxDeviation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultNetworkTokenMintingLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinNetworkCompensation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinNetworkTokenLiquidityForMinting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNetworkTokenMintingLimit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtectionDelays",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_OWNER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPoolToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSubscriber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "averageRateMaxDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultNetworkTokenMintingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPoolSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxProtectionDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minNetworkCompensation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minNetworkTokenLiquidityForMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minProtectionDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkTokenMintingLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prevRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePoolFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSubscriber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restoreRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictRegistryUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAverageRateMaxDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultNetworkTokenMintingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinNetworkCompensation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinNetworkTokenLiquidityForMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNetworkTokenMintingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtectionDelays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistry",
    data: BytesLike
  ): Result;

  events: {
    "AddLiquidityDisabled(address,address,bool)": EventFragment;
    "AverageRateMaxDeviationUpdated(uint32,uint32)": EventFragment;
    "DefaultNetworkTokenMintingLimitUpdated(uint256,uint256)": EventFragment;
    "LockDurationUpdated(uint256,uint256)": EventFragment;
    "MinNetworkCompensationUpdated(uint256,uint256)": EventFragment;
    "MinNetworkTokenLiquidityForMintingUpdated(uint256,uint256)": EventFragment;
    "NetworkTokenMintingLimitUpdated(address,uint256,uint256)": EventFragment;
    "OwnerUpdate(address,address)": EventFragment;
    "PoolWhitelistUpdated(address,bool)": EventFragment;
    "ProtectionDelaysUpdated(uint256,uint256,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SubscriberUpdated(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidityDisabled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AverageRateMaxDeviationUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DefaultNetworkTokenMintingLimitUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockDurationUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinNetworkCompensationUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinNetworkTokenLiquidityForMintingUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NetworkTokenMintingLimitUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolWhitelistUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtectionDelaysUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriberUpdated"): EventFragment;
}

export type AddLiquidityDisabledEvent = TypedEvent<
  [string, string, boolean],
  { poolAnchor: string; reserveToken: string; disabled: boolean }
>;

export type AddLiquidityDisabledEventFilter =
  TypedEventFilter<AddLiquidityDisabledEvent>;

export type AverageRateMaxDeviationUpdatedEvent = TypedEvent<
  [number, number],
  { prevAverageRateMaxDeviation: number; newAverageRateMaxDeviation: number }
>;

export type AverageRateMaxDeviationUpdatedEventFilter =
  TypedEventFilter<AverageRateMaxDeviationUpdatedEvent>;

export type DefaultNetworkTokenMintingLimitUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { prevDefault: BigNumber; newDefault: BigNumber }
>;

export type DefaultNetworkTokenMintingLimitUpdatedEventFilter =
  TypedEventFilter<DefaultNetworkTokenMintingLimitUpdatedEvent>;

export type LockDurationUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { prevLockDuration: BigNumber; newLockDuration: BigNumber }
>;

export type LockDurationUpdatedEventFilter =
  TypedEventFilter<LockDurationUpdatedEvent>;

export type MinNetworkCompensationUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  {
    prevMinNetworkCompensation: BigNumber;
    newMinNetworkCompensation: BigNumber;
  }
>;

export type MinNetworkCompensationUpdatedEventFilter =
  TypedEventFilter<MinNetworkCompensationUpdatedEvent>;

export type MinNetworkTokenLiquidityForMintingUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { prevMin: BigNumber; newMin: BigNumber }
>;

export type MinNetworkTokenLiquidityForMintingUpdatedEventFilter =
  TypedEventFilter<MinNetworkTokenLiquidityForMintingUpdatedEvent>;

export type NetworkTokenMintingLimitUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { poolAnchor: string; prevLimit: BigNumber; newLimit: BigNumber }
>;

export type NetworkTokenMintingLimitUpdatedEventFilter =
  TypedEventFilter<NetworkTokenMintingLimitUpdatedEvent>;

export type OwnerUpdateEvent = TypedEvent<
  [string, string],
  { _prevOwner: string; _newOwner: string }
>;

export type OwnerUpdateEventFilter = TypedEventFilter<OwnerUpdateEvent>;

export type PoolWhitelistUpdatedEvent = TypedEvent<
  [string, boolean],
  { poolAnchor: string; added: boolean }
>;

export type PoolWhitelistUpdatedEventFilter =
  TypedEventFilter<PoolWhitelistUpdatedEvent>;

export type ProtectionDelaysUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    prevMinProtectionDelay: BigNumber;
    newMinProtectionDelay: BigNumber;
    prevMaxProtectionDelay: BigNumber;
    newMaxProtectionDelay: BigNumber;
  }
>;

export type ProtectionDelaysUpdatedEventFilter =
  TypedEventFilter<ProtectionDelaysUpdatedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type SubscriberUpdatedEvent = TypedEvent<
  [string, boolean],
  { subscriber: string; added: boolean }
>;

export type SubscriberUpdatedEventFilter =
  TypedEventFilter<SubscriberUpdatedEvent>;

export interface LiquidityProtectionSettings extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityProtectionSettingsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ROLE_OWNER(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityDisabled(
      poolAnchor: string,
      reserveToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addPoolToWhitelist(
      poolAnchor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSubscriber(
      subscriber: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    averageRateMaxDeviation(overrides?: CallOverrides): Promise<[number]>;

    defaultNetworkTokenMintingLimit(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    disableAddLiquidity(
      poolAnchor: string,
      reserveToken: string,
      disable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPoolSupported(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPoolWhitelisted(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxProtectionDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    minNetworkCompensation(overrides?: CallOverrides): Promise<[BigNumber]>;

    minNetworkTokenLiquidityForMinting(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minProtectionDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    networkToken(overrides?: CallOverrides): Promise<[string]>;

    networkTokenMintingLimits(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    newOwner(overrides?: CallOverrides): Promise<[string]>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolWhitelist(overrides?: CallOverrides): Promise<[string[]]>;

    prevRegistry(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    removePoolFromWhitelist(
      poolAnchor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSubscriber(
      subscriber: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    restoreRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAverageRateMaxDeviation(
      deviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultNetworkTokenMintingLimit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLockDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinNetworkCompensation(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinNetworkTokenLiquidityForMinting(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNetworkTokenMintingLimit(
      poolAnchor: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtectionDelays(
      minDelay: BigNumberish,
      maxDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subscribers(overrides?: CallOverrides): Promise<[string[]]>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  ROLE_OWNER(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityDisabled(
    poolAnchor: string,
    reserveToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addPoolToWhitelist(
    poolAnchor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSubscriber(
    subscriber: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  averageRateMaxDeviation(overrides?: CallOverrides): Promise<number>;

  defaultNetworkTokenMintingLimit(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  disableAddLiquidity(
    poolAnchor: string,
    reserveToken: string,
    disable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPoolSupported(
    poolAnchor: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPoolWhitelisted(
    poolAnchor: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  maxProtectionDelay(overrides?: CallOverrides): Promise<BigNumber>;

  minNetworkCompensation(overrides?: CallOverrides): Promise<BigNumber>;

  minNetworkTokenLiquidityForMinting(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minProtectionDelay(overrides?: CallOverrides): Promise<BigNumber>;

  networkToken(overrides?: CallOverrides): Promise<string>;

  networkTokenMintingLimits(
    poolAnchor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  newOwner(overrides?: CallOverrides): Promise<string>;

  onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolWhitelist(overrides?: CallOverrides): Promise<string[]>;

  prevRegistry(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  removePoolFromWhitelist(
    poolAnchor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSubscriber(
    subscriber: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  restoreRegistry(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  restrictRegistryUpdate(
    _onlyOwnerCanUpdateRegistry: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAverageRateMaxDeviation(
    deviation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultNetworkTokenMintingLimit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLockDuration(
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinNetworkCompensation(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinNetworkTokenLiquidityForMinting(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNetworkTokenMintingLimit(
    poolAnchor: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtectionDelays(
    minDelay: BigNumberish,
    maxDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subscribers(overrides?: CallOverrides): Promise<string[]>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRegistry(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    ROLE_OWNER(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addLiquidityDisabled(
      poolAnchor: string,
      reserveToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addPoolToWhitelist(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSubscriber(subscriber: string, overrides?: CallOverrides): Promise<void>;

    averageRateMaxDeviation(overrides?: CallOverrides): Promise<number>;

    defaultNetworkTokenMintingLimit(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableAddLiquidity(
      poolAnchor: string,
      reserveToken: string,
      disable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPoolSupported(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPoolWhitelisted(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxProtectionDelay(overrides?: CallOverrides): Promise<BigNumber>;

    minNetworkCompensation(overrides?: CallOverrides): Promise<BigNumber>;

    minNetworkTokenLiquidityForMinting(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minProtectionDelay(overrides?: CallOverrides): Promise<BigNumber>;

    networkToken(overrides?: CallOverrides): Promise<string>;

    networkTokenMintingLimits(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<string>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolWhitelist(overrides?: CallOverrides): Promise<string[]>;

    prevRegistry(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    removePoolFromWhitelist(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSubscriber(
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    restoreRegistry(overrides?: CallOverrides): Promise<void>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAverageRateMaxDeviation(
      deviation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultNetworkTokenMintingLimit(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinNetworkCompensation(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinNetworkTokenLiquidityForMinting(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNetworkTokenMintingLimit(
      poolAnchor: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtectionDelays(
      minDelay: BigNumberish,
      maxDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribers(overrides?: CallOverrides): Promise<string[]>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegistry(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddLiquidityDisabled(address,address,bool)"(
      poolAnchor?: string | null,
      reserveToken?: string | null,
      disabled?: null
    ): AddLiquidityDisabledEventFilter;
    AddLiquidityDisabled(
      poolAnchor?: string | null,
      reserveToken?: string | null,
      disabled?: null
    ): AddLiquidityDisabledEventFilter;

    "AverageRateMaxDeviationUpdated(uint32,uint32)"(
      prevAverageRateMaxDeviation?: null,
      newAverageRateMaxDeviation?: null
    ): AverageRateMaxDeviationUpdatedEventFilter;
    AverageRateMaxDeviationUpdated(
      prevAverageRateMaxDeviation?: null,
      newAverageRateMaxDeviation?: null
    ): AverageRateMaxDeviationUpdatedEventFilter;

    "DefaultNetworkTokenMintingLimitUpdated(uint256,uint256)"(
      prevDefault?: null,
      newDefault?: null
    ): DefaultNetworkTokenMintingLimitUpdatedEventFilter;
    DefaultNetworkTokenMintingLimitUpdated(
      prevDefault?: null,
      newDefault?: null
    ): DefaultNetworkTokenMintingLimitUpdatedEventFilter;

    "LockDurationUpdated(uint256,uint256)"(
      prevLockDuration?: null,
      newLockDuration?: null
    ): LockDurationUpdatedEventFilter;
    LockDurationUpdated(
      prevLockDuration?: null,
      newLockDuration?: null
    ): LockDurationUpdatedEventFilter;

    "MinNetworkCompensationUpdated(uint256,uint256)"(
      prevMinNetworkCompensation?: null,
      newMinNetworkCompensation?: null
    ): MinNetworkCompensationUpdatedEventFilter;
    MinNetworkCompensationUpdated(
      prevMinNetworkCompensation?: null,
      newMinNetworkCompensation?: null
    ): MinNetworkCompensationUpdatedEventFilter;

    "MinNetworkTokenLiquidityForMintingUpdated(uint256,uint256)"(
      prevMin?: null,
      newMin?: null
    ): MinNetworkTokenLiquidityForMintingUpdatedEventFilter;
    MinNetworkTokenLiquidityForMintingUpdated(
      prevMin?: null,
      newMin?: null
    ): MinNetworkTokenLiquidityForMintingUpdatedEventFilter;

    "NetworkTokenMintingLimitUpdated(address,uint256,uint256)"(
      poolAnchor?: string | null,
      prevLimit?: null,
      newLimit?: null
    ): NetworkTokenMintingLimitUpdatedEventFilter;
    NetworkTokenMintingLimitUpdated(
      poolAnchor?: string | null,
      prevLimit?: null,
      newLimit?: null
    ): NetworkTokenMintingLimitUpdatedEventFilter;

    "OwnerUpdate(address,address)"(
      _prevOwner?: string | null,
      _newOwner?: string | null
    ): OwnerUpdateEventFilter;
    OwnerUpdate(
      _prevOwner?: string | null,
      _newOwner?: string | null
    ): OwnerUpdateEventFilter;

    "PoolWhitelistUpdated(address,bool)"(
      poolAnchor?: string | null,
      added?: null
    ): PoolWhitelistUpdatedEventFilter;
    PoolWhitelistUpdated(
      poolAnchor?: string | null,
      added?: null
    ): PoolWhitelistUpdatedEventFilter;

    "ProtectionDelaysUpdated(uint256,uint256,uint256,uint256)"(
      prevMinProtectionDelay?: null,
      newMinProtectionDelay?: null,
      prevMaxProtectionDelay?: null,
      newMaxProtectionDelay?: null
    ): ProtectionDelaysUpdatedEventFilter;
    ProtectionDelaysUpdated(
      prevMinProtectionDelay?: null,
      newMinProtectionDelay?: null,
      prevMaxProtectionDelay?: null,
      newMaxProtectionDelay?: null
    ): ProtectionDelaysUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "SubscriberUpdated(address,bool)"(
      subscriber?: string | null,
      added?: null
    ): SubscriberUpdatedEventFilter;
    SubscriberUpdated(
      subscriber?: string | null,
      added?: null
    ): SubscriberUpdatedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_OWNER(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityDisabled(
      poolAnchor: string,
      reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPoolToWhitelist(
      poolAnchor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSubscriber(
      subscriber: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    averageRateMaxDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    defaultNetworkTokenMintingLimit(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableAddLiquidity(
      poolAnchor: string,
      reserveToken: string,
      disable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPoolSupported(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPoolWhitelisted(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxProtectionDelay(overrides?: CallOverrides): Promise<BigNumber>;

    minNetworkCompensation(overrides?: CallOverrides): Promise<BigNumber>;

    minNetworkTokenLiquidityForMinting(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minProtectionDelay(overrides?: CallOverrides): Promise<BigNumber>;

    networkToken(overrides?: CallOverrides): Promise<BigNumber>;

    networkTokenMintingLimits(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<BigNumber>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    prevRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    removePoolFromWhitelist(
      poolAnchor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSubscriber(
      subscriber: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    restoreRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAverageRateMaxDeviation(
      deviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultNetworkTokenMintingLimit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLockDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinNetworkCompensation(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinNetworkTokenLiquidityForMinting(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNetworkTokenMintingLimit(
      poolAnchor: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtectionDelays(
      minDelay: BigNumberish,
      maxDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subscribers(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_OWNER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityDisabled(
      poolAnchor: string,
      reserveToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPoolToWhitelist(
      poolAnchor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSubscriber(
      subscriber: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    averageRateMaxDeviation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultNetworkTokenMintingLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableAddLiquidity(
      poolAnchor: string,
      reserveToken: string,
      disable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPoolSupported(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPoolWhitelisted(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxProtectionDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minNetworkCompensation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minNetworkTokenLiquidityForMinting(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minProtectionDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    networkTokenMintingLimits(
      poolAnchor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyOwnerCanUpdateRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prevRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePoolFromWhitelist(
      poolAnchor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSubscriber(
      subscriber: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    restoreRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAverageRateMaxDeviation(
      deviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultNetworkTokenMintingLimit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLockDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinNetworkCompensation(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinNetworkTokenLiquidityForMinting(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNetworkTokenMintingLimit(
      poolAnchor: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtectionDelays(
      minDelay: BigNumberish,
      maxDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subscribers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRegistry(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
