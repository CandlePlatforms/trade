{"ast":null,"code":"import axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport JSONbig from 'json-bigint';\nimport { NotificationType } from 'redux/notification/notification';\nimport { take } from 'rxjs/operators';\nimport { tokens$ } from 'services/observables/tokens';\nimport { writeWeb3 } from 'services/web3';\nimport { ethToken, wethToken } from 'services/web3/config';\nimport { createOrder, depositWeth } from 'services/web3/swap/limit';\nimport { prettifyNumber } from 'utils/helperFunctions';\nimport { ConversionEvents, sendConversionEvent, sendConversionFailEvent, sendConversionSuccessEvent } from './googleTagManager';\nimport { utils } from 'ethers';\nimport { ErrorCode } from 'services/web3/types';\nimport { shrinkToken } from 'utils/formulas';\nimport { ExchangeProxy__factory } from 'services/web3/abis/types';\nimport { exchangeProxy$ } from 'services/observables/contracts';\nconst baseUrl = 'https://hidingbook.keeperdao.com/api/v1';\nvar OrderStatus;\n\n(function (OrderStatus) {\n  OrderStatus[OrderStatus[\"Invalid\"] = 0] = \"Invalid\";\n  OrderStatus[OrderStatus[\"Fillable\"] = 1] = \"Fillable\";\n  OrderStatus[OrderStatus[\"Filled\"] = 2] = \"Filled\";\n  OrderStatus[OrderStatus[\"Cancelled\"] = 3] = \"Cancelled\";\n  OrderStatus[OrderStatus[\"Expired\"] = 4] = \"Expired\";\n})(OrderStatus || (OrderStatus = {}));\n\nexport const swapLimit = async (fromToken, toToken, from, to, user, duration, checkApproval) => {\n  const fromIsEth = ethToken === fromToken.address;\n\n  try {\n    if (fromIsEth) {\n      try {\n        const txHash = await depositWeth(from);\n        checkApproval({ ...fromToken,\n          symbol: 'WETH',\n          address: wethToken\n        });\n        return {\n          type: NotificationType.pending,\n          title: 'Pending Confirmation',\n          msg: `Depositing ${from} ETH to WETH is pending confirmation`,\n          txHash,\n          updatedInfo: {\n            successTitle: 'Success!',\n            successMsg: `Your deposit ${from} ETH to WETH is confirmed`,\n            errorTitle: 'Transaction Failed',\n            errorMsg: `Depositing ${from} ETH to WETH has failed. Please try again or contact support`\n          }\n        };\n      } catch (e) {\n        if (e.code === ErrorCode.DeniedTx) {\n          sendConversionFailEvent('User rejected transaction');\n          return {\n            type: NotificationType.error,\n            title: 'Transaction Rejected',\n            msg: 'You rejected the transaction. To complete the order you need to click approve.'\n          };\n        }\n\n        sendConversionFailEvent(e.message);\n        return {\n          type: NotificationType.error,\n          title: 'Transaction Failed',\n          msg: `Depositing ${from} ETH to WETH has failed. Please try again or contact support`\n        };\n      }\n    } else {\n      sendConversionEvent(ConversionEvents.wallet_req);\n      await createOrder(fromToken, toToken, from, to, user, duration.asSeconds());\n      sendConversionSuccessEvent(fromToken.usdPrice);\n      return {\n        type: NotificationType.success,\n        title: 'Success!',\n        msg: `Your limit order to trade ${from} ${fromToken.symbol} for ${to} ${toToken.symbol} was created`\n      };\n    }\n  } catch (e) {\n    if (e.code === ErrorCode.DeniedTx) {\n      sendConversionFailEvent('User rejected transaction');\n      return {\n        type: NotificationType.error,\n        title: 'Transaction Rejected',\n        msg: 'You rejected the transaction. If this was by mistake, please try again.'\n      };\n    }\n\n    sendConversionFailEvent(e.message);\n    return {\n      type: NotificationType.error,\n      title: 'Transaction Failed',\n      msg: `Limit order to trade ${from} ${fromToken.symbol} for ${to} ${toToken.symbol} could not be created. Please try again or contact support`\n    };\n  }\n};\nexport const getOrderDetails = async () => {\n  const res = await axios.get(`${baseUrl}/info`);\n  return res.data.result.orderDetails;\n};\nexport const fetchKeeperDaoTokens = async () => {\n  try {\n    const res = await axios.get(`${baseUrl}/tokenList`);\n    const tokens = res.data.result.tokens;\n    return tokens.map(x => ({ ...x,\n      address: utils.getAddress(x.address)\n    }));\n  } catch (error) {\n    console.error('Failed fetching keeperDao Tokens: ', error);\n    return [];\n  }\n};\nexport const getOrders = async currentUser => {\n  const res = await axios.get(`${baseUrl}/orders?maker=${currentUser}`, {\n    transformResponse: res => JSONbig.parse(res)\n  });\n  return orderResToLimit(res.data.orders.filter(order => order.metaData.status !== OrderStatus.Cancelled));\n};\n\nconst orderResToLimit = async orders => {\n  const tokens = await tokens$.pipe(take(1)).toPromise();\n  return orders.map(res => {\n    var _tokens$find, _tokens$find2;\n\n    const payToken = (_tokens$find = tokens.find(x => x.address === utils.getAddress(res.order.makerToken))) !== null && _tokens$find !== void 0 ? _tokens$find : tokens[0];\n    const getToken = (_tokens$find2 = tokens.find(x => x.address === utils.getAddress(res.order.takerToken))) !== null && _tokens$find2 !== void 0 ? _tokens$find2 : tokens[0];\n    const payAmount = new BigNumber(res.order.makerAmount);\n    const getAmount = new BigNumber(res.order.takerAmount);\n    return {\n      hash: res.metaData.orderHash,\n      expiration: res.order.expiry,\n      payToken,\n      getToken,\n      payAmount: prettifyNumber(shrinkToken(payAmount, payToken.decimals)),\n      getAmount: prettifyNumber(shrinkToken(getAmount, getToken.decimals)),\n      rate: `1 ${payToken.symbol} = ${prettifyNumber(getAmount.div(payAmount))} ${getToken.symbol}`,\n      filled: prettifyNumber(new BigNumber(res.metaData.filledAmount_takerToken).div(res.metaData.remainingFillableAmount_takerToken)),\n      orderRes: res\n    };\n  });\n};\n\nexport const sendOrders = async rfqOrder => {\n  const url = `${baseUrl}/orders`;\n\n  try {\n    const res = await axios.post(url, rfqOrder);\n    if (res.status === 201) return res.data;\n    throw new Error(`Unexpected response from server, ${res.data.message}`);\n  } catch (e) {\n    throw new Error(`Unexpected error during send order request ${e.message}`);\n  }\n};\nexport const cancelOrders = async orders => {\n  const stringOrders = orders.map(limitOrder => orderToStringOrder(limitOrder.order));\n  const exchangeProxyAddress = await exchangeProxy$.pipe(take(1)).toPromise();\n  const contract = ExchangeProxy__factory.connect(exchangeProxyAddress, writeWeb3.signer);\n\n  try {\n    const tx = stringOrders.length === 1 ? await contract.cancelRfqOrder(stringOrders[0]) : await contract.batchCancelRfqOrders(stringOrders);\n    return {\n      type: NotificationType.pending,\n      title: 'Pending Confirmation',\n      msg: 'Transaction is pending confirmationn',\n      txHash: tx.hash,\n      updatedInfo: {\n        successTitle: 'Success!',\n        successMsg: 'Canceling your limit orders has been confirmed',\n        errorTitle: 'Transaction Failed',\n        errorMsg: 'Transaction had failed. Please try again or contact support.'\n      }\n    };\n  } catch (e) {\n    if (e.code === ErrorCode.DeniedTx) return {\n      type: NotificationType.error,\n      title: 'Transaction Rejected',\n      msg: 'You rejected the transaction. If this was by mistake, please try again.'\n    };\n    return {\n      type: NotificationType.error,\n      title: 'Transaction Failed',\n      msg: 'Transaction had failed. Please try again or contact support.'\n    };\n  }\n};\n\nconst orderToStringOrder = order => ({\n  expiry: String(order.expiry),\n  makerAmount: order.makerAmount.toString(),\n  salt: String(order.salt),\n  takerAmount: order.takerAmount.toString(),\n  maker: order.maker,\n  makerToken: order.makerToken,\n  pool: order.pool,\n  taker: order.taker,\n  takerToken: order.takerToken,\n  txOrigin: order.txOrigin\n});","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/api/keeperDao.ts"],"names":["axios","BigNumber","JSONbig","NotificationType","take","tokens$","writeWeb3","ethToken","wethToken","createOrder","depositWeth","prettifyNumber","ConversionEvents","sendConversionEvent","sendConversionFailEvent","sendConversionSuccessEvent","utils","ErrorCode","shrinkToken","ExchangeProxy__factory","exchangeProxy$","baseUrl","OrderStatus","swapLimit","fromToken","toToken","from","to","user","duration","checkApproval","fromIsEth","address","txHash","symbol","type","pending","title","msg","updatedInfo","successTitle","successMsg","errorTitle","errorMsg","e","code","DeniedTx","error","message","wallet_req","asSeconds","usdPrice","success","getOrderDetails","res","get","data","result","orderDetails","fetchKeeperDaoTokens","tokens","map","x","getAddress","console","getOrders","currentUser","transformResponse","parse","orderResToLimit","orders","filter","order","metaData","status","Cancelled","pipe","toPromise","payToken","find","makerToken","getToken","takerToken","payAmount","makerAmount","getAmount","takerAmount","hash","orderHash","expiration","expiry","decimals","rate","div","filled","filledAmount_takerToken","remainingFillableAmount_takerToken","orderRes","sendOrders","rfqOrder","url","post","Error","cancelOrders","stringOrders","limitOrder","orderToStringOrder","exchangeProxyAddress","contract","connect","signer","tx","length","cancelRfqOrder","batchCancelRfqOrders","String","toString","salt","maker","pool","taker","txOrigin"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport JSONbig from 'json-bigint';\nimport {\n  BaseNotification,\n  NotificationType,\n} from 'redux/notification/notification';\nimport { take } from 'rxjs/operators';\nimport { Token, tokens$ } from 'services/observables/tokens';\nimport { writeWeb3 } from 'services/web3';\nimport { ethToken, wethToken } from 'services/web3/config';\nimport { createOrder, depositWeth } from 'services/web3/swap/limit';\nimport { prettifyNumber } from 'utils/helperFunctions';\nimport {\n  ConversionEvents,\n  sendConversionEvent,\n  sendConversionFailEvent,\n  sendConversionSuccessEvent,\n} from './googleTagManager';\nimport { utils } from 'ethers';\nimport { ErrorCode } from 'services/web3/types';\nimport { shrinkToken } from 'utils/formulas';\nimport { ExchangeProxy__factory } from 'services/web3/abis/types';\nimport { exchangeProxy$ } from 'services/observables/contracts';\n\nconst baseUrl: string = 'https://hidingbook.keeperdao.com/api/v1';\n\nenum OrderStatus {\n  Invalid,\n  Fillable,\n  Filled,\n  Cancelled,\n  Expired,\n}\n\ninterface StringRfq {\n  makerToken: string;\n  takerToken: string;\n  makerAmount: string;\n  takerAmount: string;\n  maker: string;\n  taker: string;\n  txOrigin: string;\n  pool: string;\n  expiry: string;\n  salt: string;\n}\n\nexport const swapLimit = async (\n  fromToken: Token,\n  toToken: Token,\n  from: string,\n  to: string,\n  user: string,\n  duration: plugin.Duration,\n  checkApproval: Function\n): Promise<BaseNotification | undefined> => {\n  const fromIsEth = ethToken === fromToken.address;\n  try {\n    if (fromIsEth) {\n      try {\n        const txHash = await depositWeth(from);\n        checkApproval({ ...fromToken, symbol: 'WETH', address: wethToken });\n        return {\n          type: NotificationType.pending,\n          title: 'Pending Confirmation',\n          msg: `Depositing ${from} ETH to WETH is pending confirmation`,\n          txHash,\n          updatedInfo: {\n            successTitle: 'Success!',\n            successMsg: `Your deposit ${from} ETH to WETH is confirmed`,\n            errorTitle: 'Transaction Failed',\n            errorMsg: `Depositing ${from} ETH to WETH has failed. Please try again or contact support`,\n          },\n        };\n      } catch (e: any) {\n        if (e.code === ErrorCode.DeniedTx) {\n          sendConversionFailEvent('User rejected transaction');\n          return {\n            type: NotificationType.error,\n            title: 'Transaction Rejected',\n            msg: 'You rejected the transaction. To complete the order you need to click approve.',\n          };\n        }\n\n        sendConversionFailEvent(e.message);\n\n        return {\n          type: NotificationType.error,\n          title: 'Transaction Failed',\n          msg: `Depositing ${from} ETH to WETH has failed. Please try again or contact support`,\n        };\n      }\n    } else {\n      sendConversionEvent(ConversionEvents.wallet_req);\n      await createOrder(\n        fromToken,\n        toToken,\n        from,\n        to,\n        user,\n        duration.asSeconds()\n      );\n      sendConversionSuccessEvent(fromToken.usdPrice);\n\n      return {\n        type: NotificationType.success,\n        title: 'Success!',\n        msg: `Your limit order to trade ${from} ${fromToken.symbol} for ${to} ${toToken.symbol} was created`,\n      };\n    }\n  } catch (e: any) {\n    if (e.code === ErrorCode.DeniedTx) {\n      sendConversionFailEvent('User rejected transaction');\n      return {\n        type: NotificationType.error,\n        title: 'Transaction Rejected',\n        msg: 'You rejected the transaction. If this was by mistake, please try again.',\n      };\n    }\n\n    sendConversionFailEvent(e.message);\n\n    return {\n      type: NotificationType.error,\n      title: 'Transaction Failed',\n      msg: `Limit order to trade ${from} ${fromToken.symbol} for ${to} ${toToken.symbol} could not be created. Please try again or contact support`,\n    };\n  }\n};\n\nexport const getOrderDetails = async (): Promise<OrderDetails> => {\n  const res = await axios.get(`${baseUrl}/info`);\n  return res.data.result.orderDetails;\n};\n\ntype OrderDetails = {\n  verifyingContract: string;\n  chainId: number;\n  txOrigin: string;\n  taker: string;\n  pool: string;\n};\n\nexport interface KeeprDaoToken {\n  address: string;\n  chainId: number;\n  decimals: number;\n  symbol: string;\n}\n\nexport const fetchKeeperDaoTokens = async (): Promise<KeeprDaoToken[]> => {\n  try {\n    const res = await axios.get(`${baseUrl}/tokenList`);\n    const tokens: KeeprDaoToken[] = res.data.result.tokens;\n    return tokens.map((x) => ({ ...x, address: utils.getAddress(x.address) }));\n  } catch (error) {\n    console.error('Failed fetching keeperDao Tokens: ', error);\n    return [];\n  }\n};\n\nexport const getOrders = async (currentUser: string): Promise<LimitOrder[]> => {\n  const res = await axios.get<{ orders: OrderResponse[] }>(\n    `${baseUrl}/orders?maker=${currentUser}`,\n    {\n      transformResponse: (res) => JSONbig.parse(res),\n    }\n  );\n\n  return orderResToLimit(\n    res.data.orders.filter(\n      (order) => order.metaData.status !== OrderStatus.Cancelled\n    )\n  );\n};\nconst orderResToLimit = async (\n  orders: OrderResponse[]\n): Promise<LimitOrder[]> => {\n  const tokens = await tokens$.pipe(take(1)).toPromise();\n\n  return orders.map((res) => {\n    const payToken =\n      tokens.find(\n        (x) => x.address === utils.getAddress(res.order.makerToken)\n      ) ?? tokens[0];\n    const getToken =\n      tokens.find(\n        (x) => x.address === utils.getAddress(res.order.takerToken)\n      ) ?? tokens[0];\n\n    const payAmount = new BigNumber(res.order.makerAmount);\n    const getAmount = new BigNumber(res.order.takerAmount);\n    return {\n      hash: res.metaData.orderHash,\n      expiration: res.order.expiry,\n      payToken,\n      getToken,\n      payAmount: prettifyNumber(shrinkToken(payAmount, payToken.decimals)),\n      getAmount: prettifyNumber(shrinkToken(getAmount, getToken.decimals)),\n      rate: `1 ${payToken.symbol} = ${prettifyNumber(\n        getAmount.div(payAmount)\n      )} ${getToken.symbol}`,\n      filled: prettifyNumber(\n        new BigNumber(res.metaData.filledAmount_takerToken).div(\n          res.metaData.remainingFillableAmount_takerToken\n        )\n      ),\n      orderRes: res,\n    };\n  });\n};\n\nexport const sendOrders = async (rfqOrder: RfqOrderJson[]) => {\n  const url = `${baseUrl}/orders`;\n\n  try {\n    const res = await axios.post<{\n      message: string;\n      result: { hashList: string[] };\n    }>(url, rfqOrder);\n\n    if (res.status === 201) return res.data;\n\n    throw new Error(`Unexpected response from server, ${res.data.message}`);\n  } catch (e: any) {\n    throw new Error(`Unexpected error during send order request ${e.message}`);\n  }\n};\n\nexport const cancelOrders = async (\n  orders: OrderResponse[]\n): Promise<BaseNotification> => {\n  const stringOrders = orders.map((limitOrder) =>\n    orderToStringOrder(limitOrder.order)\n  );\n  const exchangeProxyAddress = await exchangeProxy$.pipe(take(1)).toPromise();\n  const contract = ExchangeProxy__factory.connect(\n    exchangeProxyAddress,\n    writeWeb3.signer\n  );\n\n  try {\n    const tx =\n      stringOrders.length === 1\n        ? await contract.cancelRfqOrder(stringOrders[0])\n        : await contract.batchCancelRfqOrders(stringOrders);\n\n    return {\n      type: NotificationType.pending,\n      title: 'Pending Confirmation',\n      msg: 'Transaction is pending confirmationn',\n      txHash: tx.hash,\n      updatedInfo: {\n        successTitle: 'Success!',\n        successMsg: 'Canceling your limit orders has been confirmed',\n        errorTitle: 'Transaction Failed',\n        errorMsg:\n          'Transaction had failed. Please try again or contact support.',\n      },\n    };\n  } catch (e: any) {\n    if (e.code === ErrorCode.DeniedTx)\n      return {\n        type: NotificationType.error,\n        title: 'Transaction Rejected',\n        msg: 'You rejected the transaction. If this was by mistake, please try again.',\n      };\n\n    return {\n      type: NotificationType.error,\n      title: 'Transaction Failed',\n      msg: 'Transaction had failed. Please try again or contact support.',\n    };\n  }\n};\n\nconst orderToStringOrder = (order: Order): StringRfq => ({\n  expiry: String(order.expiry),\n  makerAmount: order.makerAmount.toString(),\n  salt: String(order.salt),\n  takerAmount: order.takerAmount.toString(),\n  maker: order.maker,\n  makerToken: order.makerToken,\n  pool: order.pool,\n  taker: order.taker,\n  takerToken: order.takerToken,\n  txOrigin: order.txOrigin,\n});\n\nexport interface LimitOrder {\n  hash: string;\n  expiration: number;\n  payToken: Token;\n  getToken: Token;\n  payAmount: string;\n  getAmount: string;\n  rate: string;\n  filled: string;\n  orderRes: OrderResponse;\n}\nexport interface RfqOrderJson {\n  maker: string;\n  taker: string;\n  makerToken: string;\n  takerToken: string;\n  makerAmount: string;\n  takerAmount: string;\n  txOrigin: string;\n  pool: string;\n  expiry: number;\n  salt: number;\n  chainId: number; // Ethereum Chain Id where the transaction is submitted.\n  verifyingContract: string; // Address of the contract where the transaction should be sent.\n  signature: Signature;\n}\n\ninterface Signature {\n  signatureType: number;\n  v: number;\n  r: string;\n  s: string;\n}\n\ninterface OrderResponse {\n  order: Order;\n  metaData: MetaData;\n}\ninterface MetaData {\n  orderHash: string;\n  makerBalance_makerToken: number;\n  makerAllowance_makerToken: number;\n  status: OrderStatus;\n  filledAmount_takerToken: number;\n  remainingFillableAmount_takerToken: BigNumber;\n}\n\ninterface Order {\n  maker: string;\n  taker: string;\n  makerAmount: BigNumber;\n  takerAmount: BigNumber;\n  makerToken: string;\n  takerToken: string;\n  salt: number;\n  expiry: number;\n  chainId: number;\n  txOrigin: string;\n  pool: string;\n  verifyingContract: string;\n  signature: Signature;\n}\n"]},"metadata":{},"sourceType":"module"}