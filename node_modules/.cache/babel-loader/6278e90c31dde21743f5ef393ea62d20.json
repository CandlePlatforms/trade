{"ast":null,"code":"import { LiquidityProtection__factory, LiquidityProtectionSettings__factory, LiquidityProtectionStore__factory } from 'services/web3/abis/types';\nimport { web3, writeWeb3 } from 'services/web3/index';\nimport { liquidityProtection$, liquidityProtectionStore$, settingsContractAddress$ } from 'services/observables/contracts';\nimport { take } from 'rxjs/operators';\nimport { multicall } from 'services/web3/multicall/multicall';\nimport { keyBy, merge, values } from 'lodash';\nimport dayjs from 'dayjs';\nimport { calculateProgressLevel, calcUsdPrice, decToPpm } from 'utils/helperFunctions';\nimport BigNumber from 'bignumber.js';\nimport { buildProtectionDelayCall, buildRemoveLiquidityReturnCall } from 'services/web3/liquidity/liquidity';\nimport { shrinkToken } from 'utils/formulas';\nimport { fetchedPendingRewards, fetchedRewardsMultiplier } from './rewards';\nimport { ErrorCode } from '../types';\nimport { changeGas } from '../config';\nimport { ConversionEvents, sendLiquidityEvent } from '../../api/googleTagManager';\n\nconst fetchPositions = async (contract, currentUser, pools) => {\n  const positionIds = await contract.protectedLiquidityIds(currentUser);\n  const calls = positionIds.map(id => buildProtectedPositionCall(contract, id.toString()));\n  const res = await multicall(calls);\n  if (res) return res.map((r, index) => {\n    const position = r;\n    const poolToken = position[1].toString();\n    const reserveTokenAddress = position[2].toString();\n    const pool = pools.find(x => x.pool_dlt_id === poolToken);\n    const reserveToken = pool.reserves.find(reserve => reserve.address === reserveTokenAddress);\n    return {\n      id: positionIds[index].toString(),\n      owner: position[0].toString(),\n      poolToken,\n      reserveToken: reserveToken,\n      poolAmount: position[3].toString(),\n      reserveAmount: position[4].toString(),\n      reserveRateN: position[5].toString(),\n      reserveRateD: position[6].toString(),\n      timestamp: position[7].toString(),\n      pool: pool\n    };\n  });\n  return [];\n};\n\nconst buildProtectedPositionCall = (contract, protectionId) => {\n  return {\n    contractAddress: contract.address,\n    interface: contract.interface,\n    methodName: 'protectedLiquidity',\n    methodParameters: [protectionId]\n  };\n};\n\nconst fetchROI = async (contract, positions) => {\n  const timeNow = dayjs();\n  const timeNowUnix = timeNow.unix();\n  const fullWaitTimeUnix = timeNow.add(1, 'year').unix();\n  const portion = decToPpm(1);\n  const calls = positions.map(x => [buildRemoveLiquidityReturnCall(contract, x.id, portion, timeNowUnix), buildRemoveLiquidityReturnCall(contract, x.id, portion, fullWaitTimeUnix)]);\n  const res = await multicall(calls.flat());\n\n  if (res) {\n    return positions.map((position, i) => {\n      const {\n        decimals,\n        usdPrice\n      } = position.reserveToken;\n      const index = i * 2;\n      const currentTargetAmount = res[index][0].toString();\n      const fullTargetAmount = res[index + 1][0].toString();\n      const protectedAmount = {\n        tknAmount: shrinkToken(fullTargetAmount, decimals),\n        usdAmount: calcUsdPrice(fullTargetAmount, usdPrice, decimals)\n      };\n      const claimableAmount = {\n        tknAmount: shrinkToken(currentTargetAmount, decimals),\n        usdAmount: calcUsdPrice(currentTargetAmount, usdPrice, decimals)\n      };\n      const fees = new BigNumber(protectedAmount.tknAmount).minus(shrinkToken(position.reserveAmount, decimals)).toString();\n      const roiDec = new BigNumber(currentTargetAmount).div(position.reserveAmount).minus(1).toString();\n      return {\n        id: position.id,\n        roiDec,\n        protectedAmount,\n        claimableAmount,\n        fees\n      };\n    });\n  }\n\n  return [];\n};\n\nexport const fetchProtectedPositions = async (pools, currentUser) => {\n  const liquidityProtectionSettingsContractAddress = await settingsContractAddress$.pipe(take(1)).toPromise();\n  const liquidityProtectionSettingsContract = LiquidityProtectionSettings__factory.connect(liquidityProtectionSettingsContractAddress, web3.provider);\n  const liquidityProtectionStoreContractAddress = await liquidityProtectionStore$.pipe(take(1)).toPromise();\n  const liquidityProtectionStoreContract = LiquidityProtectionStore__factory.connect(liquidityProtectionStoreContractAddress, web3.provider);\n  const liquidityProtectionContractAddress = await liquidityProtection$.pipe(take(1)).toPromise();\n  const liquidityProtectionContract = LiquidityProtection__factory.connect(liquidityProtectionContractAddress, web3.provider);\n  const rawPositions = await fetchPositions(liquidityProtectionStoreContract, currentUser, pools);\n  const protectionDelay = await multicall(buildProtectionDelayCall(liquidityProtectionSettingsContract));\n  if (rawPositions.length === 0 || !protectionDelay) return [];\n  const minProtectionDelay = protectionDelay[0];\n  const maxProtectionDelay = protectionDelay[1];\n  const positionsRoi = await fetchROI(liquidityProtectionContract, rawPositions); // const positionsAPR = await fetchPoolAprs(\n  //   pools,\n  //   rawPositions,\n  //   liquidityProtectionContract\n  // );\n\n  const rewardsMultiplier = await fetchedRewardsMultiplier(currentUser, rawPositions);\n  const rewardsAmount = await fetchedPendingRewards(currentUser, rawPositions);\n  const positions = values(merge(keyBy(rawPositions, 'id'), keyBy(positionsRoi, 'id'), //keyBy(positionsAPR, 'id'),\n  keyBy(rewardsMultiplier, 'id'), keyBy(rewardsAmount, 'id')));\n  const final = positions.map(position => {\n    const pool = pools.find(x => x.pool_dlt_id === position.poolToken);\n    const {\n      decimals,\n      usdPrice\n    } = position.reserveToken;\n    const initialStake = {\n      tknAmount: shrinkToken(position.reserveAmount, decimals),\n      usdAmount: calcUsdPrice(position.reserveAmount, usdPrice, decimals)\n    };\n    const timestamps = {\n      initalStake: position.timestamp,\n      insuranceStart: new BigNumber(position.timestamp).plus(minProtectionDelay.toString()).toString(),\n      fullCoverage: new BigNumber(position.timestamp).plus(maxProtectionDelay.toString()).toString()\n    };\n    const currentCoveragePercent = calculateProgressLevel(Number(timestamps.initalStake), Number(timestamps.fullCoverage));\n    return {\n      positionId: position.id,\n      pool: pool,\n      fees: position.fees,\n      initialStake,\n      protectedAmount: position.protectedAmount,\n      claimableAmount: position.claimableAmount,\n      reserveToken: position.reserveToken,\n      roi: {\n        fees: position.roiDec\n      },\n      aprs: {\n        day: '0',\n        //position.aprDay,\n        week: '0' //position.aprWeek,\n\n      },\n      rewardsMultiplier: position.rewardsMultiplier,\n      rewardsAmount: position.rewardsAmount,\n      timestamps,\n      currentCoveragePercent\n    };\n  });\n  return final;\n};\nexport const withdrawProtection = async (positionId, amount, tknAmount, onHash, onCompleted, rejected, failed) => {\n  try {\n    const liquidityProtectionContractAddress = await liquidityProtection$.pipe(take(1)).toPromise();\n    const liquidityProtectionContract = LiquidityProtection__factory.connect(liquidityProtectionContractAddress, writeWeb3.signer);\n    const percentage = new BigNumber(amount).div(tknAmount);\n    sendLiquidityEvent(ConversionEvents.wallet_req);\n    const estimate = await liquidityProtectionContract.estimateGas.removeLiquidity(positionId, decToPpm(percentage));\n    const gasLimit = changeGas(estimate.toString());\n    const tx = await liquidityProtectionContract.removeLiquidity(positionId, decToPpm(percentage), {\n      gasLimit\n    });\n    sendLiquidityEvent(ConversionEvents.wallet_confirm);\n    onHash(tx.hash);\n    await tx.wait();\n    onCompleted();\n  } catch (e) {\n    console.error(e);\n    if (e.code === ErrorCode.DeniedTx) rejected();else failed(e.message);\n  }\n};\nexport const getWithdrawBreakdown = async (id, amount, tknAmount) => {\n  const now = dayjs().unix();\n  const liquidityProtectionContractAddress = await liquidityProtection$.pipe(take(1)).toPromise();\n  const constract = LiquidityProtection__factory.connect(liquidityProtectionContractAddress, web3.provider);\n  const percentage = new BigNumber(amount).div(tknAmount);\n  const res = await constract.removeLiquidityReturn(id, decToPpm(percentage), now);\n  const expectedAmount = res[0].toString();\n  const actualAmount = res[1].toString();\n  const bntAmount = res[2].toString();\n  return {\n    expectedAmount,\n    actualAmount,\n    bntAmount\n  };\n};","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/web3/protection/positions.ts"],"names":["LiquidityProtection__factory","LiquidityProtectionSettings__factory","LiquidityProtectionStore__factory","web3","writeWeb3","liquidityProtection$","liquidityProtectionStore$","settingsContractAddress$","take","multicall","keyBy","merge","values","dayjs","calculateProgressLevel","calcUsdPrice","decToPpm","BigNumber","buildProtectionDelayCall","buildRemoveLiquidityReturnCall","shrinkToken","fetchedPendingRewards","fetchedRewardsMultiplier","ErrorCode","changeGas","ConversionEvents","sendLiquidityEvent","fetchPositions","contract","currentUser","pools","positionIds","protectedLiquidityIds","calls","map","id","buildProtectedPositionCall","toString","res","r","index","position","poolToken","reserveTokenAddress","pool","find","x","pool_dlt_id","reserveToken","reserves","reserve","address","owner","poolAmount","reserveAmount","reserveRateN","reserveRateD","timestamp","protectionId","contractAddress","interface","methodName","methodParameters","fetchROI","positions","timeNow","timeNowUnix","unix","fullWaitTimeUnix","add","portion","flat","i","decimals","usdPrice","currentTargetAmount","fullTargetAmount","protectedAmount","tknAmount","usdAmount","claimableAmount","fees","minus","roiDec","div","fetchProtectedPositions","liquidityProtectionSettingsContractAddress","pipe","toPromise","liquidityProtectionSettingsContract","connect","provider","liquidityProtectionStoreContractAddress","liquidityProtectionStoreContract","liquidityProtectionContractAddress","liquidityProtectionContract","rawPositions","protectionDelay","length","minProtectionDelay","maxProtectionDelay","positionsRoi","rewardsMultiplier","rewardsAmount","final","initialStake","timestamps","initalStake","insuranceStart","plus","fullCoverage","currentCoveragePercent","Number","positionId","roi","aprs","day","week","withdrawProtection","amount","onHash","onCompleted","rejected","failed","signer","percentage","wallet_req","estimate","estimateGas","removeLiquidity","gasLimit","tx","wallet_confirm","hash","wait","e","console","error","code","DeniedTx","message","getWithdrawBreakdown","now","constract","removeLiquidityReturn","expectedAmount","actualAmount","bntAmount"],"mappings":"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","sourcesContent":["import {\n  LiquidityProtection,\n  LiquidityProtection__factory,\n  LiquidityProtectionSettings__factory,\n  LiquidityProtectionStore,\n  LiquidityProtectionStore__factory,\n} from 'services/web3/abis/types';\nimport { web3, writeWeb3 } from 'services/web3/index';\nimport {\n  liquidityProtection$,\n  liquidityProtectionStore$,\n  settingsContractAddress$,\n} from 'services/observables/contracts';\nimport { take } from 'rxjs/operators';\nimport { multicall } from 'services/web3/multicall/multicall';\nimport { keyBy, merge, values } from 'lodash';\nimport dayjs from 'dayjs';\nimport {\n  calculateProgressLevel,\n  calcUsdPrice,\n  decToPpm,\n} from 'utils/helperFunctions';\nimport BigNumber from 'bignumber.js';\nimport { Pool, Reserve } from 'services/observables/tokens';\nimport {\n  buildProtectionDelayCall,\n  buildRemoveLiquidityReturnCall,\n} from 'services/web3/liquidity/liquidity';\nimport { shrinkToken } from 'utils/formulas';\nimport { fetchedPendingRewards, fetchedRewardsMultiplier } from './rewards';\nimport { ErrorCode } from '../types';\nimport { Result } from '@ethersproject/abi';\nimport { changeGas } from '../config';\nimport {\n  ConversionEvents,\n  sendLiquidityEvent,\n} from '../../api/googleTagManager';\n\nexport interface ProtectedPosition {\n  positionId: string;\n  pool: Pool;\n  fees: string;\n  initialStake: { usdAmount: string; tknAmount: string };\n  protectedAmount: { usdAmount: string; tknAmount: string };\n  claimableAmount: { usdAmount: string; tknAmount: string };\n  reserveToken: Reserve;\n  roi: {\n    fees: string;\n    reserveRewards?: string;\n  };\n  aprs: { day: string; week: string };\n  rewardsMultiplier: string;\n  rewardsAmount: string;\n  timestamps: {\n    initalStake: string;\n    insuranceStart: string;\n    fullCoverage: string;\n  };\n  currentCoveragePercent: number;\n}\n\nexport interface ProtectedPositionGrouped extends ProtectedPosition {\n  groupId: string;\n  subRows: ProtectedPosition[];\n}\n\nexport interface ProtectedLiquidity {\n  id: string;\n  owner: string;\n  poolToken: string;\n  reserveToken: Reserve;\n  poolAmount: string;\n  reserveAmount: string;\n  reserveRateN: string;\n  reserveRateD: string;\n  timestamp: string;\n  pool: Pool;\n}\n\nconst fetchPositions = async (\n  contract: LiquidityProtectionStore,\n  currentUser: string,\n  pools: Pool[]\n): Promise<ProtectedLiquidity[]> => {\n  const positionIds = await contract.protectedLiquidityIds(currentUser);\n  const calls = positionIds.map((id) =>\n    buildProtectedPositionCall(contract, id.toString())\n  );\n  const res = await multicall(calls);\n\n  if (res)\n    return res.map((r, index) => {\n      const position = r as Result[];\n      const poolToken = position[1].toString();\n      const reserveTokenAddress = position[2].toString();\n      const pool = pools.find((x) => x.pool_dlt_id === poolToken);\n      const reserveToken = pool!.reserves.find(\n        (reserve) => reserve.address === reserveTokenAddress\n      );\n\n      return {\n        id: positionIds[index].toString(),\n        owner: position[0].toString(),\n        poolToken,\n        reserveToken: reserveToken!,\n        poolAmount: position[3].toString(),\n        reserveAmount: position[4].toString(),\n        reserveRateN: position[5].toString(),\n        reserveRateD: position[6].toString(),\n        timestamp: position[7].toString(),\n        pool: pool!,\n      };\n    });\n\n  return [];\n};\nconst buildProtectedPositionCall = (\n  contract: LiquidityProtectionStore,\n  protectionId: string\n) => {\n  return {\n    contractAddress: contract.address,\n    interface: contract.interface,\n    methodName: 'protectedLiquidity',\n    methodParameters: [protectionId],\n  };\n};\n\nconst fetchROI = async (\n  contract: LiquidityProtection,\n  positions: ProtectedLiquidity[]\n) => {\n  const timeNow = dayjs();\n  const timeNowUnix = timeNow.unix();\n  const fullWaitTimeUnix = timeNow.add(1, 'year').unix();\n  const portion = decToPpm(1);\n\n  const calls = positions.map((x) => [\n    buildRemoveLiquidityReturnCall(contract, x.id, portion, timeNowUnix),\n    buildRemoveLiquidityReturnCall(contract, x.id, portion, fullWaitTimeUnix),\n  ]);\n\n  const res = await multicall(calls.flat());\n\n  if (res) {\n    return positions.map((position, i) => {\n      const { decimals, usdPrice } = position.reserveToken;\n      const index = i * 2;\n\n      const currentTargetAmount = res[index][0].toString();\n      const fullTargetAmount = res[index + 1][0].toString();\n\n      const protectedAmount = {\n        tknAmount: shrinkToken(fullTargetAmount, decimals),\n        usdAmount: calcUsdPrice(fullTargetAmount, usdPrice, decimals),\n      };\n\n      const claimableAmount = {\n        tknAmount: shrinkToken(currentTargetAmount, decimals),\n        usdAmount: calcUsdPrice(currentTargetAmount, usdPrice, decimals),\n      };\n\n      const fees = new BigNumber(protectedAmount.tknAmount)\n        .minus(shrinkToken(position.reserveAmount, decimals))\n        .toString();\n\n      const roiDec = new BigNumber(currentTargetAmount)\n        .div(position.reserveAmount)\n        .minus(1)\n        .toString();\n\n      return {\n        id: position.id,\n        roiDec,\n        protectedAmount,\n        claimableAmount,\n        fees,\n      };\n    });\n  }\n\n  return [];\n};\n\nexport const fetchProtectedPositions = async (\n  pools: Pool[],\n  currentUser: string\n): Promise<ProtectedPosition[]> => {\n  const liquidityProtectionSettingsContractAddress =\n    await settingsContractAddress$.pipe(take(1)).toPromise();\n\n  const liquidityProtectionSettingsContract =\n    LiquidityProtectionSettings__factory.connect(\n      liquidityProtectionSettingsContractAddress,\n      web3.provider\n    );\n\n  const liquidityProtectionStoreContractAddress =\n    await liquidityProtectionStore$.pipe(take(1)).toPromise();\n\n  const liquidityProtectionStoreContract =\n    LiquidityProtectionStore__factory.connect(\n      liquidityProtectionStoreContractAddress,\n      web3.provider\n    );\n\n  const liquidityProtectionContractAddress = await liquidityProtection$\n    .pipe(take(1))\n    .toPromise();\n\n  const liquidityProtectionContract = LiquidityProtection__factory.connect(\n    liquidityProtectionContractAddress,\n    web3.provider\n  );\n\n  const rawPositions = await fetchPositions(\n    liquidityProtectionStoreContract,\n    currentUser,\n    pools\n  );\n\n  const protectionDelay = await multicall(\n    buildProtectionDelayCall(liquidityProtectionSettingsContract)\n  );\n\n  if (rawPositions.length === 0 || !protectionDelay) return [];\n\n  const minProtectionDelay = protectionDelay[0];\n  const maxProtectionDelay = protectionDelay[1];\n\n  const positionsRoi = await fetchROI(\n    liquidityProtectionContract,\n    rawPositions\n  );\n\n  // const positionsAPR = await fetchPoolAprs(\n  //   pools,\n  //   rawPositions,\n  //   liquidityProtectionContract\n  // );\n\n  const rewardsMultiplier = await fetchedRewardsMultiplier(\n    currentUser,\n    rawPositions\n  );\n\n  const rewardsAmount = await fetchedPendingRewards(currentUser, rawPositions);\n\n  const positions = values(\n    merge(\n      keyBy(rawPositions, 'id'),\n      keyBy(positionsRoi, 'id'),\n      //keyBy(positionsAPR, 'id'),\n      keyBy(rewardsMultiplier, 'id'),\n      keyBy(rewardsAmount, 'id')\n    )\n  );\n\n  const final = positions.map((position) => {\n    const pool = pools.find((x) => x.pool_dlt_id === position.poolToken);\n    const { decimals, usdPrice } = position.reserveToken;\n\n    const initialStake = {\n      tknAmount: shrinkToken(position.reserveAmount, decimals),\n      usdAmount: calcUsdPrice(position.reserveAmount, usdPrice, decimals),\n    };\n\n    const timestamps = {\n      initalStake: position.timestamp,\n      insuranceStart: new BigNumber(position.timestamp)\n        .plus(minProtectionDelay.toString())\n        .toString(),\n      fullCoverage: new BigNumber(position.timestamp)\n        .plus(maxProtectionDelay.toString())\n        .toString(),\n    };\n\n    const currentCoveragePercent = calculateProgressLevel(\n      Number(timestamps.initalStake),\n      Number(timestamps.fullCoverage)\n    );\n\n    return {\n      positionId: position.id,\n      pool: pool!,\n      fees: position.fees,\n      initialStake,\n      protectedAmount: position.protectedAmount,\n      claimableAmount: position.claimableAmount,\n      reserveToken: position.reserveToken,\n      roi: {\n        fees: position.roiDec,\n      },\n      aprs: {\n        day: '0', //position.aprDay,\n        week: '0', //position.aprWeek,\n      },\n      rewardsMultiplier: position.rewardsMultiplier,\n      rewardsAmount: position.rewardsAmount,\n      timestamps,\n      currentCoveragePercent,\n    };\n  });\n\n  return final;\n};\n\nexport const withdrawProtection = async (\n  positionId: string,\n  amount: string,\n  tknAmount: string,\n  onHash: (txHash: string) => void,\n  onCompleted: Function,\n  rejected: Function,\n  failed: (error: string) => void\n) => {\n  try {\n    const liquidityProtectionContractAddress = await liquidityProtection$\n      .pipe(take(1))\n      .toPromise();\n\n    const liquidityProtectionContract = LiquidityProtection__factory.connect(\n      liquidityProtectionContractAddress,\n      writeWeb3.signer\n    );\n\n    const percentage = new BigNumber(amount).div(tknAmount);\n    sendLiquidityEvent(ConversionEvents.wallet_req);\n\n    const estimate =\n      await liquidityProtectionContract.estimateGas.removeLiquidity(\n        positionId,\n        decToPpm(percentage)\n      );\n    const gasLimit = changeGas(estimate.toString());\n\n    const tx = await liquidityProtectionContract.removeLiquidity(\n      positionId,\n      decToPpm(percentage),\n      { gasLimit }\n    );\n    sendLiquidityEvent(ConversionEvents.wallet_confirm);\n\n    onHash(tx.hash);\n\n    await tx.wait();\n    onCompleted();\n  } catch (e: any) {\n    console.error(e);\n    if (e.code === ErrorCode.DeniedTx) rejected();\n    else failed(e.message);\n  }\n};\n\nexport const getWithdrawBreakdown = async (\n  id: string,\n  amount: string,\n  tknAmount: string\n) => {\n  const now = dayjs().unix();\n  const liquidityProtectionContractAddress = await liquidityProtection$\n    .pipe(take(1))\n    .toPromise();\n\n  const constract = LiquidityProtection__factory.connect(\n    liquidityProtectionContractAddress,\n    web3.provider\n  );\n\n  const percentage = new BigNumber(amount).div(tknAmount);\n\n  const res = await constract.removeLiquidityReturn(\n    id,\n    decToPpm(percentage),\n    now\n  );\n  const expectedAmount = res[0].toString();\n  const actualAmount = res[1].toString();\n  const bntAmount = res[2].toString();\n\n  return {\n    expectedAmount,\n    actualAmount,\n    bntAmount,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}