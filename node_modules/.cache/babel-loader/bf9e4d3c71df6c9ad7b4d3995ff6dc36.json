{"ast":null,"code":"import { swap } from 'services/router';\nimport { EthNetworks } from '../web3/types';\nexport const googleTagManager = () => {\n  if (window.dataLayer) return;\n  window.dataLayer = [{\n    page: {\n      class: 'App'\n    }\n  }];\n  init(window, document, 'script', 'dataLayer', 'GTM-TCBKR7W');\n  sendGTMPath(undefined, window.location.pathname);\n};\n\nconst init = (w, d, s, l, i) => {\n  w[l] = w[l] || [];\n  w[l].push({\n    'gtm.start': new Date().getTime(),\n    event: 'gtm.js'\n  });\n  var f = d.getElementsByTagName(s)[0],\n      j = d.createElement(s),\n      dl = l !== 'dataLayer' ? '&l=' + l : '';\n  j.async = true;\n  j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl;\n  f.parentNode.insertBefore(j, f);\n};\n\nconst sendGTM = data => {\n  const dataLayer = window.dataLayer;\n  if (dataLayer) dataLayer.push(data);\n};\n\nexport let ConversionEvents;\n\n(function (ConversionEvents) {\n  ConversionEvents[ConversionEvents[\"click\"] = 0] = \"click\";\n  ConversionEvents[ConversionEvents[\"approvePop\"] = 1] = \"approvePop\";\n  ConversionEvents[ConversionEvents[\"approved\"] = 2] = \"approved\";\n  ConversionEvents[ConversionEvents[\"wallet_req\"] = 3] = \"wallet_req\";\n  ConversionEvents[ConversionEvents[\"wallet_confirm\"] = 4] = \"wallet_confirm\";\n  ConversionEvents[ConversionEvents[\"fail\"] = 5] = \"fail\";\n  ConversionEvents[ConversionEvents[\"success\"] = 6] = \"success\";\n})(ConversionEvents || (ConversionEvents = {}));\n\nconst eventTxtMap = new Map([[ConversionEvents.click, 'Click'], [ConversionEvents.approvePop, 'Unlimited Popup'], [ConversionEvents.approved, 'Unlimited Popup Select'], [ConversionEvents.wallet_req, 'Wallet Confirmation Request'], [ConversionEvents.wallet_confirm, 'Wallet Confirmed'], [ConversionEvents.fail, 'Failed'], [ConversionEvents.success, 'Success']]);\nlet currentConversion;\nexport const setCurrentConversion = function (type) {\n  let network = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EthNetworks.Mainnet;\n  let tokenPair = arguments.length > 2 ? arguments[2] : undefined;\n  let fromToken = arguments.length > 3 ? arguments[3] : undefined;\n  let toToken = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n  let fromAmount = arguments.length > 5 ? arguments[5] : undefined;\n  let fromAmountUsd = arguments.length > 6 ? arguments[6] : undefined;\n  let toAmount = arguments.length > 7 ? arguments[7] : undefined;\n  let toAmountUsd = arguments.length > 8 ? arguments[8] : undefined;\n  let usdToggle = arguments.length > 9 ? arguments[9] : undefined;\n  let rate = arguments.length > 10 ? arguments[10] : undefined;\n  let ratePercentage = arguments.length > 11 ? arguments[11] : undefined;\n  let expiration = arguments.length > 12 ? arguments[12] : undefined;\n  let settings = arguments.length > 13 ? arguments[13] : undefined;\n  currentConversion = {\n    conversion_type: type,\n    conversion_blockchain_network: network === EthNetworks.Ropsten ? 'Ropsten' : 'MainNet',\n    conversion_token_pair: tokenPair,\n    conversion_from_token: fromToken,\n    conversion_to_token: toToken,\n    conversion_from_amount: fromAmount,\n    conversion_from_amount_usd: fromAmountUsd,\n    conversion_to_amount: toAmount,\n    conversion_to_amount_usd: toAmountUsd,\n    conversion_input_type: usdToggle ? 'Fiat' : 'Token',\n    conversion_rate: rate,\n    conversion_rate_percentage: ratePercentage,\n    conversion_experation: expiration,\n    conversion_settings: settings\n  };\n};\nexport const sendConversionApprovedEvent = isUnlimited => {\n  const gtmData = {\n    event: 'CE Conversion ' + eventTxtMap.get(ConversionEvents.approved),\n    wallet_properties: undefined,\n    event_properties: { ...currentConversion,\n      conversion_unlimited: isUnlimited ? 'Unlimited' : 'Limited'\n    },\n    ga_event: {\n      category: 'Conversion'\n    }\n  };\n  sendGTM(gtmData);\n};\nexport const sendConversionSuccessEvent = fromTokenPrice => {\n  const gtmData = {\n    event: 'CE Conversion ' + eventTxtMap.get(ConversionEvents.success),\n    wallet_properties: undefined,\n    event_properties: { ...currentConversion,\n      conversion_market_token_rate: fromTokenPrice,\n      transaction_category: 'Conversion'\n    },\n    ga_event: {\n      category: 'Conversion'\n    }\n  };\n  sendGTM(gtmData);\n};\nexport const sendConversionFailEvent = errorMsg => {\n  const gtmData = {\n    event: 'CE Conversion ' + eventTxtMap.get(ConversionEvents.fail),\n    wallet_properties: undefined,\n    event_properties: { ...currentConversion,\n      error: errorMsg\n    },\n    ga_event: {\n      category: 'Conversion'\n    }\n  };\n  sendGTM(gtmData);\n};\nexport const sendConversionEvent = (event, transaction_hash) => {\n  const eventClickPrefix = event === ConversionEvents.click ? 'Swap ' : '';\n  const gtmData = {\n    event: `CE Conversion ${eventClickPrefix}${eventTxtMap.get(event)}`,\n    wallet_properties: undefined,\n    event_properties: currentConversion,\n    transaction_hash,\n    ga_event: {\n      category: 'Conversion'\n    }\n  };\n  sendGTM(gtmData);\n};\nexport let WalletEvents;\n\n(function (WalletEvents) {\n  WalletEvents[WalletEvents[\"popup\"] = 0] = \"popup\";\n  WalletEvents[WalletEvents[\"click\"] = 1] = \"click\";\n  WalletEvents[WalletEvents[\"connect\"] = 2] = \"connect\";\n})(WalletEvents || (WalletEvents = {}));\n\nconst walletTxtMap = new Map([[WalletEvents.popup, 'Wallet Connect Select Wallet Popup'], [WalletEvents.click, 'Wallet Connect Wallet Icon Click'], [WalletEvents.connect, 'Wallet Connect']]);\nexport const sendWalletEvent = function (walletEvent) {\n  let event_properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  let name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  const wallet = 'Wallet';\n  const event = walletTxtMap.get(walletEvent);\n  if (id && name) sendGTM({\n    event: 'CE ' + event,\n    ga_event: {\n      category: wallet\n    },\n    wallet_properties: {\n      wallet_id: id,\n      wallet_name: name\n    }\n  });else sendGTM({\n    event: 'CE ' + event,\n    event_properties: event_properties,\n    wallet_properties: undefined,\n    ga_event: {\n      category: wallet\n    }\n  });\n};\nexport const sendInsight = open => {\n  sendGTM({\n    event: `CE Conversion Insights ${open ? 'Open' : 'Closed'}`,\n    event_properties: undefined,\n    wallet_properties: undefined,\n    ga_event: {\n      category: 'Conversion'\n    },\n    page: {\n      swap_insights: open ? 'Open' : 'Closed'\n    }\n  });\n};\nexport const sendGTMPath = function (from, to) {\n  let darkMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const item = localStorage.getItem('insightsExpanded');\n  const open = item ? JSON.parse(item) : false;\n  sendGTM({\n    event: 'VP ' + to,\n    page: {\n      from_path: from,\n      to_path: to,\n      theme: darkMode ? 'Dark' : 'Light',\n      currency: 'USD',\n      swap_insights: to === swap ? open ? 'Open' : 'Closed' : undefined\n    },\n    wallet_properties: undefined,\n    ga_event: undefined\n  });\n};\nlet currentLiquidity;\nexport const setCurrentLiquidity = function (type) {\n  let network = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EthNetworks.Mainnet;\n  let pool = arguments.length > 2 ? arguments[2] : undefined;\n  let tokenSymbol = arguments.length > 3 ? arguments[3] : undefined;\n  let tokenAmount = arguments.length > 4 ? arguments[4] : undefined;\n  let tokenAmountUsd = arguments.length > 5 ? arguments[5] : undefined;\n  let bntAmount = arguments.length > 6 ? arguments[6] : undefined;\n  let bntAmountUsd = arguments.length > 7 ? arguments[7] : undefined;\n  let usdToggle = arguments.length > 8 ? arguments[8] : undefined;\n  currentLiquidity = {\n    liquidity_type: type,\n    liquidity_blockchain_network: network === EthNetworks.Ropsten ? 'Ropsten' : 'MainNet',\n    liquidity_pool: pool,\n    liquidity_token_symbol: tokenSymbol,\n    liquidity_token_amount: tokenAmount,\n    liquidity_token_amount_usd: tokenAmountUsd,\n    liquidity_bnt_amount: bntAmount,\n    liquidity_bnt_amount_usd: bntAmountUsd,\n    liquidity_input_type: usdToggle ? 'Fiat' : 'Token'\n  };\n};\n\nconst getLiquidityEventLabel = event => {\n  const type = currentLiquidity.liquidity_type.replace(' Dual', '').replace(' Single', '');\n  return `CE Liquidity ${type} ${eventTxtMap.get(event)}`;\n};\n\nexport const sendLiquidityApprovedEvent = isUnlimited => {\n  console.log(getLiquidityEventLabel(ConversionEvents.approved));\n  const gtmData = {\n    event: getLiquidityEventLabel(ConversionEvents.approved),\n    wallet_properties: undefined,\n    event_properties: { ...currentLiquidity,\n      liquidity_unlimited: isUnlimited ? 'Unlimited' : 'Limited'\n    },\n    ga_event: {\n      category: 'Liquidity'\n    }\n  };\n  sendGTM(gtmData);\n};\nexport const sendLiquiditySuccessEvent = txHash => {\n  console.log(getLiquidityEventLabel(ConversionEvents.success));\n  const gtmData = {\n    event: getLiquidityEventLabel(ConversionEvents.success),\n    wallet_properties: undefined,\n    event_properties: { ...currentLiquidity,\n      transaction_id: txHash,\n      transaction_category: 'Liquidity'\n    },\n    ga_event: {\n      category: 'Liquidity'\n    }\n  };\n  sendGTM(gtmData);\n};\nexport const sendLiquidityFailEvent = errorMsg => {\n  console.log(getLiquidityEventLabel(ConversionEvents.fail));\n  const gtmData = {\n    event: getLiquidityEventLabel(ConversionEvents.fail),\n    wallet_properties: undefined,\n    event_properties: { ...currentLiquidity,\n      error: errorMsg\n    },\n    ga_event: {\n      category: 'Liquidity'\n    }\n  };\n  sendGTM(gtmData);\n};\nexport const sendLiquidityPoolClickEvent = function (type, pool, tokenSymbol) {\n  let network = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : EthNetworks.Mainnet;\n  const gtmData = {\n    event: `CE Liquidity ${type} Pool Click`,\n    wallet_properties: undefined,\n    event_properties: {\n      liquidity_type: 'Withdraw Single',\n      liquidity_blockchain_network: network === EthNetworks.Ropsten ? 'Ropsten' : 'MainNet',\n      liquidity_pool: pool,\n      liquidity_token_symbol: tokenSymbol\n    },\n    ga_event: {\n      category: 'Liquidity'\n    }\n  };\n  console.log(gtmData);\n  sendGTM(gtmData);\n};\nexport const sendLiquidityEvent = (event, transaction_hash) => {\n  console.log(getLiquidityEventLabel(event));\n  const gtmData = {\n    event: getLiquidityEventLabel(event),\n    wallet_properties: undefined,\n    event_properties: currentLiquidity,\n    transaction_hash,\n    ga_event: {\n      category: 'Liquidity'\n    }\n  };\n  sendGTM(gtmData);\n};","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/api/googleTagManager.ts"],"names":["swap","EthNetworks","googleTagManager","window","dataLayer","page","class","init","document","sendGTMPath","undefined","location","pathname","w","d","s","l","i","push","Date","getTime","event","f","getElementsByTagName","j","createElement","dl","async","src","parentNode","insertBefore","sendGTM","data","ConversionEvents","eventTxtMap","Map","click","approvePop","approved","wallet_req","wallet_confirm","fail","success","currentConversion","setCurrentConversion","type","network","Mainnet","tokenPair","fromToken","toToken","fromAmount","fromAmountUsd","toAmount","toAmountUsd","usdToggle","rate","ratePercentage","expiration","settings","conversion_type","conversion_blockchain_network","Ropsten","conversion_token_pair","conversion_from_token","conversion_to_token","conversion_from_amount","conversion_from_amount_usd","conversion_to_amount","conversion_to_amount_usd","conversion_input_type","conversion_rate","conversion_rate_percentage","conversion_experation","conversion_settings","sendConversionApprovedEvent","isUnlimited","gtmData","get","wallet_properties","event_properties","conversion_unlimited","ga_event","category","sendConversionSuccessEvent","fromTokenPrice","conversion_market_token_rate","transaction_category","sendConversionFailEvent","errorMsg","error","sendConversionEvent","transaction_hash","eventClickPrefix","WalletEvents","walletTxtMap","popup","connect","sendWalletEvent","walletEvent","id","name","wallet","wallet_id","wallet_name","sendInsight","open","swap_insights","from","to","darkMode","item","localStorage","getItem","JSON","parse","from_path","to_path","theme","currency","currentLiquidity","setCurrentLiquidity","pool","tokenSymbol","tokenAmount","tokenAmountUsd","bntAmount","bntAmountUsd","liquidity_type","liquidity_blockchain_network","liquidity_pool","liquidity_token_symbol","liquidity_token_amount","liquidity_token_amount_usd","liquidity_bnt_amount","liquidity_bnt_amount_usd","liquidity_input_type","getLiquidityEventLabel","replace","sendLiquidityApprovedEvent","console","log","liquidity_unlimited","sendLiquiditySuccessEvent","txHash","transaction_id","sendLiquidityFailEvent","sendLiquidityPoolClickEvent","sendLiquidityEvent"],"mappings":"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","sourcesContent":["import { swap } from 'services/router';\nimport { EthNetworks } from '../web3/types';\n\ndeclare global {\n  interface Window {\n    dataLayer: any;\n    ethereum: any;\n  }\n}\n\nexport const googleTagManager = () => {\n  if (window.dataLayer) return;\n\n  window.dataLayer = [\n    {\n      page: { class: 'App' },\n    },\n  ];\n\n  init(window, document, 'script', 'dataLayer', 'GTM-TCBKR7W');\n  sendGTMPath(undefined, window.location.pathname);\n};\n\nconst init = (w: any, d: any, s: any, l: any, i: any) => {\n  w[l] = w[l] || [];\n  w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' });\n  var f = d.getElementsByTagName(s)[0],\n    j = d.createElement(s),\n    dl = l !== 'dataLayer' ? '&l=' + l : '';\n  j.async = true;\n  j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl;\n  f.parentNode.insertBefore(j, f);\n};\n\nconst sendGTM = (data: {}) => {\n  const dataLayer = window.dataLayer as {}[];\n  if (dataLayer) dataLayer.push(data);\n};\n\nexport enum ConversionEvents {\n  click,\n  approvePop,\n  approved,\n  wallet_req,\n  wallet_confirm,\n  fail,\n  success,\n}\n\nconst eventTxtMap = new Map([\n  [ConversionEvents.click, 'Click'],\n  [ConversionEvents.approvePop, 'Unlimited Popup'],\n  [ConversionEvents.approved, 'Unlimited Popup Select'],\n  [ConversionEvents.wallet_req, 'Wallet Confirmation Request'],\n  [ConversionEvents.wallet_confirm, 'Wallet Confirmed'],\n  [ConversionEvents.fail, 'Failed'],\n  [ConversionEvents.success, 'Success'],\n]);\n\ninterface CurrentConversion {\n  conversion_type: 'Limit' | 'Market';\n  conversion_blockchain_network: 'Ropsten' | 'MainNet';\n  conversion_token_pair: string;\n  conversion_from_token: string;\n  conversion_to_token: string;\n  conversion_from_amount: string;\n  conversion_from_amount_usd: string;\n  conversion_to_amount: string;\n  conversion_to_amount_usd: string;\n  conversion_input_type: 'Fiat' | 'Token';\n  conversion_rate: string;\n  conversion_rate_percentage?: string;\n  conversion_experation?: string;\n  conversion_settings?: 'Regular' | 'Advanced';\n}\n\nlet currentConversion: CurrentConversion;\nexport const setCurrentConversion = (\n  type: 'Limit' | 'Market',\n  network: EthNetworks = EthNetworks.Mainnet,\n  tokenPair: string,\n  fromToken: string,\n  toToken: string = '',\n  fromAmount: string,\n  fromAmountUsd: string,\n  toAmount: string,\n  toAmountUsd: string,\n  usdToggle: boolean,\n  rate: string,\n  ratePercentage?: string,\n  expiration?: string,\n  settings?: 'Regular' | 'Advanced'\n) => {\n  currentConversion = {\n    conversion_type: type,\n    conversion_blockchain_network:\n      network === EthNetworks.Ropsten ? 'Ropsten' : 'MainNet',\n    conversion_token_pair: tokenPair,\n    conversion_from_token: fromToken,\n    conversion_to_token: toToken,\n    conversion_from_amount: fromAmount,\n    conversion_from_amount_usd: fromAmountUsd,\n    conversion_to_amount: toAmount,\n    conversion_to_amount_usd: toAmountUsd,\n    conversion_input_type: usdToggle ? 'Fiat' : 'Token',\n    conversion_rate: rate,\n    conversion_rate_percentage: ratePercentage,\n    conversion_experation: expiration,\n    conversion_settings: settings,\n  };\n};\n\nexport const sendConversionApprovedEvent = (isUnlimited: boolean) => {\n  const gtmData = {\n    event: 'CE Conversion ' + eventTxtMap.get(ConversionEvents.approved),\n    wallet_properties: undefined,\n    event_properties: {\n      ...currentConversion,\n      conversion_unlimited: isUnlimited ? 'Unlimited' : 'Limited',\n    },\n    ga_event: {\n      category: 'Conversion',\n    },\n  };\n  sendGTM(gtmData);\n};\n\nexport const sendConversionSuccessEvent = (fromTokenPrice: string | null) => {\n  const gtmData = {\n    event: 'CE Conversion ' + eventTxtMap.get(ConversionEvents.success),\n    wallet_properties: undefined,\n    event_properties: {\n      ...currentConversion,\n      conversion_market_token_rate: fromTokenPrice,\n      transaction_category: 'Conversion',\n    },\n    ga_event: {\n      category: 'Conversion',\n    },\n  };\n  sendGTM(gtmData);\n};\n\nexport const sendConversionFailEvent = (errorMsg: string) => {\n  const gtmData = {\n    event: 'CE Conversion ' + eventTxtMap.get(ConversionEvents.fail),\n    wallet_properties: undefined,\n    event_properties: {\n      ...currentConversion,\n      error: errorMsg,\n    },\n    ga_event: {\n      category: 'Conversion',\n    },\n  };\n  sendGTM(gtmData);\n};\n\nexport const sendConversionEvent = (\n  event: ConversionEvents,\n  transaction_hash?: string\n) => {\n  const eventClickPrefix = event === ConversionEvents.click ? 'Swap ' : '';\n  const gtmData = {\n    event: `CE Conversion ${eventClickPrefix}${eventTxtMap.get(event)}`,\n    wallet_properties: undefined,\n    event_properties: currentConversion,\n    transaction_hash,\n    ga_event: {\n      category: 'Conversion',\n    },\n  };\n  sendGTM(gtmData);\n};\n\nexport enum WalletEvents {\n  popup,\n  click,\n  connect,\n}\nconst walletTxtMap = new Map([\n  [WalletEvents.popup, 'Wallet Connect Select Wallet Popup'],\n  [WalletEvents.click, 'Wallet Connect Wallet Icon Click'],\n  [WalletEvents.connect, 'Wallet Connect'],\n]);\n\nexport const sendWalletEvent = (\n  walletEvent: WalletEvents,\n  event_properties: {} | undefined = undefined,\n  id: string = '',\n  name: string = ''\n) => {\n  const wallet = 'Wallet';\n  const event = walletTxtMap.get(walletEvent);\n  if (id && name)\n    sendGTM({\n      event: 'CE ' + event,\n      ga_event: {\n        category: wallet,\n      },\n      wallet_properties: {\n        wallet_id: id,\n        wallet_name: name,\n      },\n    });\n  else\n    sendGTM({\n      event: 'CE ' + event,\n      event_properties: event_properties,\n      wallet_properties: undefined,\n      ga_event: {\n        category: wallet,\n      },\n    });\n};\n\nexport const sendInsight = (open: boolean) => {\n  sendGTM({\n    event: `CE Conversion Insights ${open ? 'Open' : 'Closed'}`,\n    event_properties: undefined,\n    wallet_properties: undefined,\n    ga_event: {\n      category: 'Conversion',\n    },\n    page: { swap_insights: open ? 'Open' : 'Closed' },\n  });\n};\n\nexport const sendGTMPath = (\n  from: string | undefined,\n  to: string,\n  darkMode: boolean = false\n) => {\n  const item = localStorage.getItem('insightsExpanded');\n  const open = item ? (JSON.parse(item) as boolean) : false;\n  sendGTM({\n    event: 'VP ' + to,\n    page: {\n      from_path: from,\n      to_path: to,\n      theme: darkMode ? 'Dark' : 'Light',\n      currency: 'USD',\n      swap_insights: to === swap ? (open ? 'Open' : 'Closed') : undefined,\n    },\n    wallet_properties: undefined,\n    ga_event: undefined,\n  });\n};\n\ninterface CurrentLiquidity {\n  liquidity_type:\n    | 'Deposit Dual'\n    | 'Withdraw Dual'\n    | 'Deposit Single'\n    | 'Withdraw Single';\n  liquidity_blockchain_network: 'Ropsten' | 'MainNet';\n  liquidity_pool: string;\n  liquidity_token_symbol: string;\n  liquidity_token_amount: string;\n  liquidity_token_amount_usd?: number | string;\n  liquidity_bnt_amount?: string;\n  liquidity_bnt_amount_usd?: string;\n  liquidity_input_type?: 'Fiat' | 'Token';\n}\n\nlet currentLiquidity: CurrentLiquidity;\nexport const setCurrentLiquidity = (\n  type: 'Deposit Dual' | 'Withdraw Dual' | 'Deposit Single' | 'Withdraw Single',\n  network: EthNetworks = EthNetworks.Mainnet,\n  pool: string,\n  tokenSymbol: string,\n  tokenAmount: string,\n  tokenAmountUsd: string | undefined,\n  bntAmount: string | undefined,\n  bntAmountUsd: string | undefined,\n  usdToggle: boolean | undefined\n) => {\n  currentLiquidity = {\n    liquidity_type: type,\n    liquidity_blockchain_network:\n      network === EthNetworks.Ropsten ? 'Ropsten' : 'MainNet',\n    liquidity_pool: pool,\n    liquidity_token_symbol: tokenSymbol,\n    liquidity_token_amount: tokenAmount,\n    liquidity_token_amount_usd: tokenAmountUsd,\n    liquidity_bnt_amount: bntAmount,\n    liquidity_bnt_amount_usd: bntAmountUsd,\n    liquidity_input_type: usdToggle ? 'Fiat' : 'Token',\n  };\n};\n\nconst getLiquidityEventLabel = (event: ConversionEvents) => {\n  const type = currentLiquidity.liquidity_type\n    .replace(' Dual', '')\n    .replace(' Single', '');\n  return `CE Liquidity ${type} ${eventTxtMap.get(event)}`;\n};\n\nexport const sendLiquidityApprovedEvent = (isUnlimited: boolean) => {\n  console.log(getLiquidityEventLabel(ConversionEvents.approved));\n  const gtmData = {\n    event: getLiquidityEventLabel(ConversionEvents.approved),\n    wallet_properties: undefined,\n    event_properties: {\n      ...currentLiquidity,\n      liquidity_unlimited: isUnlimited ? 'Unlimited' : 'Limited',\n    },\n    ga_event: {\n      category: 'Liquidity',\n    },\n  };\n  sendGTM(gtmData);\n};\n\nexport const sendLiquiditySuccessEvent = (txHash: string) => {\n  console.log(getLiquidityEventLabel(ConversionEvents.success));\n  const gtmData = {\n    event: getLiquidityEventLabel(ConversionEvents.success),\n    wallet_properties: undefined,\n    event_properties: {\n      ...currentLiquidity,\n      transaction_id: txHash,\n      transaction_category: 'Liquidity',\n    },\n    ga_event: {\n      category: 'Liquidity',\n    },\n  };\n  sendGTM(gtmData);\n};\n\nexport const sendLiquidityFailEvent = (errorMsg: string) => {\n  console.log(getLiquidityEventLabel(ConversionEvents.fail));\n  const gtmData = {\n    event: getLiquidityEventLabel(ConversionEvents.fail),\n    wallet_properties: undefined,\n    event_properties: {\n      ...currentLiquidity,\n      error: errorMsg,\n    },\n    ga_event: {\n      category: 'Liquidity',\n    },\n  };\n  sendGTM(gtmData);\n};\n\nexport const sendLiquidityPoolClickEvent = (\n  type: 'Withdraw' | 'Deposit',\n  pool: string,\n  tokenSymbol: string | undefined,\n  network: EthNetworks = EthNetworks.Mainnet\n) => {\n  const gtmData = {\n    event: `CE Liquidity ${type} Pool Click`,\n    wallet_properties: undefined,\n    event_properties: {\n      liquidity_type: 'Withdraw Single',\n      liquidity_blockchain_network:\n        network === EthNetworks.Ropsten ? 'Ropsten' : 'MainNet',\n      liquidity_pool: pool,\n      liquidity_token_symbol: tokenSymbol,\n    },\n    ga_event: {\n      category: 'Liquidity',\n    },\n  };\n  console.log(gtmData);\n  sendGTM(gtmData);\n};\n\nexport const sendLiquidityEvent = (\n  event: ConversionEvents,\n  transaction_hash?: string\n) => {\n  console.log(getLiquidityEventLabel(event));\n  const gtmData = {\n    event: getLiquidityEventLabel(event),\n    wallet_properties: undefined,\n    event_properties: currentLiquidity,\n    transaction_hash,\n    ga_event: {\n      category: 'Liquidity',\n    },\n  };\n  sendGTM(gtmData);\n};\n"]},"metadata":{},"sourceType":"module"}