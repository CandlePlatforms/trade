{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/earn/portfolio/poolTokens/poolTokensTable/PoolTokensCellActions.tsx\",\n    _s = $RefreshSig$();\n\nimport { useDispatch } from 'react-redux';\nimport { rejectNotification, removeLiquidityNotification, removeLiquidityNotificationFailed } from 'services/notifications/notifications';\nimport { removeLiquidity } from 'services/web3/liquidity/liquidity';\nimport { ConversionEvents, sendLiquidityEvent, sendLiquidityFailEvent, sendLiquiditySuccessEvent, setCurrentLiquidity } from '../../../../../services/api/googleTagManager';\nimport { useWeb3React } from '@web3-react/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PoolTokensCellActions = poolToken => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    chainId\n  } = useWeb3React();\n\n  const handleClick = () => {\n    setCurrentLiquidity('Withdraw Dual', chainId, poolToken.poolName, poolToken.poolName, poolToken.amount, undefined, undefined, undefined, undefined);\n    sendLiquidityEvent(ConversionEvents.click);\n    let transactionId;\n    removeLiquidity(poolToken, txHash => {\n      transactionId = txHash;\n      removeLiquidityNotification(dispatch, poolToken.amount, poolToken.poolName, txHash);\n    }, () => {\n      sendLiquiditySuccessEvent(transactionId);\n    }, () => {\n      sendLiquidityFailEvent('User rejected transaction');\n      rejectNotification(dispatch);\n    }, errorMsg => {\n      sendLiquidityFailEvent(errorMsg);\n      removeLiquidityNotificationFailed(dispatch, poolToken.amount, poolToken.poolName);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => handleClick(),\n    className: \"btn-outline-primary border border-primary dark:border-primary-light h-[30px]\",\n    children: \"Remove Liquidity\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PoolTokensCellActions, \"2tweuPt6LKeUm76M2pMw8O8QocA=\", false, function () {\n  return [useDispatch, useWeb3React];\n});\n\n_c = PoolTokensCellActions;\n\nvar _c;\n\n$RefreshReg$(_c, \"PoolTokensCellActions\");","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/earn/portfolio/poolTokens/poolTokensTable/PoolTokensCellActions.tsx"],"names":["useDispatch","rejectNotification","removeLiquidityNotification","removeLiquidityNotificationFailed","removeLiquidity","ConversionEvents","sendLiquidityEvent","sendLiquidityFailEvent","sendLiquiditySuccessEvent","setCurrentLiquidity","useWeb3React","PoolTokensCellActions","poolToken","dispatch","chainId","handleClick","poolName","amount","undefined","click","transactionId","txHash","errorMsg"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SACEC,kBADF,EAEEC,2BAFF,EAGEC,iCAHF,QAIO,sCAJP;AAMA,SAASC,eAAT,QAAgC,mCAAhC;AACA,SACEC,gBADF,EAEEC,kBAFF,EAGEC,sBAHF,EAIEC,yBAJF,EAKEC,mBALF,QAMO,8CANP;AAOA,SAASC,YAAT,QAA6B,kBAA7B;;AAEA,OAAO,MAAMC,qBAAqB,GAAIC,SAAD,IAA0B;AAAA;;AAC7D,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAcJ,YAAY,EAAhC;;AAEA,QAAMK,WAAW,GAAG,MAAM;AACxBN,IAAAA,mBAAmB,CACjB,eADiB,EAEjBK,OAFiB,EAGjBF,SAAS,CAACI,QAHO,EAIjBJ,SAAS,CAACI,QAJO,EAKjBJ,SAAS,CAACK,MALO,EAMjBC,SANiB,EAOjBA,SAPiB,EAQjBA,SARiB,EASjBA,SATiB,CAAnB;AAWAZ,IAAAA,kBAAkB,CAACD,gBAAgB,CAACc,KAAlB,CAAlB;AACA,QAAIC,aAAJ;AACAhB,IAAAA,eAAe,CACbQ,SADa,EAEZS,MAAD,IAAoB;AAClBD,MAAAA,aAAa,GAAGC,MAAhB;AACAnB,MAAAA,2BAA2B,CACzBW,QADyB,EAEzBD,SAAS,CAACK,MAFe,EAGzBL,SAAS,CAACI,QAHe,EAIzBK,MAJyB,CAA3B;AAMD,KAVY,EAWb,MAAM;AACJb,MAAAA,yBAAyB,CAACY,aAAD,CAAzB;AACD,KAbY,EAcb,MAAM;AACJb,MAAAA,sBAAsB,CAAC,2BAAD,CAAtB;AACAN,MAAAA,kBAAkB,CAACY,QAAD,CAAlB;AACD,KAjBY,EAkBZS,QAAD,IAAc;AACZf,MAAAA,sBAAsB,CAACe,QAAD,CAAtB;AACAnB,MAAAA,iCAAiC,CAC/BU,QAD+B,EAE/BD,SAAS,CAACK,MAFqB,EAG/BL,SAAS,CAACI,QAHqB,CAAjC;AAKD,KAzBY,CAAf;AA2BD,GAzCD;;AA2CA,sBACE;AACE,IAAA,OAAO,EAAE,MAAMD,WAAW,EAD5B;AAEE,IAAA,SAAS,EAAC,8EAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAvDM;;GAAMJ,qB;UACMX,W,EACGU,Y;;;KAFTC,qB","sourcesContent":["import { useDispatch } from 'react-redux';\nimport {\n  rejectNotification,\n  removeLiquidityNotification,\n  removeLiquidityNotificationFailed,\n} from 'services/notifications/notifications';\nimport { PoolToken } from 'services/observables/tokens';\nimport { removeLiquidity } from 'services/web3/liquidity/liquidity';\nimport {\n  ConversionEvents,\n  sendLiquidityEvent,\n  sendLiquidityFailEvent,\n  sendLiquiditySuccessEvent,\n  setCurrentLiquidity,\n} from '../../../../../services/api/googleTagManager';\nimport { useWeb3React } from '@web3-react/core';\n\nexport const PoolTokensCellActions = (poolToken: PoolToken) => {\n  const dispatch = useDispatch();\n  const { chainId } = useWeb3React();\n\n  const handleClick = () => {\n    setCurrentLiquidity(\n      'Withdraw Dual',\n      chainId,\n      poolToken.poolName,\n      poolToken.poolName,\n      poolToken.amount,\n      undefined,\n      undefined,\n      undefined,\n      undefined\n    );\n    sendLiquidityEvent(ConversionEvents.click);\n    let transactionId: string;\n    removeLiquidity(\n      poolToken,\n      (txHash: string) => {\n        transactionId = txHash;\n        removeLiquidityNotification(\n          dispatch,\n          poolToken.amount,\n          poolToken.poolName,\n          txHash\n        );\n      },\n      () => {\n        sendLiquiditySuccessEvent(transactionId);\n      },\n      () => {\n        sendLiquidityFailEvent('User rejected transaction');\n        rejectNotification(dispatch);\n      },\n      (errorMsg) => {\n        sendLiquidityFailEvent(errorMsg);\n        removeLiquidityNotificationFailed(\n          dispatch,\n          poolToken.amount,\n          poolToken.poolName\n        );\n      }\n    );\n  };\n\n  return (\n    <button\n      onClick={() => handleClick()}\n      className=\"btn-outline-primary border border-primary dark:border-primary-light h-[30px]\"\n    >\n      Remove Liquidity\n    </button>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}