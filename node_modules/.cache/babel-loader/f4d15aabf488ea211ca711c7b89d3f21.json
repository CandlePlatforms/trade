{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useMemo, useState } from 'react';\nimport { SUPPORTED_WALLETS } from 'services/web3/wallet/utils';\nimport { sendWalletEvent, WalletEvents } from 'services/api/googleTagManager';\nimport { setAutoLoginLS } from 'utils/localStorage';\nimport { setSigner } from 'services/web3';\nimport { Web3Provider } from '@ethersproject/providers';\nimport { useWeb3React } from '@web3-react/core';\nimport useAsyncEffect from 'use-async-effect';\nimport { isMobile } from 'react-device-detect';\nimport { useAppSelector } from '../../redux';\nimport { openWalletModal } from '../../redux/user/user';\nimport { useDispatch } from 'react-redux';\nimport { openNewTab, wait } from 'utils/pureFunctions';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nexport const useWalletConnect = () => {\n  _s();\n\n  const {\n    activate,\n    deactivate,\n    connector\n  } = useWeb3React();\n  const account = useAppSelector(state => state.user.account);\n  const [isPending, setIsPending] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [selectedWallet, setSelectedWallet] = useState();\n  const isOpen = useAppSelector(state => state.user.walletModal);\n  const dispatch = useDispatch();\n  const setIsOpen = useCallback(value => {\n    dispatch(openWalletModal(value));\n  }, [dispatch]);\n  const handleOpenModal = useCallback(() => {\n    sendWalletEvent(WalletEvents.popup);\n    setIsError(false);\n    setIsPending(false);\n    setIsOpen(true);\n  }, [setIsOpen]);\n  const handleConnect = useCallback(async wallet => {\n    var _connector$walletConn, _connector$walletConn2;\n\n    const {\n      connector,\n      url\n    } = wallet;\n\n    if (url) {\n      setIsOpen(false);\n      return openNewTab(url);\n    }\n\n    sendWalletEvent(WalletEvents.click, {\n      wallet_name: wallet.name\n    });\n    setIsPending(true);\n    setSelectedWallet(wallet);\n    if (connector instanceof WalletConnectConnector && ((_connector$walletConn = connector.walletConnectProvider) === null || _connector$walletConn === void 0 ? void 0 : (_connector$walletConn2 = _connector$walletConn.wc) === null || _connector$walletConn2 === void 0 ? void 0 : _connector$walletConn2.uri)) connector.walletConnectProvider = undefined;\n    if (connector) try {\n      await activate(connector, undefined, true);\n      setIsOpen(false);\n      setAutoLoginLS(true);\n      setSigner(new Web3Provider(await connector.getProvider()).getSigner());\n      const account = await connector.getAccount();\n      sendWalletEvent(WalletEvents.connect, undefined, account || '', wallet.name);\n      await wait(500);\n      setIsPending(false);\n    } catch (e) {\n      console.error('failed to connect wallet. ', e.message);\n      setIsError(true);\n    }\n  }, [activate, setIsOpen]);\n  const handleDisconnect = useCallback(() => {\n    setSelectedWallet(undefined);\n    deactivate();\n    setAutoLoginLS(false);\n    setIsPending(false);\n    setIsError(false);\n  }, [deactivate]);\n  const handleWalletButtonClick = useCallback(() => {\n    if (account) {\n      handleDisconnect();\n    } else {\n      handleOpenModal();\n    }\n  }, [account, handleDisconnect, handleOpenModal]);\n  const isMetaMaskMobile = isMobile && window.ethereum && window.ethereum.isMetaMask;\n  useAsyncEffect(async isMounted => {\n    if (selectedWallet) return;\n\n    if (isMetaMaskMobile) {\n      const wallet = SUPPORTED_WALLETS.find(wallet => wallet.name === 'MetaMask');\n      await handleConnect(wallet);\n      return;\n    }\n\n    if (connector) {\n      setSigner(new Web3Provider(await connector.getProvider()).getSigner());\n      const wallet = SUPPORTED_WALLETS.find(x => typeof x.connector === typeof connector);\n\n      if (isMounted()) {\n        setSelectedWallet(wallet);\n      }\n    }\n  }, [connector, selectedWallet]);\n  const title = useMemo(() => isError ? 'Wallet Error' : isPending ? 'Connecting to ...' : 'Connect Wallet', [isError, isPending]);\n  return {\n    isOpen,\n    setIsOpen,\n    handleConnect,\n    handleDisconnect,\n    handleOpenModal,\n    isPending,\n    isError,\n    account,\n    selectedWallet,\n    SUPPORTED_WALLETS,\n    title,\n    handleWalletButtonClick\n  };\n};\n\n_s(useWalletConnect, \"Ql+AOM7CbM8AYqPtX7Wf/MIkQ4E=\", false, function () {\n  return [useWeb3React, useAppSelector, useAppSelector, useDispatch, useAsyncEffect];\n});","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/walletConnect/useWalletConnect.ts"],"names":["useCallback","useMemo","useState","SUPPORTED_WALLETS","sendWalletEvent","WalletEvents","setAutoLoginLS","setSigner","Web3Provider","useWeb3React","useAsyncEffect","isMobile","useAppSelector","openWalletModal","useDispatch","openNewTab","wait","WalletConnectConnector","useWalletConnect","activate","deactivate","connector","account","state","user","isPending","setIsPending","isError","setIsError","selectedWallet","setSelectedWallet","isOpen","walletModal","dispatch","setIsOpen","value","handleOpenModal","popup","handleConnect","wallet","url","click","wallet_name","name","walletConnectProvider","wc","uri","undefined","getProvider","getSigner","getAccount","connect","e","console","error","message","handleDisconnect","handleWalletButtonClick","isMetaMaskMobile","window","ethereum","isMetaMask","isMounted","find","x","title"],"mappings":"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","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\nimport { SUPPORTED_WALLETS, WalletInfo } from 'services/web3/wallet/utils';\nimport { sendWalletEvent, WalletEvents } from 'services/api/googleTagManager';\nimport { setAutoLoginLS } from 'utils/localStorage';\nimport { setSigner } from 'services/web3';\nimport { Web3Provider } from '@ethersproject/providers';\nimport { useWeb3React } from '@web3-react/core';\nimport useAsyncEffect from 'use-async-effect';\nimport { isMobile } from 'react-device-detect';\nimport { useAppSelector } from '../../redux';\nimport { openWalletModal } from '../../redux/user/user';\nimport { useDispatch } from 'react-redux';\nimport { openNewTab, wait } from 'utils/pureFunctions';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\n\nexport interface UseWalletConnect {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  handleConnect: (wallet: WalletInfo) => void;\n  handleDisconnect: () => void;\n  handleOpenModal: () => void;\n  isPending: boolean;\n  isError: boolean;\n  account?: string | null;\n  selectedWallet?: WalletInfo;\n  SUPPORTED_WALLETS: WalletInfo[];\n  title: string;\n  handleWalletButtonClick: () => void;\n}\n\nexport const useWalletConnect = (): UseWalletConnect => {\n  const { activate, deactivate, connector } = useWeb3React();\n  const account = useAppSelector<string | undefined>(\n    (state) => state.user.account\n  );\n  const [isPending, setIsPending] = useState<boolean>(false);\n  const [isError, setIsError] = useState<boolean>(false);\n  const [selectedWallet, setSelectedWallet] = useState<WalletInfo>();\n\n  const isOpen = useAppSelector<boolean>((state) => state.user.walletModal);\n  const dispatch = useDispatch();\n\n  const setIsOpen = useCallback(\n    (value: boolean) => {\n      dispatch(openWalletModal(value));\n    },\n    [dispatch]\n  );\n\n  const handleOpenModal = useCallback(() => {\n    sendWalletEvent(WalletEvents.popup);\n    setIsError(false);\n    setIsPending(false);\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const handleConnect = useCallback(\n    async (wallet: WalletInfo) => {\n      const { connector, url } = wallet;\n      if (url) {\n        setIsOpen(false);\n        return openNewTab(url);\n      }\n\n      sendWalletEvent(WalletEvents.click, {\n        wallet_name: wallet.name,\n      });\n      setIsPending(true);\n      setSelectedWallet(wallet);\n\n      if (\n        connector instanceof WalletConnectConnector &&\n        connector.walletConnectProvider?.wc?.uri\n      )\n        connector.walletConnectProvider = undefined;\n\n      if (connector)\n        try {\n          await activate(connector, undefined, true);\n          setIsOpen(false);\n          setAutoLoginLS(true);\n          setSigner(\n            new Web3Provider(await connector.getProvider()).getSigner()\n          );\n          const account = await connector.getAccount();\n          sendWalletEvent(\n            WalletEvents.connect,\n            undefined,\n            account || '',\n            wallet.name\n          );\n          await wait(500);\n          setIsPending(false);\n        } catch (e: any) {\n          console.error('failed to connect wallet. ', e.message);\n          setIsError(true);\n        }\n    },\n    [activate, setIsOpen]\n  );\n\n  const handleDisconnect = useCallback(() => {\n    setSelectedWallet(undefined);\n    deactivate();\n    setAutoLoginLS(false);\n    setIsPending(false);\n    setIsError(false);\n  }, [deactivate]);\n\n  const handleWalletButtonClick = useCallback(() => {\n    if (account) {\n      handleDisconnect();\n    } else {\n      handleOpenModal();\n    }\n  }, [account, handleDisconnect, handleOpenModal]);\n\n  const isMetaMaskMobile =\n    isMobile && window.ethereum && window.ethereum.isMetaMask;\n\n  useAsyncEffect(\n    async (isMounted) => {\n      if (selectedWallet) return;\n\n      if (isMetaMaskMobile) {\n        const wallet = SUPPORTED_WALLETS.find(\n          (wallet) => wallet.name === 'MetaMask'\n        )!;\n        await handleConnect(wallet);\n        return;\n      }\n\n      if (connector) {\n        setSigner(new Web3Provider(await connector.getProvider()).getSigner());\n        const wallet = SUPPORTED_WALLETS.find(\n          (x) => typeof x.connector === typeof connector\n        )!;\n        if (isMounted()) {\n          setSelectedWallet(wallet);\n        }\n      }\n    },\n    [connector, selectedWallet]\n  );\n\n  const title = useMemo(\n    () =>\n      isError\n        ? 'Wallet Error'\n        : isPending\n        ? 'Connecting to ...'\n        : 'Connect Wallet',\n    [isError, isPending]\n  );\n\n  return {\n    isOpen,\n    setIsOpen,\n    handleConnect,\n    handleDisconnect,\n    handleOpenModal,\n    isPending,\n    isError,\n    account,\n    selectedWallet,\n    SUPPORTED_WALLETS,\n    title,\n    handleWalletButtonClick,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}