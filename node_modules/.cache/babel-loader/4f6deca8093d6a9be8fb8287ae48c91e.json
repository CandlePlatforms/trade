{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/components/charts/LineChartSimple.tsx\",\n    _s = $RefreshSig$();\n\nimport { createRef, useEffect } from 'react';\nimport { createChart } from 'lightweight-charts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst seriesOptDefault = {\n  lineWidth: 1,\n  crosshairMarkerVisible: false,\n  priceLineVisible: false\n};\nconst chartOptDefault = {\n  layout: {\n    backgroundColor: 'transparent'\n  },\n  crosshair: {\n    vertLine: {\n      visible: false\n    },\n    horzLine: {\n      visible: false\n    }\n  },\n  leftPriceScale: {\n    visible: false,\n    borderVisible: false\n  },\n  rightPriceScale: {\n    visible: false,\n    borderVisible: false\n  },\n  timeScale: {\n    visible: false,\n    borderVisible: false\n  },\n  grid: {\n    horzLines: {\n      visible: false\n    },\n    vertLines: {\n      visible: false\n    }\n  },\n  handleScroll: false,\n  handleScale: false\n};\nconst sizeDefault = {\n  width: 160,\n  height: 50\n};\nexport const LineChartSimple = _ref => {\n  _s();\n\n  let {\n    data,\n    seriesOptions = seriesOptDefault,\n    chartOptions = chartOptDefault,\n    color,\n    size = sizeDefault\n  } = _ref;\n  const chartDiv = /*#__PURE__*/createRef();\n  useEffect(() => {\n    if (!chartDiv.current) return;\n    const chart = createChart(chartDiv.current, size);\n    chart.applyOptions(chartOptions);\n    chart.timeScale().fitContent();\n    const lineSeries = chart.addLineSeries({ ...seriesOptions,\n      color\n    });\n    lineSeries.setData(data);\n    return () => chart.remove();\n  }, [data, seriesOptions, chartOptions, size, chartDiv, color]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chartDiv\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 10\n  }, this);\n};\n\n_s(LineChartSimple, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = LineChartSimple;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineChartSimple\");","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/components/charts/LineChartSimple.tsx"],"names":["createRef","useEffect","createChart","seriesOptDefault","lineWidth","crosshairMarkerVisible","priceLineVisible","chartOptDefault","layout","backgroundColor","crosshair","vertLine","visible","horzLine","leftPriceScale","borderVisible","rightPriceScale","timeScale","grid","horzLines","vertLines","handleScroll","handleScale","sizeDefault","width","height","LineChartSimple","data","seriesOptions","chartOptions","color","size","chartDiv","current","chart","applyOptions","fitContent","lineSeries","addLineSeries","setData","remove"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,SAApB,QAAqC,OAArC;AACA,SAEEC,WAFF,QAOO,oBAPP;;AASA,MAAMC,gBAAqE,GAAG;AAC5EC,EAAAA,SAAS,EAAE,CADiE;AAE5EC,EAAAA,sBAAsB,EAAE,KAFoD;AAG5EC,EAAAA,gBAAgB,EAAE;AAH0D,CAA9E;AAMA,MAAMC,eAA0C,GAAG;AACjDC,EAAAA,MAAM,EAAE;AACNC,IAAAA,eAAe,EAAE;AADX,GADyC;AAIjDC,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,OAAO,EAAE;AADD,KADD;AAITC,IAAAA,QAAQ,EAAE;AACRD,MAAAA,OAAO,EAAE;AADD;AAJD,GAJsC;AAYjDE,EAAAA,cAAc,EAAE;AACdF,IAAAA,OAAO,EAAE,KADK;AAEdG,IAAAA,aAAa,EAAE;AAFD,GAZiC;AAgBjDC,EAAAA,eAAe,EAAE;AACfJ,IAAAA,OAAO,EAAE,KADM;AAEfG,IAAAA,aAAa,EAAE;AAFA,GAhBgC;AAoBjDE,EAAAA,SAAS,EAAE;AACTL,IAAAA,OAAO,EAAE,KADA;AAETG,IAAAA,aAAa,EAAE;AAFN,GApBsC;AAwBjDG,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE;AACTP,MAAAA,OAAO,EAAE;AADA,KADP;AAIJQ,IAAAA,SAAS,EAAE;AACTR,MAAAA,OAAO,EAAE;AADA;AAJP,GAxB2C;AAgCjDS,EAAAA,YAAY,EAAE,KAhCmC;AAiCjDC,EAAAA,WAAW,EAAE;AAjCoC,CAAnD;AAoCA,MAAMC,WAAW,GAAG;AAAEC,EAAAA,KAAK,EAAE,GAAT;AAAcC,EAAAA,MAAM,EAAE;AAAtB,CAApB;AAUA,OAAO,MAAMC,eAAe,GAAG,QAMH;AAAA;;AAAA,MANI;AAC9BC,IAAAA,IAD8B;AAE9BC,IAAAA,aAAa,GAAGzB,gBAFc;AAG9B0B,IAAAA,YAAY,GAAGtB,eAHe;AAI9BuB,IAAAA,KAJ8B;AAK9BC,IAAAA,IAAI,GAAGR;AALuB,GAMJ;AAC1B,QAAMS,QAAQ,gBAAGhC,SAAS,EAA1B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC+B,QAAQ,CAACC,OAAd,EAAuB;AACvB,UAAMC,KAAK,GAAGhC,WAAW,CAAC8B,QAAQ,CAACC,OAAV,EAAmBF,IAAnB,CAAzB;AACAG,IAAAA,KAAK,CAACC,YAAN,CAAmBN,YAAnB;AACAK,IAAAA,KAAK,CAACjB,SAAN,GAAkBmB,UAAlB;AAEA,UAAMC,UAAU,GAAGH,KAAK,CAACI,aAAN,CAAoB,EACrC,GAAGV,aADkC;AAErCE,MAAAA;AAFqC,KAApB,CAAnB;AAIAO,IAAAA,UAAU,CAACE,OAAX,CAAmBZ,IAAnB;AACA,WAAO,MAAMO,KAAK,CAACM,MAAN,EAAb;AACD,GAZQ,EAYN,CAACb,IAAD,EAAOC,aAAP,EAAsBC,YAAtB,EAAoCE,IAApC,EAA0CC,QAA1C,EAAoDF,KAApD,CAZM,CAAT;AAcA,sBAAO;AAAK,IAAA,GAAG,EAAEE;AAAV;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAxBM;;GAAMN,e;;KAAAA,e","sourcesContent":["import { createRef, useEffect } from 'react';\nimport {\n  ChartOptions,\n  createChart,\n  DeepPartial,\n  LineData,\n  LineStyleOptions,\n  SeriesOptionsCommon,\n} from 'lightweight-charts';\n\nconst seriesOptDefault: DeepPartial<LineStyleOptions & SeriesOptionsCommon> = {\n  lineWidth: 1,\n  crosshairMarkerVisible: false,\n  priceLineVisible: false,\n};\n\nconst chartOptDefault: DeepPartial<ChartOptions> = {\n  layout: {\n    backgroundColor: 'transparent',\n  },\n  crosshair: {\n    vertLine: {\n      visible: false,\n    },\n    horzLine: {\n      visible: false,\n    },\n  },\n  leftPriceScale: {\n    visible: false,\n    borderVisible: false,\n  },\n  rightPriceScale: {\n    visible: false,\n    borderVisible: false,\n  },\n  timeScale: {\n    visible: false,\n    borderVisible: false,\n  },\n  grid: {\n    horzLines: {\n      visible: false,\n    },\n    vertLines: {\n      visible: false,\n    },\n  },\n  handleScroll: false,\n  handleScale: false,\n};\n\nconst sizeDefault = { width: 160, height: 50 };\n\ninterface LineChartSimpleProps {\n  data: LineData[];\n  seriesOptions?: DeepPartial<LineStyleOptions & SeriesOptionsCommon>;\n  chartOptions?: DeepPartial<ChartOptions>;\n  color?: string;\n  size?: { width: number; height: number };\n}\n\nexport const LineChartSimple = ({\n  data,\n  seriesOptions = seriesOptDefault,\n  chartOptions = chartOptDefault,\n  color,\n  size = sizeDefault,\n}: LineChartSimpleProps) => {\n  const chartDiv = createRef<HTMLDivElement>();\n\n  useEffect(() => {\n    if (!chartDiv.current) return;\n    const chart = createChart(chartDiv.current, size);\n    chart.applyOptions(chartOptions);\n    chart.timeScale().fitContent();\n\n    const lineSeries = chart.addLineSeries({\n      ...seriesOptions,\n      color,\n    });\n    lineSeries.setData(data);\n    return () => chart.remove();\n  }, [data, seriesOptions, chartOptions, size, chartDiv, color]);\n\n  return <div ref={chartDiv}></div>;\n};\n"]},"metadata":{},"sourceType":"module"}