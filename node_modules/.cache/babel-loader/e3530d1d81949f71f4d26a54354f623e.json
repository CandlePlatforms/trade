{"ast":null,"code":"import { ethToken } from 'services/web3/config';\nimport { web3 } from 'services/web3';\nimport { partition } from 'lodash';\nimport { shrinkToken } from 'utils/formulas';\nimport { multicall } from 'services/web3/multicall/multicall';\nimport { Token__factory } from 'services/web3/abis/types';\nexport const fetchTokenBalances = async (tokens, user) => {\n  const [eth, tokensNoETH] = partition(tokens, token => token.address === ethToken);\n  const calls = tokensNoETH.map(x => buildTokenBalanceCall(x.address, user));\n\n  try {\n    const [tokenBalances, ethBalance] = await Promise.all([multicall(calls), eth && fetchETH(user)]);\n\n    if (tokenBalances) {\n      const balances = tokenBalances.map((bn, index) => {\n        const balance = bn.length > 0 ? bn[0].toString() : '0';\n        return { ...tokensNoETH[index],\n          balance: balance !== '0' ? shrinkToken(balance, tokensNoETH[index].decimals) : balance\n        };\n      });\n\n      if (eth) {\n        const ethIndex = tokens.findIndex(x => x.address === ethToken);\n        balances.splice(ethIndex, 0, { ...tokens[ethIndex],\n          balance: ethBalance\n        });\n      }\n\n      return balances;\n    }\n  } catch (e) {\n    console.error('Failed fetching balances: ', e);\n  }\n\n  return [];\n};\nexport const buildTokenBalanceCall = (address, user) => {\n  const contract = Token__factory.connect(address, web3.provider);\n  return {\n    contractAddress: contract.address,\n    interface: contract.interface,\n    methodName: 'balanceOf',\n    methodParameters: [user]\n  };\n};\nexport const buildTokenTotalSupplyCall = address => {\n  const contract = Token__factory.connect(address, web3.provider);\n  return {\n    contractAddress: contract.address,\n    interface: contract.interface,\n    methodName: 'totalSupply',\n    methodParameters: []\n  };\n};\n\nconst fetchETH = async user => shrinkToken((await web3.provider.getBalance(user)).toString(), 18);","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/observables/balances.ts"],"names":["ethToken","web3","partition","shrinkToken","multicall","Token__factory","fetchTokenBalances","tokens","user","eth","tokensNoETH","token","address","calls","map","x","buildTokenBalanceCall","tokenBalances","ethBalance","Promise","all","fetchETH","balances","bn","index","balance","length","toString","decimals","ethIndex","findIndex","splice","e","console","error","contract","connect","provider","contractAddress","interface","methodName","methodParameters","buildTokenTotalSupplyCall","getBalance"],"mappings":"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","sourcesContent":["import { Token } from './tokens';\nimport { ethToken } from 'services/web3/config';\nimport { web3 } from 'services/web3';\nimport { partition } from 'lodash';\nimport { shrinkToken } from 'utils/formulas';\nimport { MultiCall, multicall } from 'services/web3/multicall/multicall';\nimport { Token__factory } from 'services/web3/abis/types';\nimport { Result } from '@ethersproject/abi/lib/coders/abstract-coder';\nimport BigNumber from 'bignumber.js';\n\nexport const fetchTokenBalances = async (\n  tokens: Token[],\n  user: string\n): Promise<Token[]> => {\n  const [eth, tokensNoETH] = partition(\n    tokens,\n    (token) => token.address === ethToken\n  );\n\n  const calls = tokensNoETH.map((x) => buildTokenBalanceCall(x.address, user));\n\n  try {\n    const [tokenBalances, ethBalance]: [\n      Result[] | undefined,\n      string | undefined\n    ] = await Promise.all([multicall(calls), eth && fetchETH(user)]);\n    if (tokenBalances) {\n      const balances = tokenBalances.map((bn, index) => {\n        const balance = bn.length > 0 ? (bn[0] as BigNumber).toString() : '0';\n        return {\n          ...tokensNoETH[index],\n          balance:\n            balance !== '0'\n              ? shrinkToken(balance, tokensNoETH[index].decimals)\n              : balance,\n        };\n      });\n\n      if (eth) {\n        const ethIndex = tokens.findIndex((x) => x.address === ethToken);\n        balances.splice(ethIndex, 0, {\n          ...tokens[ethIndex],\n          balance: ethBalance,\n        });\n      }\n\n      return balances;\n    }\n  } catch (e: any) {\n    console.error('Failed fetching balances: ', e);\n  }\n\n  return [];\n};\n\nexport const buildTokenBalanceCall = (\n  address: string,\n  user: string\n): MultiCall => {\n  const contract = Token__factory.connect(address, web3.provider);\n\n  return {\n    contractAddress: contract.address,\n    interface: contract.interface,\n    methodName: 'balanceOf',\n    methodParameters: [user],\n  };\n};\n\nexport const buildTokenTotalSupplyCall = (address: string): MultiCall => {\n  const contract = Token__factory.connect(address, web3.provider);\n\n  return {\n    contractAddress: contract.address,\n    interface: contract.interface,\n    methodName: 'totalSupply',\n    methodParameters: [],\n  };\n};\n\nconst fetchETH = async (user: string) =>\n  shrinkToken((await web3.provider.getBalance(user)).toString(), 18);\n"]},"metadata":{},"sourceType":"module"}