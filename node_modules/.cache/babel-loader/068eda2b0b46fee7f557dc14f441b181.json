{"ast":null,"code":"import { web3 } from 'services/web3';\nimport { Multicall__factory } from 'services/web3/abis/types';\nimport { multiCallContract } from 'services/web3/config';\nexport const multicall = async (calls, blockHeight) => {\n  const multicallContract = Multicall__factory.connect(multiCallContract, web3.provider);\n\n  try {\n    const encoded = calls.map(call => ({\n      target: call.contractAddress.toLocaleLowerCase(),\n      callData: call.interface.encodeFunctionData(call.methodName, call.methodParameters)\n    }));\n    const encodedRes = await multicallContract.tryAggregate(false, encoded, {\n      blockTag: blockHeight\n    });\n    const res = encodedRes.map((call, i) => {\n      if (!call.success) return [];\n      return calls[i].interface.decodeFunctionResult(calls[i].methodName, call.returnData);\n    });\n    return res;\n  } catch (error) {\n    console.error(error);\n  }\n};","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/web3/multicall/multicall.ts"],"names":["web3","Multicall__factory","multiCallContract","multicall","calls","blockHeight","multicallContract","connect","provider","encoded","map","call","target","contractAddress","toLocaleLowerCase","callData","interface","encodeFunctionData","methodName","methodParameters","encodedRes","tryAggregate","blockTag","res","i","success","decodeFunctionResult","returnData","error","console"],"mappings":"AAAA,SAASA,IAAT,QAAqB,eAArB;AACA,SAASC,kBAAT,QAAmC,0BAAnC;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AAUA,OAAO,MAAMC,SAAS,GAAG,OAAOC,KAAP,EAA2BC,WAA3B,KAAoD;AAC3E,QAAMC,iBAAiB,GAAGL,kBAAkB,CAACM,OAAnB,CACxBL,iBADwB,EAExBF,IAAI,CAACQ,QAFmB,CAA1B;;AAKA,MAAI;AACF,UAAMC,OAAO,GAAGL,KAAK,CAACM,GAAN,CAAWC,IAAD,KAAW;AACnCC,MAAAA,MAAM,EAAED,IAAI,CAACE,eAAL,CAAqBC,iBAArB,EAD2B;AAEnCC,MAAAA,QAAQ,EAAEJ,IAAI,CAACK,SAAL,CAAeC,kBAAf,CACRN,IAAI,CAACO,UADG,EAERP,IAAI,CAACQ,gBAFG;AAFyB,KAAX,CAAV,CAAhB;AAQA,UAAMC,UAAU,GAAG,MAAMd,iBAAiB,CAACe,YAAlB,CAA+B,KAA/B,EAAsCZ,OAAtC,EAA+C;AACtEa,MAAAA,QAAQ,EAAEjB;AAD4D,KAA/C,CAAzB;AAGA,UAAMkB,GAAG,GAAGH,UAAU,CAACV,GAAX,CAAe,CAACC,IAAD,EAAOa,CAAP,KAAa;AACtC,UAAI,CAACb,IAAI,CAACc,OAAV,EAAmB,OAAO,EAAP;AAEnB,aAAOrB,KAAK,CAACoB,CAAD,CAAL,CAASR,SAAT,CAAmBU,oBAAnB,CACLtB,KAAK,CAACoB,CAAD,CAAL,CAASN,UADJ,EAELP,IAAI,CAACgB,UAFA,CAAP;AAID,KAPW,CAAZ;AASA,WAAOJ,GAAP;AACD,GAtBD,CAsBE,OAAOK,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,CA/BM","sourcesContent":["import { web3 } from 'services/web3';\nimport { Multicall__factory } from 'services/web3/abis/types';\nimport { multiCallContract } from 'services/web3/config';\nimport { Interface } from '@ethersproject/abi';\n\nexport interface MultiCall {\n  contractAddress: string;\n  interface: Interface;\n  methodName: string;\n  methodParameters: any[];\n}\n\nexport const multicall = async (calls: MultiCall[], blockHeight?: number) => {\n  const multicallContract = Multicall__factory.connect(\n    multiCallContract,\n    web3.provider\n  );\n\n  try {\n    const encoded = calls.map((call) => ({\n      target: call.contractAddress.toLocaleLowerCase(),\n      callData: call.interface.encodeFunctionData(\n        call.methodName,\n        call.methodParameters\n      ),\n    }));\n\n    const encodedRes = await multicallContract.tryAggregate(false, encoded, {\n      blockTag: blockHeight,\n    });\n    const res = encodedRes.map((call, i) => {\n      if (!call.success) return [];\n\n      return calls[i].interface.decodeFunctionResult(\n        calls[i].methodName,\n        call.returnData\n      );\n    });\n\n    return res;\n  } catch (error) {\n    console.error(error);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}