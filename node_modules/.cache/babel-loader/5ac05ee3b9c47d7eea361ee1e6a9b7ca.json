{"ast":null,"code":"import axios from 'axios';\nimport { BehaviorSubject, combineLatest, from } from 'rxjs';\nimport { distinctUntilChanged, map, pluck, shareReplay } from 'rxjs/operators';\nimport { EthNetworks } from 'services/web3/types';\nimport { utils } from 'ethers';\nimport { apiData$, correctedPools$, partialPoolTokens$ } from './pools';\nimport { setLoadingBalances, user$ } from './user';\nimport { switchMapIgnoreThrow } from './customOperators';\nimport { currentNetwork$ } from './network';\nimport { getEthToken, buildWethToken, ropstenImage, ethToken, wethToken, bntToken, getTokenWithoutImage } from 'services/web3/config';\nimport { get7DaysAgo, mapIgnoreThrown, sortTokenBalanceAlphabetic } from 'utils/pureFunctions';\nimport { fetchKeeperDaoTokens } from 'services/api/keeperDao';\nimport { fetchTokenBalances } from './balances';\nimport { calculatePercentageChange, shrinkToken } from 'utils/formulas';\nimport { isEqual, sortBy, uniqBy } from 'lodash';\nimport BigNumber from 'bignumber.js';\nimport { settingsContractAddress$ } from 'services/observables/contracts';\nimport { LiquidityProtectionSettings__factory } from 'services/web3/abis/types';\nimport { web3 } from 'services/web3';\nimport { multicall } from 'services/web3/multicall/multicall';\nimport { buildTokenPoolCall } from 'services/web3/swap/market';\nimport { findPoolByConverter } from '../../utils/helperFunctions';\nexport const apiTokens$ = apiData$.pipe(pluck('tokens'), distinctUntilChanged(isEqual), shareReplay(1));\nexport const listOfLists = [{\n  uri: 'https://tokens.1inch.eth.link',\n  name: '1inch'\n}, {\n  uri: 'https://tokens.coingecko.com/ethereum/all.json',\n  name: 'CoinGecko'\n}, {\n  uri: 'https://tokenlist.zerion.eth.link',\n  name: 'Zerion'\n}, {\n  uri: 'https://zapper.fi/api/token-list',\n  name: 'Zapper Token List'\n}, {\n  uri: 'https://raw.githubusercontent.com/compound-finance/token-list/master/compound.tokenlist.json',\n  name: 'Compound'\n}, {\n  uri: 'https://yearn.science/static/tokenlist.json',\n  name: 'Yearn'\n}, {\n  uri: 'https://uniswap.mycryptoapi.com',\n  name: 'MyCrypto Token List'\n}, {\n  uri: 'https://tokenlist.aave.eth.link',\n  name: 'Aave Token List'\n}, {\n  uri: 'https://defiprime.com/defiprime.tokenlist.json',\n  name: 'Defiprime'\n}];\nexport const userPreferredListIds$ = new BehaviorSubject([]);\nexport const tokenLists$ = from(mapIgnoreThrown(listOfLists, async list => {\n  const res = await axios.get(list.uri, {\n    timeout: 10000\n  });\n  return { ...res.data,\n    logoURI: getLogoByURI(res.data.logoURI)\n  };\n})).pipe(shareReplay(1));\nexport const tokenListMerged$ = combineLatest([userPreferredListIds$, tokenLists$]).pipe(switchMapIgnoreThrow(async _ref => {\n  let [userPreferredListIds, tokenLists] = _ref;\n  const filteredTokenLists = tokenLists.filter(list => userPreferredListIds.some(id => id === list.name));\n  const merged = filteredTokenLists.flatMap(list => list.tokens).filter(token => !!token.address).map(token => ({ ...token,\n    address: utils.getAddress(token.address)\n  }));\n  return uniqBy(merged, x => x.address);\n}), shareReplay(1));\nexport const minNetworkTokenLiquidityForMinting$ = combineLatest([settingsContractAddress$]).pipe(switchMapIgnoreThrow(async _ref2 => {\n  let [liquidityProtectionSettingsContract] = _ref2;\n  const contract = LiquidityProtectionSettings__factory.connect(liquidityProtectionSettingsContract, web3.provider);\n  const res = await contract.minNetworkTokenLiquidityForMinting();\n  return shrinkToken(res.toString(), 18);\n}), distinctUntilChanged(isEqual), shareReplay(1));\nexport const tokensNoBalance$ = combineLatest([tokenListMerged$, apiTokens$, correctedPools$, currentNetwork$, minNetworkTokenLiquidityForMinting$]).pipe(map(_ref3 => {\n  let [tokenList, apiTokens, pools, currentNetwork, minMintingBalance] = _ref3;\n  const newApiTokens = [...apiTokens, buildWethToken(apiTokens)].map(x => {\n    const usdPrice = x.rate.usd;\n    const price_24h = x.rate_24h_ago.usd;\n    const priceChanged = usdPrice && price_24h && Number(price_24h) !== 0 ? calculatePercentageChange(Number(usdPrice), Number(price_24h)) : 0;\n    const pool = pools.find(p => p.reserves.find(r => r.address === x.dlt_id));\n    const usdVolume24 = pool ? pool.volume_24h.usd : null;\n    const bntReserve = pool ? pool.reserves.find(r => r.address === bntToken(currentNetwork)) : 0;\n    const sufficientMintingBalance = new BigNumber(minMintingBalance).lt(bntReserve ? bntReserve.balance : 0);\n    const isWhitelisted = pool ? pool.isWhitelisted : false;\n    const isProtected = sufficientMintingBalance && isWhitelisted;\n    const seven_days_ago = get7DaysAgo().getUTCSeconds();\n    return {\n      address: x.dlt_id,\n      symbol: x.symbol,\n      decimals: x.decimals,\n      usdPrice,\n      liquidity: x.liquidity.usd,\n      usd_24h_ago: price_24h,\n      price_change_24: priceChanged,\n      price_history_7d: x.rates_7d.filter(x => !!x).map((x, i) => ({\n        value: Number(x),\n        time: seven_days_ago + i * 360\n      })),\n      usd_volume_24: usdVolume24,\n      isProtected\n    };\n  });\n  let overlappingTokens = [];\n  const eth = getEthToken(apiTokens, pools);\n  if (eth) overlappingTokens.push(eth);\n  newApiTokens.forEach(apiToken => {\n    if (currentNetwork === EthNetworks.Mainnet) {\n      const found = tokenList.find(userToken => userToken && userToken.address === apiToken.address);\n\n      if (found) {\n        overlappingTokens.push({ ...found,\n          ...apiToken,\n          logoURI: getTokenLogoURI(found)\n        });\n      }\n    } else {\n      if (apiToken.address !== ethToken && apiToken.address !== wethToken) overlappingTokens.push({\n        chainId: EthNetworks.Ropsten,\n        name: apiToken.symbol,\n        logoURI: ropstenImage,\n        balance: null,\n        ...apiToken\n      });\n    }\n  });\n  return overlappingTokens;\n}), shareReplay(1));\nexport const tokens$ = combineLatest([user$, tokensNoBalance$]).pipe(switchMapIgnoreThrow(async _ref4 => {\n  let [user, tokensNoBalance] = _ref4;\n\n  if (user && tokensNoBalance) {\n    setLoadingBalances(true);\n    const updatedTokens = await fetchTokenBalances(tokensNoBalance, user);\n    setLoadingBalances(false);\n    if (updatedTokens.length !== 0) return updatedTokens.sort(sortTokenBalanceAlphabetic);\n  }\n\n  return tokensNoBalance;\n}), shareReplay(1));\nexport const keeperDaoTokens$ = from(fetchKeeperDaoTokens()).pipe(shareReplay(1));\n\nconst buildIpfsUri = ipfsHash => `https://ipfs.io/ipfs/${ipfsHash}`;\n\nexport const getTokenLogoURI = token => token.logoURI ? token.logoURI.startsWith('ipfs') ? buildIpfsUri(token.logoURI.split('//')[1]) : token.logoURI : `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${token.address}/logo.png`;\n\nconst getLogoByURI = uri => uri && uri.startsWith('ipfs') ? buildIpfsUri(uri.split('//')[1]) : uri;\n\nexport const pools$ = combineLatest([correctedPools$, tokens$, apiTokens$, minNetworkTokenLiquidityForMinting$, currentNetwork$]).pipe(switchMapIgnoreThrow(async _ref5 => {\n  let [pools, tokens, apiTokens, minMintingBalance, currentNetwork] = _ref5;\n  const tokensMap = new Map(tokens.map(t => [t.address, t]));\n  const apiTokensMap = new Map(apiTokens.map(t => [t.dlt_id, getTokenWithoutImage(t)]));\n  const newPools = pools.map(pool => {\n    var _pool$liquidity$usd, _pool$fees_24h$usd, _tokensMap$get, _tokensMap$get2, _pool$volume_24h$usd;\n\n    let apr = 0;\n    const liquidity = Number((_pool$liquidity$usd = pool.liquidity.usd) !== null && _pool$liquidity$usd !== void 0 ? _pool$liquidity$usd : 0);\n    const fees_24h = Number((_pool$fees_24h$usd = pool.fees_24h.usd) !== null && _pool$fees_24h$usd !== void 0 ? _pool$fees_24h$usd : 0);\n\n    if (liquidity && fees_24h) {\n      apr = new BigNumber(fees_24h).times(365).div(liquidity).times(100).toNumber();\n    }\n\n    const reserveOne = pool.reserves[0];\n    const reserveTwo = pool.reserves[1];\n    const reserveTokenOne = (_tokensMap$get = tokensMap.get(reserveOne.address)) !== null && _tokensMap$get !== void 0 ? _tokensMap$get : apiTokensMap.get(reserveOne.address);\n    if (!reserveTokenOne) return null;\n    const reserveTokenTwo = (_tokensMap$get2 = tokensMap.get(reserveTwo.address)) !== null && _tokensMap$get2 !== void 0 ? _tokensMap$get2 : apiTokensMap.get(reserveTwo.address);\n    if (!reserveTokenTwo) return null;\n    const reserves = [{ ...reserveOne,\n      rewardApr: Number(reserveOne.apr) / 10000,\n      symbol: reserveTokenOne.symbol,\n      logoURI: currentNetwork === EthNetworks.Mainnet ? getTokenLogoURI(reserveTokenOne) : ropstenImage,\n      decimals: reserveTokenOne.decimals,\n      usdPrice: reserveTokenOne.usdPrice\n    }, { ...reserveTwo,\n      rewardApr: Number(reserveTwo.apr) / 10000,\n      symbol: reserveTokenTwo.symbol,\n      logoURI: currentNetwork === EthNetworks.Mainnet ? getTokenLogoURI(reserveTokenTwo) : ropstenImage,\n      decimals: reserveTokenTwo.decimals,\n      usdPrice: reserveTokenTwo.usdPrice\n    }];\n    const bntReserve = reserves.find(r => r.symbol === 'BNT');\n    const sufficientMintingBalance = new BigNumber(minMintingBalance).lt(bntReserve ? bntReserve.balance : 0);\n    const isProtected = sufficientMintingBalance && pool.isWhitelisted;\n    return { ...pool,\n      reserves: sortBy(reserves, [o => o.symbol === 'BNT']),\n      liquidity,\n      volume_24h: Number((_pool$volume_24h$usd = pool.volume_24h.usd) !== null && _pool$volume_24h$usd !== void 0 ? _pool$volume_24h$usd : 0),\n      fees_24h,\n      fee: Number(pool.fee) / 10000,\n      supply: Number(pool.supply),\n      apr,\n      isProtected\n    };\n  });\n  return newPools.filter(x => !!x);\n}), shareReplay(1));\nexport const poolTokens$ = combineLatest([pools$, partialPoolTokens$, apiData$]).pipe(switchMapIgnoreThrow(async _ref6 => {\n  let [pools, partialPoolTokens, apiData] = _ref6;\n  const res = await Promise.all(partialPoolTokens.map(async poolToken => {\n    const pool = findPoolByConverter(poolToken.converter, pools, apiData.pools);\n\n    if (!pool) {\n      return null;\n    }\n\n    const tkn = pool.reserves[0];\n    const bnt = pool.reserves[1];\n    const amount = shrinkToken(poolToken.balance, pool.decimals);\n    const percent = new BigNumber(amount).div(shrinkToken(poolToken.totalSupply, pool.decimals));\n    const balances = await multicall(pool.reserves.map(x => buildTokenPoolCall(pool.converter_dlt_id, x.address)));\n\n    if (!balances) {\n      return null;\n    }\n\n    const tknBalanceWei = new BigNumber(balances[0].toString());\n    const bntBalanceWei = new BigNumber(balances[1].toString());\n    const tknAmount = percent.times(shrinkToken(tknBalanceWei, pool.decimals));\n    const bntAmount = percent.times(shrinkToken(bntBalanceWei, pool.decimals));\n    const value = tknAmount // @ts-ignore\n    .times(Number(tkn.usdPrice || 0)) // @ts-ignore\n    .plus(bntAmount.times(Number(bnt.usdPrice || 0))).toString();\n    return {\n      bnt: {\n        token: {\n          symbol: 'BNT',\n          logoURI: ropstenImage,\n          usdPrice: '0',\n          decimals: 0,\n          ...bnt\n        },\n        amount: bntAmount.toString()\n      },\n      tkn: {\n        token: {\n          symbol: pool.name.replace('/BNT', ''),\n          logoURI: ropstenImage,\n          usdPrice: '0',\n          decimals: 0,\n          ...tkn\n        },\n        amount: tknAmount.toString()\n      },\n      amount,\n      value: value,\n      poolDecimals: pool.decimals,\n      converter: poolToken.converter,\n      poolName: pool.name,\n      version: pool.version\n    };\n  }));\n  return res.filter(x => !!x);\n}));","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/observables/tokens.ts"],"names":["axios","BehaviorSubject","combineLatest","from","distinctUntilChanged","map","pluck","shareReplay","EthNetworks","utils","apiData$","correctedPools$","partialPoolTokens$","setLoadingBalances","user$","switchMapIgnoreThrow","currentNetwork$","getEthToken","buildWethToken","ropstenImage","ethToken","wethToken","bntToken","getTokenWithoutImage","get7DaysAgo","mapIgnoreThrown","sortTokenBalanceAlphabetic","fetchKeeperDaoTokens","fetchTokenBalances","calculatePercentageChange","shrinkToken","isEqual","sortBy","uniqBy","BigNumber","settingsContractAddress$","LiquidityProtectionSettings__factory","web3","multicall","buildTokenPoolCall","findPoolByConverter","apiTokens$","pipe","listOfLists","uri","name","userPreferredListIds$","tokenLists$","list","res","get","timeout","data","logoURI","getLogoByURI","tokenListMerged$","userPreferredListIds","tokenLists","filteredTokenLists","filter","some","id","merged","flatMap","tokens","token","address","getAddress","x","minNetworkTokenLiquidityForMinting$","liquidityProtectionSettingsContract","contract","connect","provider","minNetworkTokenLiquidityForMinting","toString","tokensNoBalance$","tokenList","apiTokens","pools","currentNetwork","minMintingBalance","newApiTokens","usdPrice","rate","usd","price_24h","rate_24h_ago","priceChanged","Number","pool","find","p","reserves","r","dlt_id","usdVolume24","volume_24h","bntReserve","sufficientMintingBalance","lt","balance","isWhitelisted","isProtected","seven_days_ago","getUTCSeconds","symbol","decimals","liquidity","usd_24h_ago","price_change_24","price_history_7d","rates_7d","i","value","time","usd_volume_24","overlappingTokens","eth","push","forEach","apiToken","Mainnet","found","userToken","getTokenLogoURI","chainId","Ropsten","tokens$","user","tokensNoBalance","updatedTokens","length","sort","keeperDaoTokens$","buildIpfsUri","ipfsHash","startsWith","split","pools$","tokensMap","Map","t","apiTokensMap","newPools","apr","fees_24h","times","div","toNumber","reserveOne","reserveTwo","reserveTokenOne","reserveTokenTwo","rewardApr","o","fee","supply","poolTokens$","partialPoolTokens","apiData","Promise","all","poolToken","converter","tkn","bnt","amount","percent","totalSupply","balances","converter_dlt_id","tknBalanceWei","bntBalanceWei","tknAmount","bntAmount","plus","replace","poolDecimals","poolName","version"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { BehaviorSubject, combineLatest, from } from 'rxjs';\nimport { distinctUntilChanged, map, pluck, shareReplay } from 'rxjs/operators';\nimport { EthNetworks } from 'services/web3/types';\nimport { utils } from 'ethers';\nimport { apiData$, correctedPools$, partialPoolTokens$ } from './pools';\nimport { setLoadingBalances, user$ } from './user';\nimport { switchMapIgnoreThrow } from './customOperators';\nimport { currentNetwork$ } from './network';\nimport {\n  getEthToken,\n  buildWethToken,\n  ropstenImage,\n  ethToken,\n  wethToken,\n  bntToken,\n  getTokenWithoutImage,\n} from 'services/web3/config';\nimport {\n  get7DaysAgo,\n  mapIgnoreThrown,\n  sortTokenBalanceAlphabetic,\n} from 'utils/pureFunctions';\nimport { fetchKeeperDaoTokens } from 'services/api/keeperDao';\nimport { fetchTokenBalances } from './balances';\nimport { calculatePercentageChange, shrinkToken } from 'utils/formulas';\nimport { isEqual, sortBy, uniqBy } from 'lodash';\nimport { APIReward, WelcomeData } from 'services/api/bancor';\nimport BigNumber from 'bignumber.js';\nimport { UTCTimestamp } from 'lightweight-charts';\nimport { settingsContractAddress$ } from 'services/observables/contracts';\nimport { LiquidityProtectionSettings__factory } from 'services/web3/abis/types';\nimport { web3 } from 'services/web3';\nimport { multicall } from 'services/web3/multicall/multicall';\nimport { buildTokenPoolCall } from 'services/web3/swap/market';\nimport { findPoolByConverter } from '../../utils/helperFunctions';\n\nexport const apiTokens$ = apiData$.pipe(\n  pluck('tokens'),\n  distinctUntilChanged<WelcomeData['tokens']>(isEqual),\n  shareReplay(1)\n);\n\nexport interface TokenList {\n  name: string;\n  logoURI?: string;\n  tokens: Token[];\n}\n\nexport interface Token {\n  address: string;\n  chainId: EthNetworks;\n  name: string;\n  symbol: string;\n  decimals: number;\n  logoURI: string;\n  usdPrice: string | null;\n  balance: string | null;\n  liquidity: string | null;\n  usd_24h_ago: string | null;\n  price_change_24: number;\n  price_history_7d: { time: UTCTimestamp; value: number }[];\n  usd_volume_24: string | null;\n  isProtected: boolean;\n}\n\nexport interface Reserve {\n  address: string;\n  weight: string;\n  balance: string;\n  symbol: string;\n  logoURI: string;\n  rewardApr?: number;\n  decimals: number;\n  usdPrice: number | string | null;\n}\n\nexport interface Pool {\n  name: string;\n  pool_dlt_id: string;\n  converter_dlt_id: string;\n  reserves: Reserve[];\n  liquidity: number;\n  volume_24h: number;\n  fees_24h: number;\n  fee: number;\n  version: number;\n  supply: number;\n  decimals: number;\n  apr: number;\n  reward?: APIReward;\n  isProtected: boolean;\n}\n\nexport interface PoolToken {\n  bnt: {\n    token: Reserve;\n    amount: string;\n  };\n  tkn: {\n    token: Reserve;\n    amount: string;\n  };\n  amount: string;\n  value: string;\n  poolDecimals: number;\n  converter: string;\n  poolName: string;\n  version: number;\n}\n\nexport const listOfLists = [\n  {\n    uri: 'https://tokens.1inch.eth.link',\n    name: '1inch',\n  },\n  {\n    uri: 'https://tokens.coingecko.com/ethereum/all.json',\n    name: 'CoinGecko',\n  },\n  {\n    uri: 'https://tokenlist.zerion.eth.link',\n    name: 'Zerion',\n  },\n  {\n    uri: 'https://zapper.fi/api/token-list',\n    name: 'Zapper Token List',\n  },\n  {\n    uri: 'https://raw.githubusercontent.com/compound-finance/token-list/master/compound.tokenlist.json',\n    name: 'Compound',\n  },\n  {\n    uri: 'https://yearn.science/static/tokenlist.json',\n    name: 'Yearn',\n  },\n  {\n    uri: 'https://uniswap.mycryptoapi.com',\n    name: 'MyCrypto Token List',\n  },\n  {\n    uri: 'https://tokenlist.aave.eth.link',\n    name: 'Aave Token List',\n  },\n  {\n    uri: 'https://defiprime.com/defiprime.tokenlist.json',\n    name: 'Defiprime',\n  },\n];\n\nexport const userPreferredListIds$ = new BehaviorSubject<string[]>([]);\n\nexport const tokenLists$ = from(\n  mapIgnoreThrown(listOfLists, async (list) => {\n    const res = await axios.get<TokenList>(list.uri, { timeout: 10000 });\n    return {\n      ...res.data,\n      logoURI: getLogoByURI(res.data.logoURI),\n    };\n  })\n).pipe(shareReplay(1));\n\nexport const tokenListMerged$ = combineLatest([\n  userPreferredListIds$,\n  tokenLists$,\n]).pipe(\n  switchMapIgnoreThrow(\n    async ([userPreferredListIds, tokenLists]): Promise<Token[]> => {\n      const filteredTokenLists = tokenLists.filter((list) =>\n        userPreferredListIds.some((id) => id === list.name)\n      );\n      const merged = filteredTokenLists\n        .flatMap((list) => list.tokens)\n        .filter((token) => !!token.address)\n        .map((token) => ({\n          ...token,\n          address: utils.getAddress(token.address),\n        }));\n      return uniqBy(merged, (x) => x.address);\n    }\n  ),\n  shareReplay(1)\n);\n\nexport const minNetworkTokenLiquidityForMinting$ = combineLatest([\n  settingsContractAddress$,\n]).pipe(\n  switchMapIgnoreThrow(async ([liquidityProtectionSettingsContract]) => {\n    const contract = LiquidityProtectionSettings__factory.connect(\n      liquidityProtectionSettingsContract,\n      web3.provider\n    );\n    const res = await contract.minNetworkTokenLiquidityForMinting();\n    return shrinkToken(res.toString(), 18);\n  }),\n  distinctUntilChanged<string>(isEqual),\n  shareReplay(1)\n);\n\nexport const tokensNoBalance$ = combineLatest([\n  tokenListMerged$,\n  apiTokens$,\n  correctedPools$,\n  currentNetwork$,\n  minNetworkTokenLiquidityForMinting$,\n]).pipe(\n  map(([tokenList, apiTokens, pools, currentNetwork, minMintingBalance]) => {\n    const newApiTokens = [...apiTokens, buildWethToken(apiTokens)].map((x) => {\n      const usdPrice = x.rate.usd;\n      const price_24h = x.rate_24h_ago.usd;\n      const priceChanged =\n        usdPrice && price_24h && Number(price_24h) !== 0\n          ? calculatePercentageChange(Number(usdPrice), Number(price_24h))\n          : 0;\n      const pool = pools.find((p) =>\n        p.reserves.find((r) => r.address === x.dlt_id)\n      );\n      const usdVolume24 = pool ? pool.volume_24h.usd : null;\n\n      const bntReserve = pool\n        ? pool.reserves.find((r) => r.address === bntToken(currentNetwork))\n        : 0;\n      const sufficientMintingBalance = new BigNumber(minMintingBalance).lt(\n        bntReserve ? bntReserve.balance : 0\n      );\n      const isWhitelisted = pool ? pool.isWhitelisted : false;\n      const isProtected = sufficientMintingBalance && isWhitelisted;\n\n      const seven_days_ago = get7DaysAgo().getUTCSeconds();\n      return {\n        address: x.dlt_id,\n        symbol: x.symbol,\n        decimals: x.decimals,\n        usdPrice,\n        liquidity: x.liquidity.usd,\n        usd_24h_ago: price_24h,\n        price_change_24: priceChanged,\n        price_history_7d: x.rates_7d\n          .filter((x) => !!x)\n          .map((x, i) => ({\n            value: Number(x),\n            time: (seven_days_ago + i * 360) as UTCTimestamp,\n          })),\n        usd_volume_24: usdVolume24,\n        isProtected,\n      };\n    });\n\n    let overlappingTokens: Token[] = [];\n    const eth = getEthToken(apiTokens, pools);\n    if (eth) overlappingTokens.push(eth);\n\n    newApiTokens.forEach((apiToken) => {\n      if (currentNetwork === EthNetworks.Mainnet) {\n        const found = tokenList.find(\n          (userToken) => userToken && userToken.address === apiToken.address\n        );\n        if (found) {\n          overlappingTokens.push({\n            ...found,\n            ...apiToken,\n            logoURI: getTokenLogoURI(found),\n          });\n        }\n      } else {\n        if (apiToken.address !== ethToken && apiToken.address !== wethToken)\n          overlappingTokens.push({\n            chainId: EthNetworks.Ropsten,\n            name: apiToken.symbol,\n            logoURI: ropstenImage,\n            balance: null,\n            ...apiToken,\n          });\n      }\n    });\n\n    return overlappingTokens;\n  }),\n  shareReplay(1)\n);\n\nexport const tokens$ = combineLatest([user$, tokensNoBalance$]).pipe(\n  switchMapIgnoreThrow(async ([user, tokensNoBalance]) => {\n    if (user && tokensNoBalance) {\n      setLoadingBalances(true);\n      const updatedTokens = await fetchTokenBalances(tokensNoBalance, user);\n      setLoadingBalances(false);\n      if (updatedTokens.length !== 0)\n        return updatedTokens.sort(sortTokenBalanceAlphabetic);\n    }\n\n    return tokensNoBalance;\n  }),\n  shareReplay(1)\n);\n\nexport const keeperDaoTokens$ = from(fetchKeeperDaoTokens()).pipe(\n  shareReplay(1)\n);\n\nconst buildIpfsUri = (ipfsHash: string) => `https://ipfs.io/ipfs/${ipfsHash}`;\n\nexport const getTokenLogoURI = (token: Token) =>\n  token.logoURI\n    ? token.logoURI.startsWith('ipfs')\n      ? buildIpfsUri(token.logoURI.split('//')[1])\n      : token.logoURI\n    : `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${token.address}/logo.png`;\n\nconst getLogoByURI = (uri: string | undefined) =>\n  uri && uri.startsWith('ipfs') ? buildIpfsUri(uri.split('//')[1]) : uri;\n\nexport const pools$ = combineLatest([\n  correctedPools$,\n  tokens$,\n  apiTokens$,\n  minNetworkTokenLiquidityForMinting$,\n  currentNetwork$,\n]).pipe(\n  switchMapIgnoreThrow(\n    async ([pools, tokens, apiTokens, minMintingBalance, currentNetwork]) => {\n      const tokensMap = new Map(tokens.map((t) => [t.address, t]));\n\n      const apiTokensMap = new Map(\n        apiTokens.map((t) => [t.dlt_id, getTokenWithoutImage(t)])\n      );\n\n      const newPools: (Pool | null)[] = pools.map((pool) => {\n        let apr = 0;\n        const liquidity = Number(pool.liquidity.usd ?? 0);\n        const fees_24h = Number(pool.fees_24h.usd ?? 0);\n        if (liquidity && fees_24h) {\n          apr = new BigNumber(fees_24h)\n            .times(365)\n            .div(liquidity)\n            .times(100)\n            .toNumber();\n        }\n\n        const reserveOne = pool.reserves[0];\n        const reserveTwo = pool.reserves[1];\n\n        const reserveTokenOne =\n          tokensMap.get(reserveOne.address) ??\n          apiTokensMap.get(reserveOne.address);\n\n        if (!reserveTokenOne) return null;\n\n        const reserveTokenTwo =\n          tokensMap.get(reserveTwo.address) ??\n          apiTokensMap.get(reserveTwo.address);\n\n        if (!reserveTokenTwo) return null;\n\n        const reserves: Reserve[] = [\n          {\n            ...reserveOne,\n            rewardApr: Number(reserveOne.apr) / 10000,\n            symbol: reserveTokenOne.symbol,\n            logoURI:\n              currentNetwork === EthNetworks.Mainnet\n                ? getTokenLogoURI(reserveTokenOne)\n                : ropstenImage,\n            decimals: reserveTokenOne.decimals,\n            usdPrice: reserveTokenOne.usdPrice,\n          },\n          {\n            ...reserveTwo,\n            rewardApr: Number(reserveTwo.apr) / 10000,\n            symbol: reserveTokenTwo.symbol,\n            logoURI:\n              currentNetwork === EthNetworks.Mainnet\n                ? getTokenLogoURI(reserveTokenTwo)\n                : ropstenImage,\n            decimals: reserveTokenTwo.decimals,\n            usdPrice: reserveTokenTwo.usdPrice,\n          },\n        ];\n\n        const bntReserve = reserves.find((r) => r.symbol === 'BNT');\n        const sufficientMintingBalance = new BigNumber(minMintingBalance).lt(\n          bntReserve ? bntReserve.balance : 0\n        );\n        const isProtected = sufficientMintingBalance && pool.isWhitelisted;\n\n        return {\n          ...pool,\n          reserves: sortBy(reserves, [(o) => o.symbol === 'BNT']),\n          liquidity,\n          volume_24h: Number(pool.volume_24h.usd ?? 0),\n          fees_24h,\n          fee: Number(pool.fee) / 10000,\n          supply: Number(pool.supply),\n          apr,\n          isProtected,\n        };\n      });\n\n      return newPools.filter((x) => !!x) as Pool[];\n    }\n  ),\n  shareReplay(1)\n);\n\nexport const poolTokens$ = combineLatest([\n  pools$,\n  partialPoolTokens$,\n  apiData$,\n]).pipe(\n  switchMapIgnoreThrow(async ([pools, partialPoolTokens, apiData]) => {\n    const res = await Promise.all<PoolToken | null>(\n      partialPoolTokens.map(async (poolToken) => {\n        const pool = findPoolByConverter(\n          poolToken.converter,\n          pools,\n          apiData.pools\n        );\n        if (!pool) {\n          return null;\n        }\n        const tkn = pool.reserves[0];\n        const bnt = pool.reserves[1];\n\n        const amount = shrinkToken(poolToken.balance, pool.decimals);\n        const percent = new BigNumber(amount).div(\n          shrinkToken(poolToken.totalSupply, pool.decimals)\n        );\n\n        const balances = await multicall(\n          pool.reserves.map((x) =>\n            buildTokenPoolCall(pool.converter_dlt_id, x.address)\n          )\n        );\n        if (!balances) {\n          return null;\n        }\n        const tknBalanceWei = new BigNumber(balances[0].toString());\n        const bntBalanceWei = new BigNumber(balances[1].toString());\n\n        const tknAmount = percent.times(\n          shrinkToken(tknBalanceWei, pool.decimals)\n        );\n        const bntAmount = percent.times(\n          shrinkToken(bntBalanceWei, pool.decimals)\n        );\n\n        const value = tknAmount\n          // @ts-ignore\n          .times(Number(tkn.usdPrice || 0))\n          // @ts-ignore\n          .plus(bntAmount.times(Number(bnt.usdPrice || 0)))\n          .toString();\n\n        return {\n          bnt: {\n            token: {\n              symbol: 'BNT',\n              logoURI: ropstenImage,\n              usdPrice: '0',\n              decimals: 0,\n              ...bnt,\n            },\n            amount: bntAmount.toString(),\n          },\n          tkn: {\n            token: {\n              symbol: pool.name.replace('/BNT', ''),\n              logoURI: ropstenImage,\n              usdPrice: '0',\n              decimals: 0,\n              ...tkn,\n            },\n            amount: tknAmount.toString(),\n          },\n          amount,\n          value: value,\n          poolDecimals: pool.decimals,\n          converter: poolToken.converter,\n          poolName: pool.name,\n          version: pool.version,\n        };\n      })\n    );\n    return res.filter((x) => !!x);\n  })\n);\n"]},"metadata":{},"sourceType":"module"}