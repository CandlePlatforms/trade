{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/earn/pools/addLiquidity/single/AddLiquiditySingle.tsx\",\n    _s = $RefreshSig$();\n\nimport { Widget } from 'components/widgets/Widget';\nimport { AddLiquiditySingleInfoBox } from './AddLiquiditySingleInfoBox';\nimport { AddLiquiditySingleSelectPool } from './AddLiquiditySingleSelectPool';\nimport { AddLiquiditySingleSpaceAvailable } from 'elements/earn/pools/addLiquidity/single/AddLiquiditySingleSpaceAvailable';\nimport { useAppSelector } from 'redux/index';\nimport { AddLiquiditySingleAmount } from 'elements/earn/pools/addLiquidity/single/AddLiquiditySingleAmount';\nimport { useCallback, useState } from 'react';\nimport { useApproveModal } from 'hooks/useApproveModal';\nimport { AddLiquiditySingleCTA } from 'elements/earn/pools/addLiquidity/single/AddLiquiditySingleCTA';\nimport { useDispatch } from 'react-redux';\nimport { prettifyNumber } from 'utils/helperFunctions';\nimport BigNumber from 'bignumber.js';\nimport { getTokenById } from 'redux/bancor/bancor';\nimport { addLiquiditySingle } from 'services/web3/liquidity/liquidity';\nimport { addLiquiditySingleFailedNotification, addLiquiditySingleNotification, rejectNotification } from 'services/notifications/notifications';\nimport { useNavigation } from 'services/router';\nimport { ApprovalContract } from 'services/web3/approval';\nimport { ConversionEvents, sendLiquidityApprovedEvent, sendLiquidityEvent, sendLiquidityFailEvent, sendLiquiditySuccessEvent, setCurrentLiquidity } from '../../../../../services/api/googleTagManager';\nimport { useWeb3React } from '@web3-react/core';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AddLiquiditySingle = _ref => {\n  _s();\n\n  let {\n    pool\n  } = _ref;\n  const {\n    chainId\n  } = useWeb3React();\n  const dispatch = useDispatch();\n  const tkn = useAppSelector(state => getTokenById(state, pool.reserves[0].address));\n  const bnt = useAppSelector(state => getTokenById(state, pool.reserves[1].address));\n  const {\n    pushPortfolio,\n    pushPools,\n    pushLiquidityError\n  } = useNavigation();\n  const [isBNTSelected, setIsBNTSelected] = useState(false);\n  const [amount, setAmount] = useState('');\n  const [amountUsd, setAmountUsd] = useState('');\n  const [errorMsg, setErrorMsg] = useState('');\n  const [spaceAvailableBnt, setSpaceAvailableBnt] = useState('');\n  const [spaceAvailableTkn, setSpaceAvailableTkn] = useState('');\n  const fiatToggle = useAppSelector(state => state.user.usdToggle);\n  const selectedToken = isBNTSelected ? bnt : tkn;\n  const setSelectedToken = useCallback(token => {\n    const isBNT = token.address === bnt.address;\n    setIsBNTSelected(isBNT);\n  }, [bnt]);\n\n  const handleAmountChange = (amount, tkn) => {\n    setAmount(amount);\n    const usdAmount = new BigNumber(amount).times(tkn ? tkn.usdPrice : selectedToken.usdPrice).toString();\n    setAmountUsd(usdAmount);\n  };\n\n  const addProtection = async () => {\n    const cleanAmount = prettifyNumber(amount);\n    let transactionId;\n    await addLiquiditySingle(pool, selectedToken, amount, txHash => {\n      transactionId = txHash;\n      addLiquiditySingleNotification(dispatch, txHash, cleanAmount, selectedToken.symbol, pool.name);\n    }, () => {\n      sendLiquiditySuccessEvent(transactionId);\n      if (window.location.pathname.includes(pool.pool_dlt_id)) pushPortfolio();\n    }, () => {\n      sendLiquidityFailEvent('User rejected transaction');\n      rejectNotification(dispatch);\n    }, errorMsg => {\n      sendLiquidityFailEvent(errorMsg);\n      addLiquiditySingleFailedNotification(dispatch, cleanAmount, selectedToken.symbol, pool.name);\n    });\n  };\n\n  const [onStart, ModalApprove] = useApproveModal([{\n    amount,\n    token: selectedToken\n  }], addProtection, ApprovalContract.LiquidityProtection, sendLiquidityEvent, sendLiquidityApprovedEvent);\n  const handleError = useCallback(() => {\n    if (errorMsg) return errorMsg;\n\n    if (!spaceAvailableBnt || !spaceAvailableTkn) {\n      return '';\n    }\n\n    if (selectedToken.symbol === 'BNT') {\n      const isSpaceAvailable = new BigNumber(spaceAvailableBnt).gte(amount || 0);\n\n      if (isSpaceAvailable) {\n        return '';\n      } else {\n        return 'Not enough space available';\n      }\n    } else {\n      const isSpaceAvailable = new BigNumber(spaceAvailableTkn).gte(amount || 0);\n\n      if (isSpaceAvailable) {\n        return '';\n      } else {\n        return 'Not enough space available';\n      }\n    }\n  }, [amount, errorMsg, selectedToken.symbol, spaceAvailableBnt, spaceAvailableTkn]);\n  const handleCTAClick = useCallback(() => {\n    setCurrentLiquidity('Deposit Single', chainId, pool.name, selectedToken.symbol, amount, amountUsd, undefined, undefined, fiatToggle);\n    sendLiquidityEvent(ConversionEvents.click);\n    onStart();\n  }, [amount, amountUsd, chainId, fiatToggle, onStart, pool.name, selectedToken.symbol]);\n\n  if (!tkn) {\n    pushLiquidityError();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Widget, {\n    title: \"Add Liquidity\",\n    subtitle: \"Single-Sided\",\n    goBack: pushPools,\n    children: [/*#__PURE__*/_jsxDEV(AddLiquiditySingleInfoBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-10\",\n      children: [/*#__PURE__*/_jsxDEV(AddLiquiditySingleSelectPool, {\n        pool: pool\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddLiquiditySingleAmount, {\n        pool: pool,\n        amount: amount,\n        setAmount: setAmount,\n        amountUsd: amountUsd,\n        setAmountUsd: setAmountUsd,\n        token: selectedToken,\n        setToken: setSelectedToken,\n        errorMsg: errorMsg,\n        setErrorMsg: setErrorMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddLiquiditySingleSpaceAvailable, {\n      pool: pool,\n      token: tkn,\n      selectedToken: selectedToken,\n      setSelectedToken: setSelectedToken,\n      setAmount: handleAmountChange,\n      spaceAvailableBnt: spaceAvailableBnt,\n      setSpaceAvailableBnt: setSpaceAvailableBnt,\n      spaceAvailableTkn: spaceAvailableTkn,\n      setSpaceAvailableTkn: setSpaceAvailableTkn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddLiquiditySingleCTA, {\n      onStart: handleCTAClick,\n      amount: amount,\n      errorMsg: handleError()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), ModalApprove]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddLiquiditySingle, \"NqUQyOdnQTdIf2eDgUMMEe24QNI=\", false, function () {\n  return [useWeb3React, useDispatch, useAppSelector, useAppSelector, useNavigation, useAppSelector, useApproveModal];\n});\n\n_c = AddLiquiditySingle;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddLiquiditySingle\");","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/earn/pools/addLiquidity/single/AddLiquiditySingle.tsx"],"names":["Widget","AddLiquiditySingleInfoBox","AddLiquiditySingleSelectPool","AddLiquiditySingleSpaceAvailable","useAppSelector","AddLiquiditySingleAmount","useCallback","useState","useApproveModal","AddLiquiditySingleCTA","useDispatch","prettifyNumber","BigNumber","getTokenById","addLiquiditySingle","addLiquiditySingleFailedNotification","addLiquiditySingleNotification","rejectNotification","useNavigation","ApprovalContract","ConversionEvents","sendLiquidityApprovedEvent","sendLiquidityEvent","sendLiquidityFailEvent","sendLiquiditySuccessEvent","setCurrentLiquidity","useWeb3React","AddLiquiditySingle","pool","chainId","dispatch","tkn","state","reserves","address","bnt","pushPortfolio","pushPools","pushLiquidityError","isBNTSelected","setIsBNTSelected","amount","setAmount","amountUsd","setAmountUsd","errorMsg","setErrorMsg","spaceAvailableBnt","setSpaceAvailableBnt","spaceAvailableTkn","setSpaceAvailableTkn","fiatToggle","user","usdToggle","selectedToken","setSelectedToken","token","isBNT","handleAmountChange","usdAmount","times","usdPrice","toString","addProtection","cleanAmount","transactionId","txHash","symbol","name","window","location","pathname","includes","pool_dlt_id","onStart","ModalApprove","LiquidityProtection","handleError","isSpaceAvailable","gte","handleCTAClick","undefined","click"],"mappings":"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","sourcesContent":["import { Pool, Token } from 'services/observables/tokens';\nimport { Widget } from 'components/widgets/Widget';\nimport { AddLiquiditySingleInfoBox } from './AddLiquiditySingleInfoBox';\nimport { AddLiquiditySingleSelectPool } from './AddLiquiditySingleSelectPool';\nimport { AddLiquiditySingleSpaceAvailable } from 'elements/earn/pools/addLiquidity/single/AddLiquiditySingleSpaceAvailable';\nimport { useAppSelector } from 'redux/index';\nimport { AddLiquiditySingleAmount } from 'elements/earn/pools/addLiquidity/single/AddLiquiditySingleAmount';\nimport { useCallback, useState } from 'react';\nimport { useApproveModal } from 'hooks/useApproveModal';\nimport { AddLiquiditySingleCTA } from 'elements/earn/pools/addLiquidity/single/AddLiquiditySingleCTA';\nimport { useDispatch } from 'react-redux';\nimport { prettifyNumber } from 'utils/helperFunctions';\nimport BigNumber from 'bignumber.js';\nimport { getTokenById } from 'redux/bancor/bancor';\nimport { addLiquiditySingle } from 'services/web3/liquidity/liquidity';\nimport {\n  addLiquiditySingleFailedNotification,\n  addLiquiditySingleNotification,\n  rejectNotification,\n} from 'services/notifications/notifications';\nimport { useNavigation } from 'services/router';\nimport { ApprovalContract } from 'services/web3/approval';\nimport {\n  ConversionEvents,\n  sendLiquidityApprovedEvent,\n  sendLiquidityEvent,\n  sendLiquidityFailEvent,\n  sendLiquiditySuccessEvent,\n  setCurrentLiquidity,\n} from '../../../../../services/api/googleTagManager';\nimport { useWeb3React } from '@web3-react/core';\n\ninterface Props {\n  pool: Pool;\n}\n\nexport const AddLiquiditySingle = ({ pool }: Props) => {\n  const { chainId } = useWeb3React();\n  const dispatch = useDispatch();\n  const tkn = useAppSelector<Token | undefined>((state: any) =>\n    getTokenById(state, pool.reserves[0].address)\n  );\n  const bnt = useAppSelector<Token | undefined>((state: any) =>\n    getTokenById(state, pool.reserves[1].address)\n  );\n  const { pushPortfolio, pushPools, pushLiquidityError } = useNavigation();\n  const [isBNTSelected, setIsBNTSelected] = useState(false);\n  const [amount, setAmount] = useState('');\n  const [amountUsd, setAmountUsd] = useState('');\n  const [errorMsg, setErrorMsg] = useState('');\n  const [spaceAvailableBnt, setSpaceAvailableBnt] = useState('');\n  const [spaceAvailableTkn, setSpaceAvailableTkn] = useState('');\n  const fiatToggle = useAppSelector<boolean>((state) => state.user.usdToggle);\n\n  const selectedToken = isBNTSelected ? bnt! : tkn!;\n  const setSelectedToken = useCallback(\n    (token: Token) => {\n      const isBNT = token.address === bnt!.address;\n      setIsBNTSelected(isBNT);\n    },\n    [bnt]\n  );\n\n  const handleAmountChange = (amount: string, tkn?: Token) => {\n    setAmount(amount);\n    const usdAmount = new BigNumber(amount)\n      .times(tkn ? tkn.usdPrice! : selectedToken.usdPrice!)\n      .toString();\n    setAmountUsd(usdAmount);\n  };\n\n  const addProtection = async () => {\n    const cleanAmount = prettifyNumber(amount);\n    let transactionId: string;\n    await addLiquiditySingle(\n      pool,\n      selectedToken,\n      amount,\n      (txHash: string) => {\n        transactionId = txHash;\n        addLiquiditySingleNotification(\n          dispatch,\n          txHash,\n          cleanAmount,\n          selectedToken.symbol,\n          pool.name\n        );\n      },\n      () => {\n        sendLiquiditySuccessEvent(transactionId);\n        if (window.location.pathname.includes(pool.pool_dlt_id))\n          pushPortfolio();\n      },\n      () => {\n        sendLiquidityFailEvent('User rejected transaction');\n        rejectNotification(dispatch);\n      },\n      (errorMsg) => {\n        sendLiquidityFailEvent(errorMsg);\n        addLiquiditySingleFailedNotification(\n          dispatch,\n          cleanAmount,\n          selectedToken.symbol,\n          pool.name\n        );\n      }\n    );\n  };\n\n  const [onStart, ModalApprove] = useApproveModal(\n    [{ amount, token: selectedToken }],\n    addProtection,\n    ApprovalContract.LiquidityProtection,\n    sendLiquidityEvent,\n    sendLiquidityApprovedEvent\n  );\n\n  const handleError = useCallback(() => {\n    if (errorMsg) return errorMsg;\n    if (!spaceAvailableBnt || !spaceAvailableTkn) {\n      return '';\n    }\n    if (selectedToken.symbol === 'BNT') {\n      const isSpaceAvailable = new BigNumber(spaceAvailableBnt).gte(\n        amount || 0\n      );\n      if (isSpaceAvailable) {\n        return '';\n      } else {\n        return 'Not enough space available';\n      }\n    } else {\n      const isSpaceAvailable = new BigNumber(spaceAvailableTkn).gte(\n        amount || 0\n      );\n      if (isSpaceAvailable) {\n        return '';\n      } else {\n        return 'Not enough space available';\n      }\n    }\n  }, [\n    amount,\n    errorMsg,\n    selectedToken.symbol,\n    spaceAvailableBnt,\n    spaceAvailableTkn,\n  ]);\n\n  const handleCTAClick = useCallback(() => {\n    setCurrentLiquidity(\n      'Deposit Single',\n      chainId,\n      pool.name,\n      selectedToken.symbol,\n      amount,\n      amountUsd,\n      undefined,\n      undefined,\n      fiatToggle\n    );\n    sendLiquidityEvent(ConversionEvents.click);\n    onStart();\n  }, [\n    amount,\n    amountUsd,\n    chainId,\n    fiatToggle,\n    onStart,\n    pool.name,\n    selectedToken.symbol,\n  ]);\n\n  if (!tkn) {\n    pushLiquidityError();\n    return <></>;\n  }\n\n  return (\n    <Widget title=\"Add Liquidity\" subtitle=\"Single-Sided\" goBack={pushPools}>\n      <AddLiquiditySingleInfoBox />\n      <div className=\"px-10\">\n        <AddLiquiditySingleSelectPool pool={pool} />\n        <AddLiquiditySingleAmount\n          pool={pool}\n          amount={amount}\n          setAmount={setAmount}\n          amountUsd={amountUsd}\n          setAmountUsd={setAmountUsd}\n          token={selectedToken}\n          setToken={setSelectedToken}\n          errorMsg={errorMsg}\n          setErrorMsg={setErrorMsg}\n        />\n      </div>\n      <AddLiquiditySingleSpaceAvailable\n        pool={pool}\n        token={tkn}\n        selectedToken={selectedToken}\n        setSelectedToken={setSelectedToken}\n        setAmount={handleAmountChange}\n        spaceAvailableBnt={spaceAvailableBnt}\n        setSpaceAvailableBnt={setSpaceAvailableBnt}\n        spaceAvailableTkn={spaceAvailableTkn}\n        setSpaceAvailableTkn={setSpaceAvailableTkn}\n      />\n      <AddLiquiditySingleCTA\n        onStart={handleCTAClick}\n        amount={amount}\n        errorMsg={handleError()}\n      />\n      {ModalApprove}\n    </Widget>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}