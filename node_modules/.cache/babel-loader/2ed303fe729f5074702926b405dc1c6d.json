{"ast":null,"code":"import { createSelector, createSlice } from '@reduxjs/toolkit';\nimport { isEqual, orderBy } from 'lodash';\nimport { createSelectorCreator, defaultMemoize } from 'reselect';\nconst initialState = {\n  pools: [],\n  statistics: []\n};\nconst poolSlice = createSlice({\n  name: 'pool',\n  initialState,\n  reducers: {\n    setPools: (state, action) => {\n      state.pools = action.payload;\n    },\n    setStats: (state, action) => {\n      state.statistics = action.payload;\n    }\n  }\n});\nexport const getPools = createSelector(state => state.pool.pools, state => state.bancor.tokens, (pools, tokens) => {\n  const pools_token_list = pools.filter(pool => {\n    return tokens.findIndex(token => pool.reserves[0].address === token.address) !== -1;\n  });\n  return orderBy(pools_token_list, 'liquidity', 'desc');\n});\nexport const getProtectedPools = createSelector(getPools, pools => pools.filter(p => p.isProtected));\nexport const getTopPools = createSelector(getPools, pools => {\n  const filteredPools = pools.filter(p => p.isProtected && p.liquidity > 100000).map(p => {\n    return {\n      tknSymbol: p.reserves[0].symbol,\n      tknLogoURI: p.reserves[0].logoURI,\n      tknApr: p.apr + (p.reserves[0].rewardApr || 0),\n      bntSymbol: p.reserves[1].symbol,\n      bntLogoURI: p.reserves[1].logoURI,\n      bntApr: p.apr + (p.reserves[1].rewardApr || 0),\n      poolName: p.name\n    };\n  });\n  const winningBntPool = orderBy(filteredPools, 'bntApr', 'desc').slice(0, 1);\n  const topPools = filteredPools.map(p => {\n    return {\n      tknSymbol: p.tknSymbol,\n      tknLogoURI: p.tknLogoURI,\n      poolName: p.poolName,\n      apr: p.tknApr\n    };\n  });\n\n  if (winningBntPool.length === 1) {\n    topPools.push({\n      tknSymbol: winningBntPool[0].bntSymbol,\n      tknLogoURI: winningBntPool[0].bntLogoURI,\n      apr: winningBntPool[0].bntApr,\n      poolName: winningBntPool[0].poolName\n    });\n  }\n\n  return orderBy(topPools, 'apr', 'desc').slice(0, 20);\n});\nconst createDeepEqualSelector = createSelectorCreator(defaultMemoize, isEqual);\nexport const getPoolById = id => createDeepEqualSelector(state => state.pool.pools, pools => {\n  if (pools.length === 0) {\n    return {\n      status: 'loading'\n    };\n  }\n\n  const pool = pools.find(p => p.pool_dlt_id === id);\n  return {\n    status: 'ready',\n    pool\n  };\n});\nexport const {\n  setPools,\n  setStats\n} = poolSlice.actions;\nexport const pool = poolSlice.reducer;","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/redux/bancor/pool.ts"],"names":["createSelector","createSlice","isEqual","orderBy","createSelectorCreator","defaultMemoize","initialState","pools","statistics","poolSlice","name","reducers","setPools","state","action","payload","setStats","getPools","pool","bancor","tokens","pools_token_list","filter","findIndex","token","reserves","address","getProtectedPools","p","isProtected","getTopPools","filteredPools","liquidity","map","tknSymbol","symbol","tknLogoURI","logoURI","tknApr","apr","rewardApr","bntSymbol","bntLogoURI","bntApr","poolName","winningBntPool","slice","topPools","length","push","createDeepEqualSelector","getPoolById","id","status","find","pool_dlt_id","actions","reducer"],"mappings":"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","sourcesContent":["import { createSelector, createSlice } from '@reduxjs/toolkit';\nimport { Pool, Token } from 'services/observables/tokens';\nimport { Statistic } from 'services/observables/statistics';\nimport { RootState } from 'redux/index';\nimport { isEqual, orderBy } from 'lodash';\nimport { createSelectorCreator, defaultMemoize } from 'reselect';\n\ninterface PoolState {\n  pools: Pool[];\n  statistics: Statistic[];\n}\n\nconst initialState: PoolState = {\n  pools: [],\n  statistics: [],\n};\n\nconst poolSlice = createSlice({\n  name: 'pool',\n  initialState,\n  reducers: {\n    setPools: (state, action) => {\n      state.pools = action.payload;\n    },\n    setStats: (state, action) => {\n      state.statistics = action.payload;\n    },\n  },\n});\n\nexport interface TopPool {\n  tknSymbol: string;\n  tknLogoURI: string;\n  apr: number;\n  poolName: string;\n}\n\nexport const getPools = createSelector(\n  (state: RootState) => state.pool.pools,\n  (state: RootState) => state.bancor.tokens,\n  (pools: Pool[], tokens: Token[]) => {\n    const pools_token_list = pools.filter((pool) => {\n      return (\n        tokens.findIndex(\n          (token) => pool.reserves[0].address === token.address\n        ) !== -1\n      );\n    });\n    return orderBy(pools_token_list, 'liquidity', 'desc');\n  }\n);\n\nexport const getProtectedPools: any = createSelector(\n  getPools,\n  (pools: Pool[]) => pools.filter((p) => p.isProtected)\n);\n\nexport const getTopPools: any = createSelector(getPools, (pools: Pool[]) => {\n  const filteredPools = pools\n    .filter((p) => p.isProtected && p.liquidity > 100000)\n    .map((p) => {\n      return {\n        tknSymbol: p.reserves[0].symbol,\n        tknLogoURI: p.reserves[0].logoURI,\n        tknApr: p.apr + (p.reserves[0].rewardApr || 0),\n        bntSymbol: p.reserves[1].symbol,\n        bntLogoURI: p.reserves[1].logoURI,\n        bntApr: p.apr + (p.reserves[1].rewardApr || 0),\n        poolName: p.name,\n      };\n    });\n  const winningBntPool = orderBy(filteredPools, 'bntApr', 'desc').slice(0, 1);\n  const topPools: TopPool[] = filteredPools.map((p) => {\n    return {\n      tknSymbol: p.tknSymbol,\n      tknLogoURI: p.tknLogoURI,\n      poolName: p.poolName,\n      apr: p.tknApr,\n    };\n  });\n  if (winningBntPool.length === 1) {\n    topPools.push({\n      tknSymbol: winningBntPool[0].bntSymbol,\n      tknLogoURI: winningBntPool[0].bntLogoURI,\n      apr: winningBntPool[0].bntApr,\n      poolName: winningBntPool[0].poolName,\n    });\n  }\n  return orderBy(topPools, 'apr', 'desc').slice(0, 20);\n});\n\nexport interface SelectedPool {\n  status: 'loading' | 'ready';\n  pool?: Pool;\n}\n\nconst createDeepEqualSelector = createSelectorCreator(defaultMemoize, isEqual);\n\nexport const getPoolById = (id: string) =>\n  createDeepEqualSelector(\n    (state: RootState) => state.pool.pools,\n    (pools: Pool[]) => {\n      if (pools.length === 0) {\n        return { status: 'loading' } as SelectedPool;\n      }\n\n      const pool = pools.find((p) => p.pool_dlt_id === id);\n      return { status: 'ready', pool } as SelectedPool;\n    }\n  );\n\nexport const { setPools, setStats } = poolSlice.actions;\n\nexport const pool = poolSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}