{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/modalVbnt/ModalVbnt.tsx\",\n    _s = $RefreshSig$();\n\nimport { Modal } from 'components/modal/Modal';\nimport { SwapSwitch } from 'elements/swapSwitch/SwapSwitch';\nimport { useMemo, useState } from 'react';\nimport { wait } from 'utils/pureFunctions';\nimport { stakeAmount, unstakeAmount } from 'services/web3/governance/governance';\nimport { useWeb3React } from '@web3-react/core';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchTokenBalances } from 'services/observables/balances';\nimport { updateTokens } from 'redux/bancor/bancor';\nimport { rejectNotification, stakeFailedNotification, stakeNotification, unstakeFailedNotification, unstakeNotification } from 'services/notifications/notifications';\nimport { useApproveModal } from 'hooks/useApproveModal';\nimport { TokenInputPercentage } from 'components/tokenInputPercentage/TokenInputPercentage';\nimport { ApprovalContract } from 'services/web3/approval';\nimport { useAppSelector } from 'redux/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ModalVbnt = _ref => {\n  _s();\n\n  let {\n    setIsOpen,\n    isOpen,\n    token,\n    stake,\n    stakeBalance,\n    onCompleted\n  } = _ref;\n  const {\n    chainId\n  } = useWeb3React();\n  const account = useAppSelector(state => state.user.account);\n  const [amount, setAmount] = useState('');\n  const percentages = useMemo(() => [25, 50, 75, 100], []);\n  const [, setSelPercentage] = useState(-1);\n  const dispatch = useDispatch();\n  const stakeDisabled = !account || !chainId || !amount || Number(amount) === 0;\n  const fieldBlance = stake ? token.balance ? token.balance : undefined : stakeBalance;\n  useEffect(() => {\n    if (amount && fieldBlance) {\n      const percentage = Number(amount) / Number(fieldBlance) * 100;\n      setSelPercentage(percentages.findIndex(x => percentage.toFixed(10) === x.toFixed(10)));\n    }\n  }, [amount, token, percentages, fieldBlance]);\n\n  const handleStakeUnstake = async () => {\n    if (stakeDisabled || !account || !chainId) return;\n    if (stake) await stakeAmount(amount, token, txHash => stakeNotification(dispatch, amount, txHash), () => refreshBalances(token, account), () => rejectNotification(dispatch), () => stakeFailedNotification(dispatch, amount));else await unstakeAmount(amount, token, txHash => unstakeNotification(dispatch, amount, txHash), () => refreshBalances(token, account), () => rejectNotification(dispatch), () => unstakeFailedNotification(dispatch, amount));\n  };\n\n  const [checkApprove, ModalApprove] = useApproveModal([{\n    amount: amount,\n    token: token\n  }], handleStakeUnstake, ApprovalContract.Governance);\n\n  const refreshBalances = async (token, account) => {\n    await wait(8000);\n    const balances = await fetchTokenBalances([token], account);\n    dispatch(updateTokens(balances));\n    if (onCompleted) onCompleted();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      title: `${stake ? 'Stake' : 'Unstake'} vBNT`,\n      titleElement: /*#__PURE__*/_jsxDEV(SwapSwitch, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 23\n      }, this),\n      setIsOpen: setIsOpen,\n      isOpen: isOpen,\n      separator: true,\n      large: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-10\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col items-center text-12 mx-20\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-20 font-semibold mb-10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), false && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-blue-4 text-12 mx-10 text-center\",\n            children: \"Chose the amount you want to stake. you can decide if you want the amount in Dollars or Token input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TokenInputPercentage, {\n            label: `${stake ? 'Stake' : 'Unstake'} amount`,\n            token: token,\n            balance: fieldBlance,\n            amount: amount,\n            setAmount: setAmount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setAmount('');\n              setIsOpen(false);\n              if (stake) checkApprove();else handleStakeUnstake();\n            },\n            disabled: stakeDisabled,\n            className: `btn-primary rounded w-full mt-30 mb-10`,\n            children: `${stake ? 'Stake' : 'Unstake'} vBNT`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), ModalApprove]\n  }, void 0, true);\n};\n\n_s(ModalVbnt, \"Ij1pNWl4D3aCSFGE+W9OOAtQrJw=\", false, function () {\n  return [useWeb3React, useAppSelector, useDispatch, useApproveModal];\n});\n\n_c = ModalVbnt;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalVbnt\");","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/modalVbnt/ModalVbnt.tsx"],"names":["Modal","SwapSwitch","useMemo","useState","wait","stakeAmount","unstakeAmount","useWeb3React","useDispatch","useEffect","fetchTokenBalances","updateTokens","rejectNotification","stakeFailedNotification","stakeNotification","unstakeFailedNotification","unstakeNotification","useApproveModal","TokenInputPercentage","ApprovalContract","useAppSelector","ModalVbnt","setIsOpen","isOpen","token","stake","stakeBalance","onCompleted","chainId","account","state","user","amount","setAmount","percentages","setSelPercentage","dispatch","stakeDisabled","Number","fieldBlance","balance","undefined","percentage","findIndex","x","toFixed","handleStakeUnstake","txHash","refreshBalances","checkApprove","ModalApprove","Governance","balances"],"mappings":"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","sourcesContent":["import { Modal } from 'components/modal/Modal';\nimport { SwapSwitch } from 'elements/swapSwitch/SwapSwitch';\nimport { useMemo, useState } from 'react';\nimport { Token } from 'services/observables/tokens';\nimport { wait } from 'utils/pureFunctions';\nimport {\n  stakeAmount,\n  unstakeAmount,\n} from 'services/web3/governance/governance';\nimport { useWeb3React } from '@web3-react/core';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchTokenBalances } from 'services/observables/balances';\nimport { updateTokens } from 'redux/bancor/bancor';\nimport {\n  rejectNotification,\n  stakeFailedNotification,\n  stakeNotification,\n  unstakeFailedNotification,\n  unstakeNotification,\n} from 'services/notifications/notifications';\nimport { useApproveModal } from 'hooks/useApproveModal';\nimport { TokenInputPercentage } from 'components/tokenInputPercentage/TokenInputPercentage';\nimport { ApprovalContract } from 'services/web3/approval';\nimport { useAppSelector } from 'redux/index';\n\ninterface ModalVbntProps {\n  setIsOpen: Function;\n  isOpen: boolean;\n  token: Token;\n  stake: boolean;\n  stakeBalance?: string;\n  onCompleted?: Function;\n}\n\nexport const ModalVbnt = ({\n  setIsOpen,\n  isOpen,\n  token,\n  stake,\n  stakeBalance,\n  onCompleted,\n}: ModalVbntProps) => {\n  const { chainId } = useWeb3React();\n  const account = useAppSelector<string | undefined>(\n    (state) => state.user.account\n  );\n  const [amount, setAmount] = useState('');\n  const percentages = useMemo(() => [25, 50, 75, 100], []);\n  const [, setSelPercentage] = useState<number>(-1);\n  const dispatch = useDispatch();\n\n  const stakeDisabled = !account || !chainId || !amount || Number(amount) === 0;\n\n  const fieldBlance = stake\n    ? token.balance\n      ? token.balance\n      : undefined\n    : stakeBalance;\n\n  useEffect(() => {\n    if (amount && fieldBlance) {\n      const percentage = (Number(amount) / Number(fieldBlance)) * 100;\n      setSelPercentage(\n        percentages.findIndex((x) => percentage.toFixed(10) === x.toFixed(10))\n      );\n    }\n  }, [amount, token, percentages, fieldBlance]);\n\n  const handleStakeUnstake = async () => {\n    if (stakeDisabled || !account || !chainId) return;\n\n    if (stake)\n      await stakeAmount(\n        amount,\n        token,\n        (txHash: string) => stakeNotification(dispatch, amount, txHash),\n        () => refreshBalances(token, account),\n        () => rejectNotification(dispatch),\n        () => stakeFailedNotification(dispatch, amount)\n      );\n    else\n      await unstakeAmount(\n        amount,\n        token,\n        (txHash: string) => unstakeNotification(dispatch, amount, txHash),\n        () => refreshBalances(token, account),\n        () => rejectNotification(dispatch),\n        () => unstakeFailedNotification(dispatch, amount)\n      );\n  };\n\n  const [checkApprove, ModalApprove] = useApproveModal(\n    [{ amount: amount, token: token }],\n    handleStakeUnstake,\n    ApprovalContract.Governance\n  );\n\n  const refreshBalances = async (token: Token, account: string) => {\n    await wait(8000);\n    const balances = await fetchTokenBalances([token], account);\n    dispatch(updateTokens(balances));\n    if (onCompleted) onCompleted();\n  };\n\n  return (\n    <>\n      <Modal\n        title={`${stake ? 'Stake' : 'Unstake'} vBNT`}\n        titleElement={<SwapSwitch />}\n        setIsOpen={setIsOpen}\n        isOpen={isOpen}\n        separator\n        large\n      >\n        <div className=\"p-10\">\n          <div className=\"flex flex-col items-center text-12 mx-20\">\n            <div className=\"text-20 font-semibold mb-10\"></div>\n            {false && (\n              <div className=\"text-blue-4 text-12 mx-10 text-center\">\n                Chose the amount you want to stake. you can decide if you want\n                the amount in Dollars or Token input\n              </div>\n            )}\n            <TokenInputPercentage\n              label={`${stake ? 'Stake' : 'Unstake'} amount`}\n              token={token}\n              balance={fieldBlance}\n              amount={amount}\n              setAmount={setAmount}\n            />\n            <button\n              onClick={() => {\n                setAmount('');\n                setIsOpen(false);\n                if (stake) checkApprove();\n                else handleStakeUnstake();\n              }}\n              disabled={stakeDisabled}\n              className={`btn-primary rounded w-full mt-30 mb-10`}\n            >\n              {`${stake ? 'Stake' : 'Unstake'} vBNT`}\n            </button>\n          </div>\n        </div>\n      </Modal>\n      {ModalApprove}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}