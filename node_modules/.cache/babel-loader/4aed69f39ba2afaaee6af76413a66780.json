{"ast":null,"code":"import { tokenLists$, userPreferredListIds$, keeperDaoTokens$, listOfLists, tokens$, pools$, tokensNoBalance$, tokenListMerged$, poolTokens$, apiTokens$ } from 'services/observables/tokens';\nimport { setAllTokens, setApiTokens, setBntPrice, setKeeperDaoTokens, setTokenList, setTokenLists } from 'redux/bancor/bancor';\nimport { getTokenListLS, setTokenListLS } from 'utils/localStorage';\nimport { take } from 'rxjs/operators';\nimport { loadingBalances$, loadingLockedBnt$, loadingPositions$, loadingRewards$ } from './user';\nimport { setLoadingBalances } from 'redux/user/user';\nimport { statistics$ } from 'services/observables/statistics';\nimport { setPools, setStats } from 'redux/bancor/pool';\nimport { bntPrice$ } from 'services/observables/bancor';\nimport { setLoadingLockedBnt, setLoadingPositions, setLoadingRewards, setLockedAvailableBNT, setPoolTokens, setProtectedPositions, setRewards } from 'redux/liquidity/liquidity';\nimport { lockedAvailableBnt$, protectedPositions$, rewards$ } from './liquidity';\nexport const subscribeToObservables = dispatch => {\n  tokenLists$.subscribe(tokenLists => {\n    dispatch(setTokenLists(tokenLists));\n  });\n  tokensNoBalance$.pipe(take(1)).toPromise().then(tokenList => dispatch(setTokenList(tokenList)));\n  loadingBalances$.subscribe(loading => dispatch(setLoadingBalances(loading)));\n  const userListIds = getTokenListLS();\n\n  if (userListIds.length === 0) {\n    const twoLists = [listOfLists[0].name, listOfLists[1].name];\n    setTokenListLS(twoLists);\n    userPreferredListIds$.next(twoLists);\n  } else userPreferredListIds$.next(userListIds);\n\n  tokens$.subscribe(tokenList => {\n    dispatch(setTokenList(tokenList));\n  });\n  tokenListMerged$.subscribe(tokenList => {\n    dispatch(setAllTokens(tokenList));\n  });\n  apiTokens$.subscribe(tokens => {\n    dispatch(setApiTokens(tokens));\n  });\n  keeperDaoTokens$.subscribe(keeperDaoTokens => {\n    dispatch(setKeeperDaoTokens(keeperDaoTokens));\n  });\n  pools$.subscribe(pools => {\n    dispatch(setPools(pools));\n  });\n  statistics$.subscribe(stats => {\n    dispatch(setStats(stats));\n  });\n  bntPrice$.subscribe(bntPrice => {\n    dispatch(setBntPrice(bntPrice));\n  });\n  protectedPositions$.subscribe(protectedPositions => {\n    dispatch(setProtectedPositions(protectedPositions));\n  });\n  rewards$.subscribe(rewards => {\n    dispatch(setRewards(rewards));\n  });\n  poolTokens$.subscribe(poolTokens => dispatch(setPoolTokens(poolTokens)));\n  lockedAvailableBnt$.subscribe(lockedAvailableBnt => {\n    if (lockedAvailableBnt) {\n      dispatch(setLockedAvailableBNT(lockedAvailableBnt));\n    }\n  });\n  loadingPositions$.subscribe(loadingPositions => dispatch(setLoadingPositions(loadingPositions)));\n  loadingRewards$.subscribe(loadingRewards => dispatch(setLoadingRewards(loadingRewards)));\n  loadingLockedBnt$.subscribe(loadingLockedBnt => dispatch(setLoadingLockedBnt(loadingLockedBnt)));\n};","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/observables/triggers.ts"],"names":["tokenLists$","userPreferredListIds$","keeperDaoTokens$","listOfLists","tokens$","pools$","tokensNoBalance$","tokenListMerged$","poolTokens$","apiTokens$","setAllTokens","setApiTokens","setBntPrice","setKeeperDaoTokens","setTokenList","setTokenLists","getTokenListLS","setTokenListLS","take","loadingBalances$","loadingLockedBnt$","loadingPositions$","loadingRewards$","setLoadingBalances","statistics$","setPools","setStats","bntPrice$","setLoadingLockedBnt","setLoadingPositions","setLoadingRewards","setLockedAvailableBNT","setPoolTokens","setProtectedPositions","setRewards","lockedAvailableBnt$","protectedPositions$","rewards$","subscribeToObservables","dispatch","subscribe","tokenLists","pipe","toPromise","then","tokenList","loading","userListIds","length","twoLists","name","next","tokens","keeperDaoTokens","pools","stats","bntPrice","protectedPositions","rewards","poolTokens","lockedAvailableBnt","loadingPositions","loadingRewards","loadingLockedBnt"],"mappings":"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","sourcesContent":["import {\n  tokenLists$,\n  userPreferredListIds$,\n  keeperDaoTokens$,\n  listOfLists,\n  tokens$,\n  pools$,\n  tokensNoBalance$,\n  tokenListMerged$,\n  poolTokens$,\n  apiTokens$,\n} from 'services/observables/tokens';\nimport {\n  setAllTokens,\n  setApiTokens,\n  setBntPrice,\n  setKeeperDaoTokens,\n  setTokenList,\n  setTokenLists,\n} from 'redux/bancor/bancor';\nimport { getTokenListLS, setTokenListLS } from 'utils/localStorage';\nimport { take } from 'rxjs/operators';\nimport {\n  loadingBalances$,\n  loadingLockedBnt$,\n  loadingPositions$,\n  loadingRewards$,\n} from './user';\nimport { setLoadingBalances } from 'redux/user/user';\nimport { statistics$ } from 'services/observables/statistics';\nimport { setPools, setStats } from 'redux/bancor/pool';\nimport { bntPrice$ } from 'services/observables/bancor';\nimport {\n  setLoadingLockedBnt,\n  setLoadingPositions,\n  setLoadingRewards,\n  setLockedAvailableBNT,\n  setPoolTokens,\n  setProtectedPositions,\n  setRewards,\n} from 'redux/liquidity/liquidity';\nimport {\n  lockedAvailableBnt$,\n  protectedPositions$,\n  rewards$,\n} from './liquidity';\n\nexport const subscribeToObservables = (dispatch: any) => {\n  tokenLists$.subscribe((tokenLists) => {\n    dispatch(setTokenLists(tokenLists));\n  });\n\n  tokensNoBalance$\n    .pipe(take(1))\n    .toPromise()\n    .then((tokenList) => dispatch(setTokenList(tokenList)));\n\n  loadingBalances$.subscribe((loading) =>\n    dispatch(setLoadingBalances(loading))\n  );\n\n  const userListIds = getTokenListLS();\n  if (userListIds.length === 0) {\n    const twoLists = [listOfLists[0].name, listOfLists[1].name];\n    setTokenListLS(twoLists);\n    userPreferredListIds$.next(twoLists);\n  } else userPreferredListIds$.next(userListIds);\n\n  tokens$.subscribe((tokenList) => {\n    dispatch(setTokenList(tokenList));\n  });\n\n  tokenListMerged$.subscribe((tokenList) => {\n    dispatch(setAllTokens(tokenList));\n  });\n\n  apiTokens$.subscribe((tokens) => {\n    dispatch(setApiTokens(tokens));\n  });\n\n  keeperDaoTokens$.subscribe((keeperDaoTokens) => {\n    dispatch(setKeeperDaoTokens(keeperDaoTokens));\n  });\n\n  pools$.subscribe((pools) => {\n    dispatch(setPools(pools));\n  });\n\n  statistics$.subscribe((stats) => {\n    dispatch(setStats(stats));\n  });\n\n  bntPrice$.subscribe((bntPrice) => {\n    dispatch(setBntPrice(bntPrice));\n  });\n\n  protectedPositions$.subscribe((protectedPositions) => {\n    dispatch(setProtectedPositions(protectedPositions));\n  });\n\n  rewards$.subscribe((rewards) => {\n    dispatch(setRewards(rewards));\n  });\n\n  poolTokens$.subscribe((poolTokens) => dispatch(setPoolTokens(poolTokens)));\n\n  lockedAvailableBnt$.subscribe((lockedAvailableBnt) => {\n    if (lockedAvailableBnt) {\n      dispatch(setLockedAvailableBNT(lockedAvailableBnt));\n    }\n  });\n\n  loadingPositions$.subscribe((loadingPositions) =>\n    dispatch(setLoadingPositions(loadingPositions))\n  );\n  loadingRewards$.subscribe((loadingRewards) =>\n    dispatch(setLoadingRewards(loadingRewards))\n  );\n  loadingLockedBnt$.subscribe((loadingLockedBnt) =>\n    dispatch(setLoadingLockedBnt(loadingLockedBnt))\n  );\n};\n"]},"metadata":{},"sourceType":"module"}