{"ast":null,"code":"import { calculatePercentageChange } from 'utils/formulas';\nimport { get7DaysAgo } from 'utils/pureFunctions';\nimport { EthNetworks } from './types';\nimport { BigNumber } from 'bignumber.js';\nimport emptyTokenLogo from 'assets/logos/empty-token.webp';\nexport const ethToken = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE';\nexport const zeroAddress = '0x0000000000000000000000000000000000000000';\nexport const wethToken = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2';\nexport const multiCallContract = '0x5ba1e12693dc8f9c48aad8770482f4739beed696';\nexport const ropstenImage = emptyTokenLogo;\nconst gasBuffer = 1.05;\nexport const changeGas = gasEstimation => new BigNumber(gasEstimation).times(gasBuffer).toFixed(0);\nexport const buildWethToken = apiTokens => {\n  const eth = apiTokens && apiTokens.find(x => x.dlt_id === ethToken);\n  return {\n    symbol: 'WETH',\n    dlt_id: wethToken,\n    liquidity: eth ? eth.liquidity : {\n      usd: null\n    },\n    rate: eth ? eth.rate : {\n      usd: null\n    },\n    rate_24h_ago: eth ? eth.rate_24h_ago : {\n      usd: null\n    },\n    decimals: eth ? eth.decimals : 18,\n    rates_7d: eth ? eth.rates_7d : []\n  };\n};\nexport const getEthToken = (apiTokens, pools) => {\n  const eth = apiTokens.find(apiToken => apiToken.dlt_id === ethToken);\n\n  if (eth) {\n    const price = eth.rate.usd;\n    const price_24h = eth.rate_24h_ago.usd;\n    const priceChanged = price && price_24h && Number(price_24h) !== 0 ? calculatePercentageChange(Number(price), Number(price_24h)) : 0;\n    const pool = pools.find(p => p.reserves.find(r => r.address === eth.dlt_id));\n    const usdVolume24 = pool ? pool.volume_24h.usd : null;\n    const seven_days_ago = get7DaysAgo().getUTCSeconds();\n    return {\n      address: eth.dlt_id,\n      logoURI: 'https://cryptologos.cc/logos/ethereum-eth-logo.svg',\n      name: 'Ethereum',\n      chainId: 1,\n      balance: null,\n      symbol: eth.symbol,\n      decimals: eth.decimals,\n      usdPrice: price,\n      liquidity: eth.liquidity.usd,\n      usd_24h_ago: price_24h,\n      price_change_24: priceChanged,\n      price_history_7d: eth.rates_7d.filter(x => !!x).map((x, i) => ({\n        value: Number(x),\n        time: seven_days_ago + i * 360\n      })),\n      usd_volume_24: usdVolume24,\n      isProtected: true\n    };\n  }\n\n  return null;\n};\nexport const getTokenWithoutImage = token => {\n  const usdPrice = token.rate.usd;\n  const usd_24h_ago = token.rate_24h_ago.usd;\n  const price_change_24 = usdPrice && usd_24h_ago && Number(usd_24h_ago) !== 0 ? calculatePercentageChange(Number(usdPrice), Number(usd_24h_ago)) : 0;\n  const seven_days_ago = get7DaysAgo().getUTCSeconds();\n  return {\n    address: token.dlt_id,\n    logoURI: ropstenImage,\n    name: token.symbol,\n    chainId: 1,\n    balance: null,\n    symbol: token.symbol,\n    decimals: token.decimals,\n    usdPrice,\n    liquidity: token.liquidity.usd,\n    usd_24h_ago,\n    price_change_24,\n    price_history_7d: token.rates_7d.filter(x => !!x).map((x, i) => ({\n      value: Number(x),\n      time: seven_days_ago + i * 360\n    })),\n    usd_volume_24: '0',\n    isProtected: true\n  };\n};\nexport const getNetworkVariables = ethNetwork => {\n  switch (ethNetwork) {\n    case EthNetworks.Mainnet:\n      return {\n        network: EthNetworks.Mainnet,\n        contractRegistry: '0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4',\n        bntToken: '0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C',\n        govToken: '0x48Fb253446873234F2fEBbF9BdeAA72d9d387f94',\n        converterContractForMaths: '0xe870d00176b2c71afd4c43cea550228e22be4abd',\n        governanceContractAddress: '0x892f481bd6e9d7d26ae365211d9b45175d5d00e4',\n        etherscanUrl: 'https://etherscan.io'\n      };\n\n    case EthNetworks.Ropsten:\n      return {\n        network: EthNetworks.Ropsten,\n        contractRegistry: '0xA6DB4B0963C37Bc959CbC0a874B5bDDf2250f26F',\n        bntToken: '0xF35cCfbcE1228014F66809EDaFCDB836BFE388f5',\n        govToken: '0x83ec8129b1F54BA5b0f47bD902A79C803e20A249',\n        converterContractForMaths: '0x9a36b31ca768a860dab246cf080e7f042d1b7c0f',\n        governanceContractAddress: '0x161f28A417361961E946Ae03EF0A425008b7F01B',\n        etherscanUrl: 'https://ropsten.etherscan.io'\n      };\n  }\n};\nexport const bntToken = network => {\n  const vars = getNetworkVariables(network);\n  return vars.bntToken;\n};\nconst ropstenTokenEmptyProps = {\n  logoURI: ropstenImage,\n  chainId: 3,\n  balance: null,\n  decimals: 18,\n  usdPrice: '0',\n  liquidity: '0',\n  usd_24h_ago: '0',\n  price_change_24: 0,\n  price_history_7d: [{\n    time: 1630000000,\n    value: 0\n  }],\n  usd_volume_24: '0',\n  isProtected: false\n}; //Used to test create pool\n\nexport const ropstenTokens = [{\n  address: '0x2080dD00237F1E2F3e95d501ae4a925496DBb200',\n  name: 'Test4',\n  symbol: 'TEST4',\n  ...ropstenTokenEmptyProps\n}, {\n  address: '0xf4e1355D07a953192c17010a46dfA1aaBB36BCf0',\n  name: 'Test5',\n  symbol: 'TEST5',\n  ...ropstenTokenEmptyProps\n}, {\n  address: '0xA79A95a1Cc1a586F8E1A069ff7D17AB6dB6acf3C',\n  name: 'Test6',\n  symbol: 'TEST6',\n  ...ropstenTokenEmptyProps\n}, {\n  address: '0x07d79EDBC43dFB94a6Db1dd99Bf06E7C06272687',\n  name: 'PenTest Token',\n  symbol: 'PENTEST',\n  ...ropstenTokenEmptyProps\n}, {\n  address: '0xb63303eAc901dBFaC854C531Ce4B281542F85364',\n  name: 'DOZZ Token',\n  symbol: 'DOZZ',\n  ...ropstenTokenEmptyProps\n}];","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/web3/config.ts"],"names":["calculatePercentageChange","get7DaysAgo","EthNetworks","BigNumber","emptyTokenLogo","ethToken","zeroAddress","wethToken","multiCallContract","ropstenImage","gasBuffer","changeGas","gasEstimation","times","toFixed","buildWethToken","apiTokens","eth","find","x","dlt_id","symbol","liquidity","usd","rate","rate_24h_ago","decimals","rates_7d","getEthToken","pools","apiToken","price","price_24h","priceChanged","Number","pool","p","reserves","r","address","usdVolume24","volume_24h","seven_days_ago","getUTCSeconds","logoURI","name","chainId","balance","usdPrice","usd_24h_ago","price_change_24","price_history_7d","filter","map","i","value","time","usd_volume_24","isProtected","getTokenWithoutImage","token","getNetworkVariables","ethNetwork","Mainnet","network","contractRegistry","bntToken","govToken","converterContractForMaths","governanceContractAddress","etherscanUrl","Ropsten","vars","ropstenTokenEmptyProps","ropstenTokens"],"mappings":"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","sourcesContent":["import { APIToken, APIPool } from 'services/api/bancor';\nimport { UTCTimestamp } from 'lightweight-charts';\nimport { Token } from 'services/observables/tokens';\nimport { calculatePercentageChange } from 'utils/formulas';\nimport { get7DaysAgo } from 'utils/pureFunctions';\nimport { EthNetworks } from './types';\nimport { BigNumber } from 'bignumber.js';\nimport emptyTokenLogo from 'assets/logos/empty-token.webp';\n\nexport interface EthNetworkVariables {\n  network: EthNetworks;\n  contractRegistry: string;\n  bntToken: string;\n  converterContractForMaths: string;\n  governanceContractAddress: string;\n  etherscanUrl: string;\n  govToken: string;\n}\n\nexport const ethToken: string = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE';\nexport const zeroAddress: string = '0x0000000000000000000000000000000000000000';\nexport const wethToken: string = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2';\nexport const multiCallContract: string =\n  '0x5ba1e12693dc8f9c48aad8770482f4739beed696';\nexport const ropstenImage: string = emptyTokenLogo;\n\nconst gasBuffer = 1.05;\n\nexport const changeGas = (gasEstimation: string) =>\n  new BigNumber(gasEstimation).times(gasBuffer).toFixed(0);\n\nexport const buildWethToken = (apiTokens?: APIToken[]): APIToken => {\n  const eth = apiTokens && apiTokens.find((x) => x.dlt_id === ethToken);\n\n  return {\n    symbol: 'WETH',\n    dlt_id: wethToken,\n    liquidity: eth ? eth.liquidity : { usd: null },\n    rate: eth ? eth.rate : { usd: null },\n    rate_24h_ago: eth ? eth.rate_24h_ago : { usd: null },\n    decimals: eth ? eth.decimals : 18,\n    rates_7d: eth ? eth.rates_7d : [],\n  };\n};\n\nexport const getEthToken = (\n  apiTokens: APIToken[],\n  pools: APIPool[]\n): Token | null => {\n  const eth = apiTokens.find((apiToken) => apiToken.dlt_id === ethToken);\n  if (eth) {\n    const price = eth.rate.usd;\n    const price_24h = eth.rate_24h_ago.usd;\n    const priceChanged =\n      price && price_24h && Number(price_24h) !== 0\n        ? calculatePercentageChange(Number(price), Number(price_24h))\n        : 0;\n    const pool = pools.find((p) =>\n      p.reserves.find((r) => r.address === eth.dlt_id)\n    );\n    const usdVolume24 = pool ? pool.volume_24h.usd : null;\n    const seven_days_ago = get7DaysAgo().getUTCSeconds();\n\n    return {\n      address: eth.dlt_id,\n      logoURI: 'https://cryptologos.cc/logos/ethereum-eth-logo.svg',\n      name: 'Ethereum',\n      chainId: 1,\n      balance: null,\n      symbol: eth.symbol,\n      decimals: eth.decimals,\n      usdPrice: price,\n      liquidity: eth.liquidity.usd,\n      usd_24h_ago: price_24h,\n      price_change_24: priceChanged,\n      price_history_7d: eth.rates_7d\n        .filter((x) => !!x)\n        .map((x, i) => ({\n          value: Number(x),\n          time: (seven_days_ago + i * 360) as UTCTimestamp,\n        })),\n      usd_volume_24: usdVolume24,\n      isProtected: true,\n    };\n  }\n\n  return null;\n};\n\nexport const getTokenWithoutImage = (token: APIToken): Token => {\n  const usdPrice = token.rate.usd;\n  const usd_24h_ago = token.rate_24h_ago.usd;\n  const price_change_24 =\n    usdPrice && usd_24h_ago && Number(usd_24h_ago) !== 0\n      ? calculatePercentageChange(Number(usdPrice), Number(usd_24h_ago))\n      : 0;\n  const seven_days_ago = get7DaysAgo().getUTCSeconds();\n\n  return {\n    address: token.dlt_id,\n    logoURI: ropstenImage,\n    name: token.symbol,\n    chainId: 1,\n    balance: null,\n    symbol: token.symbol,\n    decimals: token.decimals,\n    usdPrice,\n    liquidity: token.liquidity.usd,\n    usd_24h_ago,\n    price_change_24,\n    price_history_7d: token.rates_7d\n      .filter((x) => !!x)\n      .map((x, i) => ({\n        value: Number(x),\n        time: (seven_days_ago + i * 360) as UTCTimestamp,\n      })),\n    usd_volume_24: '0',\n    isProtected: true,\n  };\n};\n\nexport const getNetworkVariables = (\n  ethNetwork: EthNetworks\n): EthNetworkVariables => {\n  switch (ethNetwork) {\n    case EthNetworks.Mainnet:\n      return {\n        network: EthNetworks.Mainnet,\n        contractRegistry: '0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4',\n        bntToken: '0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C',\n        govToken: '0x48Fb253446873234F2fEBbF9BdeAA72d9d387f94',\n        converterContractForMaths: '0xe870d00176b2c71afd4c43cea550228e22be4abd',\n        governanceContractAddress: '0x892f481bd6e9d7d26ae365211d9b45175d5d00e4',\n        etherscanUrl: 'https://etherscan.io',\n      };\n    case EthNetworks.Ropsten:\n      return {\n        network: EthNetworks.Ropsten,\n        contractRegistry: '0xA6DB4B0963C37Bc959CbC0a874B5bDDf2250f26F',\n        bntToken: '0xF35cCfbcE1228014F66809EDaFCDB836BFE388f5',\n        govToken: '0x83ec8129b1F54BA5b0f47bD902A79C803e20A249',\n        converterContractForMaths: '0x9a36b31ca768a860dab246cf080e7f042d1b7c0f',\n        governanceContractAddress: '0x161f28A417361961E946Ae03EF0A425008b7F01B',\n        etherscanUrl: 'https://ropsten.etherscan.io',\n      };\n  }\n};\n\nexport const bntToken = (network: EthNetworks): string => {\n  const vars = getNetworkVariables(network);\n  return vars.bntToken;\n};\n\nconst ropstenTokenEmptyProps = {\n  logoURI: ropstenImage,\n  chainId: 3,\n  balance: null,\n  decimals: 18,\n  usdPrice: '0',\n  liquidity: '0',\n  usd_24h_ago: '0',\n  price_change_24: 0,\n  price_history_7d: [{ time: 1630000000 as UTCTimestamp, value: 0 }],\n  usd_volume_24: '0',\n  isProtected: false,\n};\n\n//Used to test create pool\nexport const ropstenTokens: Token[] = [\n  {\n    address: '0x2080dD00237F1E2F3e95d501ae4a925496DBb200',\n    name: 'Test4',\n    symbol: 'TEST4',\n    ...ropstenTokenEmptyProps,\n  },\n  {\n    address: '0xf4e1355D07a953192c17010a46dfA1aaBB36BCf0',\n    name: 'Test5',\n    symbol: 'TEST5',\n    ...ropstenTokenEmptyProps,\n  },\n  {\n    address: '0xA79A95a1Cc1a586F8E1A069ff7D17AB6dB6acf3C',\n    name: 'Test6',\n    symbol: 'TEST6',\n    ...ropstenTokenEmptyProps,\n  },\n  {\n    address: '0x07d79EDBC43dFB94a6Db1dd99Bf06E7C06272687',\n    name: 'PenTest Token',\n    symbol: 'PENTEST',\n    ...ropstenTokenEmptyProps,\n  },\n  {\n    address: '0xb63303eAc901dBFaC854C531Ce4B281542F85364',\n    name: 'DOZZ Token',\n    symbol: 'DOZZ',\n    ...ropstenTokenEmptyProps,\n  },\n];\n"]},"metadata":{},"sourceType":"module"}