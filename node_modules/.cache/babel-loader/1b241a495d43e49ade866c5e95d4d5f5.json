{"ast":null,"code":"import { BigNumber } from 'bignumber.js';\nimport { combineLatest } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\nimport { fetchLockedAvailableBalances } from 'services/web3/lockedbnt/lockedbnt';\nimport { fetchProtectedPositions } from 'services/web3/protection/positions';\nimport { fetchPendingRewards, fetchTotalClaimedRewards } from 'services/web3/protection/rewards';\nimport { switchMapIgnoreThrow } from './customOperators';\nimport { fifteenSeconds$ } from './timers';\nimport { pools$ } from './tokens';\nimport { setLoadingPositions, setLoadingRewards, setLoadingLockedBnt, user$ } from './user';\nexport const protectedPositions$ = combineLatest([pools$, user$]).pipe(switchMapIgnoreThrow(async _ref => {\n  let [pools, user] = _ref;\n\n  if (user) {\n    const positions = await fetchProtectedPositions(pools, user);\n    setLoadingPositions(false);\n    return positions;\n  }\n\n  setLoadingPositions(false);\n  return [];\n}), shareReplay(1));\nexport const rewards$ = combineLatest([user$, fifteenSeconds$]).pipe(switchMapIgnoreThrow(async _ref2 => {\n  let [user, _] = _ref2;\n\n  if (user) {\n    const pendingRewards = await fetchPendingRewards(user);\n    const claimedRewards = await fetchTotalClaimedRewards(user);\n    const totalRewards = new BigNumber(pendingRewards).plus(claimedRewards).toString();\n    setLoadingRewards(false);\n    return {\n      pendingRewards,\n      totalRewards\n    };\n  }\n\n  setLoadingRewards(false);\n}), shareReplay(1));\nexport const lockedAvailableBnt$ = combineLatest([user$]).pipe(switchMapIgnoreThrow(async _ref3 => {\n  let [user] = _ref3;\n\n  if (user) {\n    setLoadingRewards(true);\n    setLoadingPositions(true);\n    setLoadingLockedBnt(true);\n    const lockedAvailableBalances = await fetchLockedAvailableBalances(user);\n    setLoadingLockedBnt(false);\n    return lockedAvailableBalances;\n  }\n\n  setLoadingLockedBnt(false);\n}), shareReplay(1));","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/observables/liquidity.ts"],"names":["BigNumber","combineLatest","shareReplay","fetchLockedAvailableBalances","fetchProtectedPositions","fetchPendingRewards","fetchTotalClaimedRewards","switchMapIgnoreThrow","fifteenSeconds$","pools$","setLoadingPositions","setLoadingRewards","setLoadingLockedBnt","user$","protectedPositions$","pipe","pools","user","positions","rewards$","_","pendingRewards","claimedRewards","totalRewards","plus","toString","lockedAvailableBnt$","lockedAvailableBalances"],"mappings":"AAAA,SAASA,SAAT,QAA0B,cAA1B;AACA,SAASC,aAAT,QAA8B,MAA9B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,4BAAT,QAA6C,mCAA7C;AACA,SAASC,uBAAT,QAAwC,oCAAxC;AACA,SACEC,mBADF,EAEEC,wBAFF,QAGO,kCAHP;AAIA,SAASC,oBAAT,QAAqC,mBAArC;AACA,SAASC,eAAT,QAAgC,UAAhC;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SACEC,mBADF,EAEEC,iBAFF,EAGEC,mBAHF,EAIEC,KAJF,QAKO,QALP;AAOA,OAAO,MAAMC,mBAAmB,GAAGb,aAAa,CAAC,CAACQ,MAAD,EAASI,KAAT,CAAD,CAAb,CAA+BE,IAA/B,CACjCR,oBAAoB,CAAC,cAAyB;AAAA,MAAlB,CAACS,KAAD,EAAQC,IAAR,CAAkB;;AAC5C,MAAIA,IAAJ,EAAU;AACR,UAAMC,SAAS,GAAG,MAAMd,uBAAuB,CAACY,KAAD,EAAQC,IAAR,CAA/C;AACAP,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACA,WAAOQ,SAAP;AACD;;AAEDR,EAAAA,mBAAmB,CAAC,KAAD,CAAnB;AAEA,SAAO,EAAP;AACD,CAVmB,CADa,EAYjCR,WAAW,CAAC,CAAD,CAZsB,CAA5B;AAoBP,OAAO,MAAMiB,QAAQ,GAAGlB,aAAa,CAAC,CAACY,KAAD,EAAQL,eAAR,CAAD,CAAb,CAAwCO,IAAxC,CACtBR,oBAAoB,CAAC,eAAqB;AAAA,MAAd,CAACU,IAAD,EAAOG,CAAP,CAAc;;AACxC,MAAIH,IAAJ,EAAU;AACR,UAAMI,cAAc,GAAG,MAAMhB,mBAAmB,CAACY,IAAD,CAAhD;AACA,UAAMK,cAAc,GAAG,MAAMhB,wBAAwB,CAACW,IAAD,CAArD;AAEA,UAAMM,YAAY,GAAG,IAAIvB,SAAJ,CAAcqB,cAAd,EAClBG,IADkB,CACbF,cADa,EAElBG,QAFkB,EAArB;AAIAd,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AAEA,WAAO;AACLU,MAAAA,cADK;AAELE,MAAAA;AAFK,KAAP;AAID;;AAEDZ,EAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD,CAlBmB,CADE,EAoBtBT,WAAW,CAAC,CAAD,CApBW,CAAjB;AAuBP,OAAO,MAAMwB,mBAAmB,GAAGzB,aAAa,CAAC,CAACY,KAAD,CAAD,CAAb,CAAuBE,IAAvB,CACjCR,oBAAoB,CAAC,eAAkB;AAAA,MAAX,CAACU,IAAD,CAAW;;AACrC,MAAIA,IAAJ,EAAU;AACRN,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAD,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAE,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACA,UAAMe,uBAAuB,GAAG,MAAMxB,4BAA4B,CAACc,IAAD,CAAlE;AACAL,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACA,WAAOe,uBAAP;AACD;;AACDf,EAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,CAVmB,CADa,EAYjCV,WAAW,CAAC,CAAD,CAZsB,CAA5B","sourcesContent":["import { BigNumber } from 'bignumber.js';\nimport { combineLatest } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\nimport { fetchLockedAvailableBalances } from 'services/web3/lockedbnt/lockedbnt';\nimport { fetchProtectedPositions } from 'services/web3/protection/positions';\nimport {\n  fetchPendingRewards,\n  fetchTotalClaimedRewards,\n} from 'services/web3/protection/rewards';\nimport { switchMapIgnoreThrow } from './customOperators';\nimport { fifteenSeconds$ } from './timers';\nimport { pools$ } from './tokens';\nimport {\n  setLoadingPositions,\n  setLoadingRewards,\n  setLoadingLockedBnt,\n  user$,\n} from './user';\n\nexport const protectedPositions$ = combineLatest([pools$, user$]).pipe(\n  switchMapIgnoreThrow(async ([pools, user]) => {\n    if (user) {\n      const positions = await fetchProtectedPositions(pools, user);\n      setLoadingPositions(false);\n      return positions;\n    }\n\n    setLoadingPositions(false);\n\n    return [];\n  }),\n  shareReplay(1)\n);\n\nexport interface Rewards {\n  pendingRewards: string;\n  totalRewards: string;\n}\n\nexport const rewards$ = combineLatest([user$, fifteenSeconds$]).pipe(\n  switchMapIgnoreThrow(async ([user, _]) => {\n    if (user) {\n      const pendingRewards = await fetchPendingRewards(user);\n      const claimedRewards = await fetchTotalClaimedRewards(user);\n\n      const totalRewards = new BigNumber(pendingRewards)\n        .plus(claimedRewards)\n        .toString();\n\n      setLoadingRewards(false);\n\n      return {\n        pendingRewards,\n        totalRewards,\n      };\n    }\n\n    setLoadingRewards(false);\n  }),\n  shareReplay(1)\n);\n\nexport const lockedAvailableBnt$ = combineLatest([user$]).pipe(\n  switchMapIgnoreThrow(async ([user]) => {\n    if (user) {\n      setLoadingRewards(true);\n      setLoadingPositions(true);\n      setLoadingLockedBnt(true);\n      const lockedAvailableBalances = await fetchLockedAvailableBalances(user);\n      setLoadingLockedBnt(false);\n      return lockedAvailableBalances;\n    }\n    setLoadingLockedBnt(false);\n  }),\n  shareReplay(1)\n);\n"]},"metadata":{},"sourceType":"module"}