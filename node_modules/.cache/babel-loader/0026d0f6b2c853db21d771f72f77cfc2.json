{"ast":null,"code":"import { stakingRewards$ } from 'services/observables/contracts';\nimport { take } from 'rxjs/operators';\nimport { expandToken, shrinkToken } from 'utils/formulas';\nimport { StakingRewards__factory } from '../abis/types';\nimport { web3, writeWeb3 } from '..';\nimport { multicall } from '../multicall/multicall';\nimport { ErrorCode } from '../types';\nimport { changeGas } from '../config';\nexport const stakeRewards = async _ref => {\n  let {\n    amount,\n    poolId,\n    onHash,\n    onCompleted,\n    rejected,\n    failed\n  } = _ref;\n\n  try {\n    const contractAddress = await stakingRewards$.pipe(take(1)).toPromise();\n    const contract = StakingRewards__factory.connect(contractAddress, writeWeb3.signer);\n    const estimate = await contract.estimateGas.stakeRewards(expandToken(amount, 18), poolId);\n    const gasLimit = changeGas(estimate.toString());\n    const tx = await contract.stakeRewards(expandToken(amount, 18), poolId, {\n      gasLimit\n    });\n    onHash(tx.hash);\n    await tx.wait();\n    onCompleted();\n  } catch (e) {\n    console.error(e);\n    if (e.code === ErrorCode.DeniedTx) rejected();else failed(e.message);\n  }\n};\nexport const stakePoolLevelRewards = async _ref2 => {\n  let {\n    amount,\n    poolId,\n    reserveId,\n    newPoolId,\n    onHash,\n    onCompleted,\n    rejected,\n    failed\n  } = _ref2;\n\n  try {\n    const contractAddress = await stakingRewards$.pipe(take(1)).toPromise();\n    const contract = StakingRewards__factory.connect(contractAddress, writeWeb3.signer);\n    const tx = await contract.stakeReserveRewards(poolId, reserveId, expandToken(amount, 18), newPoolId);\n    onHash(tx.hash);\n    await tx.wait();\n    onCompleted();\n  } catch (e) {\n    console.error(e);\n    if (e.code === ErrorCode.DeniedTx) rejected();else failed(e.message);\n  }\n};\nexport const claimRewards = async () => {\n  const contractAddress = await stakingRewards$.pipe(take(1)).toPromise();\n  const contract = StakingRewards__factory.connect(contractAddress, writeWeb3.signer);\n  const estimate = await contract.estimateGas.claimRewards();\n  const gasLimit = changeGas(estimate.toString());\n  return (await contract.claimRewards({\n    gasLimit\n  })).hash;\n};\nexport const fetchTotalClaimedRewards = async currentUser => {\n  const contractAddress = await stakingRewards$.pipe(take(1)).toPromise();\n  const contract = StakingRewards__factory.connect(contractAddress, web3.provider);\n  const result = await contract.totalClaimedRewards(currentUser);\n  return shrinkToken(result.toString(), 18);\n};\nexport const fetchPendingRewards = async currentUser => {\n  const contractAddress = await stakingRewards$.pipe(take(1)).toPromise();\n  const contract = StakingRewards__factory.connect(contractAddress, web3.provider);\n  const result = await contract.pendingRewards(currentUser);\n  return shrinkToken(result.toString(), 18);\n};\nexport const fetchedRewardsMultiplier = async (user, positions) => {\n  const contractAddress = await stakingRewards$.pipe(take(1)).toPromise();\n  const contract = StakingRewards__factory.connect(contractAddress, web3.provider);\n  const calls = positions.map(position => buildRewardsMultiplierCall(contract, user, position));\n  const res = await multicall(calls);\n  if (res) return res.map((x, i) => ({\n    id: positions[i].id,\n    rewardsMultiplier: shrinkToken(x.toString(), 6)\n  }));\n  return [];\n};\n\nconst buildRewardsMultiplierCall = (contract, user, position) => {\n  return {\n    contractAddress: contract.address,\n    interface: contract.interface,\n    methodName: 'rewardsMultiplier',\n    methodParameters: [user, position.poolToken, position.reserveToken.address]\n  };\n};\n\nexport const fetchedPendingRewards = async (user, positions) => {\n  const contractAddress = await stakingRewards$.pipe(take(1)).toPromise();\n  const contract = StakingRewards__factory.connect(contractAddress, web3.provider);\n  const calls = positions.map(position => buildPnedingRewardsCall(contract, user, position));\n  const res = await multicall(calls);\n  if (res) return res.map((x, i) => ({\n    id: positions[i].id,\n    rewardsAmount: shrinkToken(x.toString(), 18)\n  }));\n  return [];\n};\n\nconst buildPnedingRewardsCall = (contract, user, position) => {\n  return {\n    contractAddress: contract.address,\n    interface: contract.interface,\n    methodName: 'pendingReserveRewards',\n    methodParameters: [user, position.poolToken, position.reserveToken.address]\n  };\n};","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/web3/protection/rewards.ts"],"names":["stakingRewards$","take","expandToken","shrinkToken","StakingRewards__factory","web3","writeWeb3","multicall","ErrorCode","changeGas","stakeRewards","amount","poolId","onHash","onCompleted","rejected","failed","contractAddress","pipe","toPromise","contract","connect","signer","estimate","estimateGas","gasLimit","toString","tx","hash","wait","e","console","error","code","DeniedTx","message","stakePoolLevelRewards","reserveId","newPoolId","stakeReserveRewards","claimRewards","fetchTotalClaimedRewards","currentUser","provider","result","totalClaimedRewards","fetchPendingRewards","pendingRewards","fetchedRewardsMultiplier","user","positions","calls","map","position","buildRewardsMultiplierCall","res","x","i","id","rewardsMultiplier","address","interface","methodName","methodParameters","poolToken","reserveToken","fetchedPendingRewards","buildPnedingRewardsCall","rewardsAmount"],"mappings":"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","sourcesContent":["import { stakingRewards$ } from 'services/observables/contracts';\nimport { take } from 'rxjs/operators';\nimport { expandToken, shrinkToken } from 'utils/formulas';\nimport { StakingRewards, StakingRewards__factory } from '../abis/types';\nimport { web3, writeWeb3 } from '..';\nimport { ProtectedLiquidity } from './positions';\nimport { multicall, MultiCall } from '../multicall/multicall';\nimport { ErrorCode } from '../types';\nimport { changeGas } from '../config';\n\nexport const stakeRewards = async ({\n  amount,\n  poolId,\n  onHash,\n  onCompleted,\n  rejected,\n  failed,\n}: {\n  amount: string;\n  poolId: string;\n  onHash: (txHash: string) => void;\n  onCompleted: Function;\n  rejected: Function;\n  failed: (error: string) => void;\n}) => {\n  try {\n    const contractAddress = await stakingRewards$.pipe(take(1)).toPromise();\n\n    const contract = StakingRewards__factory.connect(\n      contractAddress,\n      writeWeb3.signer\n    );\n\n    const estimate = await contract.estimateGas.stakeRewards(\n      expandToken(amount, 18),\n      poolId\n    );\n    const gasLimit = changeGas(estimate.toString());\n\n    const tx = await contract.stakeRewards(expandToken(amount, 18), poolId, {\n      gasLimit,\n    });\n    onHash(tx.hash);\n    await tx.wait();\n    onCompleted();\n  } catch (e: any) {\n    console.error(e);\n    if (e.code === ErrorCode.DeniedTx) rejected();\n    else failed(e.message);\n  }\n};\n\nexport const stakePoolLevelRewards = async ({\n  amount,\n  poolId,\n  reserveId,\n  newPoolId,\n  onHash,\n  onCompleted,\n  rejected,\n  failed,\n}: {\n  amount: string;\n  poolId: string;\n  reserveId: string;\n  newPoolId: string;\n  onHash: (txHash: string) => void;\n  onCompleted: Function;\n  rejected: Function;\n  failed: (error: string) => void;\n}) => {\n  try {\n    const contractAddress = await stakingRewards$.pipe(take(1)).toPromise();\n    const contract = StakingRewards__factory.connect(\n      contractAddress,\n      writeWeb3.signer\n    );\n\n    const tx = await contract.stakeReserveRewards(\n      poolId,\n      reserveId,\n      expandToken(amount, 18),\n      newPoolId\n    );\n    onHash(tx.hash);\n    await tx.wait();\n    onCompleted();\n  } catch (e: any) {\n    console.error(e);\n    if (e.code === ErrorCode.DeniedTx) rejected();\n    else failed(e.message);\n  }\n};\n\nexport const claimRewards = async (): Promise<string> => {\n  const contractAddress = await stakingRewards$.pipe(take(1)).toPromise();\n  const contract = StakingRewards__factory.connect(\n    contractAddress,\n    writeWeb3.signer\n  );\n\n  const estimate = await contract.estimateGas.claimRewards();\n  const gasLimit = changeGas(estimate.toString());\n\n  return (await contract.claimRewards({ gasLimit })).hash;\n};\n\nexport const fetchTotalClaimedRewards = async (\n  currentUser: string\n): Promise<string> => {\n  const contractAddress = await stakingRewards$.pipe(take(1)).toPromise();\n  const contract = StakingRewards__factory.connect(\n    contractAddress,\n    web3.provider\n  );\n  const result = await contract.totalClaimedRewards(currentUser);\n\n  return shrinkToken(result.toString(), 18);\n};\n\nexport const fetchPendingRewards = async (\n  currentUser: string\n): Promise<string> => {\n  const contractAddress = await stakingRewards$.pipe(take(1)).toPromise();\n  const contract = StakingRewards__factory.connect(\n    contractAddress,\n    web3.provider\n  );\n  const result = await contract.pendingRewards(currentUser);\n\n  return shrinkToken(result.toString(), 18);\n};\n\nexport const fetchedRewardsMultiplier = async (\n  user: string,\n  positions: ProtectedLiquidity[]\n) => {\n  const contractAddress = await stakingRewards$.pipe(take(1)).toPromise();\n  const contract = StakingRewards__factory.connect(\n    contractAddress,\n    web3.provider\n  );\n  const calls = positions.map((position) =>\n    buildRewardsMultiplierCall(contract, user, position)\n  );\n  const res = await multicall(calls);\n  if (res)\n    return res.map((x, i) => ({\n      id: positions[i].id,\n      rewardsMultiplier: shrinkToken(x.toString(), 6),\n    }));\n\n  return [];\n};\n\nconst buildRewardsMultiplierCall = (\n  contract: StakingRewards,\n  user: string,\n  position: ProtectedLiquidity\n): MultiCall => {\n  return {\n    contractAddress: contract.address,\n    interface: contract.interface,\n    methodName: 'rewardsMultiplier',\n    methodParameters: [user, position.poolToken, position.reserveToken.address],\n  };\n};\n\nexport const fetchedPendingRewards = async (\n  user: string,\n  positions: ProtectedLiquidity[]\n) => {\n  const contractAddress = await stakingRewards$.pipe(take(1)).toPromise();\n  const contract = StakingRewards__factory.connect(\n    contractAddress,\n    web3.provider\n  );\n\n  const calls = positions.map((position) =>\n    buildPnedingRewardsCall(contract, user, position)\n  );\n  const res = await multicall(calls);\n  if (res)\n    return res.map((x, i) => ({\n      id: positions[i].id,\n      rewardsAmount: shrinkToken(x.toString(), 18),\n    }));\n\n  return [];\n};\n\nconst buildPnedingRewardsCall = (\n  contract: StakingRewards,\n  user: string,\n  position: ProtectedLiquidity\n): MultiCall => {\n  return {\n    contractAddress: contract.address,\n    interface: contract.interface,\n    methodName: 'pendingReserveRewards',\n    methodParameters: [user, position.poolToken, position.reserveToken.address],\n  };\n};\n"]},"metadata":{},"sourceType":"module"}