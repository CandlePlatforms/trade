{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/earn/portfolio/liquidityProtection/rewards/stake/RewardsStakeCTA.tsx\",\n    _s = $RefreshSig$();\n\nimport { stakePoolLevelRewards, stakeRewards } from 'services/web3/protection/rewards';\nimport { useCallback, useState } from 'react';\nimport { rejectNotification, stakeRewardsFailedNotification, stakeRewardsNotification } from 'services/notifications/notifications';\nimport { useDispatch } from 'react-redux';\nimport { prettifyNumber } from 'utils/helperFunctions';\nimport { fetchProtectedPositions } from 'services/web3/protection/positions';\nimport { setLoadingPositions, setProtectedPositions } from 'redux/liquidity/liquidity';\nimport { useAppSelector } from 'redux/index';\nimport { useNavigation } from 'services/router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RewardsStakeCTA = _ref => {\n  _s();\n\n  let {\n    pool,\n    account,\n    errorBalance,\n    bntAmount,\n    position\n  } = _ref;\n  const [isBusy, setIsBusy] = useState(false);\n  const dispatch = useDispatch();\n  const {\n    pushPortfolio\n  } = useNavigation();\n  const pools = useAppSelector(state => state.pool.pools);\n  const onCompleted = useCallback(async () => {\n    dispatch(setLoadingPositions(true));\n    const positions = await fetchProtectedPositions(pools, account);\n    dispatch(setProtectedPositions(positions));\n    dispatch(setLoadingPositions(false));\n  }, [account, dispatch, pools]);\n  const onHash = useCallback(txHash => {\n    stakeRewardsNotification(dispatch, txHash, prettifyNumber(bntAmount), pool.name);\n    pushPortfolio();\n  }, [bntAmount, dispatch, pushPortfolio, pool.name]);\n\n  const handleClick = async () => {\n    try {\n      setIsBusy(true);\n\n      if (position) {\n        await stakePoolLevelRewards({\n          newPoolId: pool.pool_dlt_id,\n          reserveId: position.reserveToken.address,\n          amount: bntAmount,\n          poolId: position.pool.pool_dlt_id,\n          onHash: txHash => onHash(txHash),\n          onCompleted: () => onCompleted(),\n          rejected: () => rejectNotification(dispatch),\n          failed: () => stakeRewardsFailedNotification(dispatch)\n        });\n      } else {\n        await stakeRewards({\n          amount: bntAmount,\n          poolId: pool.pool_dlt_id,\n          onHash: txHash => onHash(txHash),\n          onCompleted: () => onCompleted(),\n          rejected: () => rejectNotification(dispatch),\n          failed: () => stakeRewardsFailedNotification(dispatch)\n        });\n      }\n    } catch (e) {\n      console.error('Staking Rewards failed with msg: ', e.message);\n    } finally {\n      setIsBusy(false);\n    }\n  };\n\n  const btnOptions = () => {\n    if (!account) {\n      return {\n        label: 'Login',\n        disabled: false,\n        variant: 'btn-primary'\n      };\n    } else if (isBusy) {\n      return {\n        label: 'Please wait ...',\n        disabled: true,\n        variant: 'btn-primary'\n      };\n    } else if (errorBalance) {\n      return {\n        label: errorBalance,\n        disabled: true,\n        variant: 'btn-error'\n      };\n    } else if (!bntAmount) {\n      return {\n        label: 'Enter amount',\n        disabled: true,\n        variant: 'btn-primary'\n      };\n    } else {\n      return {\n        label: 'Stake and Protect',\n        disabled: false,\n        variant: 'btn-primary'\n      };\n    }\n  };\n\n  const btn = btnOptions();\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => handleClick(),\n    disabled: btn.disabled,\n    className: `${btn.variant} rounded w-full mt-10`,\n    children: btn.label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RewardsStakeCTA, \"xO/Ztuolt8eWpJXGHDPonXSGbR8=\", false, function () {\n  return [useDispatch, useNavigation, useAppSelector];\n});\n\n_c = RewardsStakeCTA;\n\nvar _c;\n\n$RefreshReg$(_c, \"RewardsStakeCTA\");","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/earn/portfolio/liquidityProtection/rewards/stake/RewardsStakeCTA.tsx"],"names":["stakePoolLevelRewards","stakeRewards","useCallback","useState","rejectNotification","stakeRewardsFailedNotification","stakeRewardsNotification","useDispatch","prettifyNumber","fetchProtectedPositions","setLoadingPositions","setProtectedPositions","useAppSelector","useNavigation","RewardsStakeCTA","pool","account","errorBalance","bntAmount","position","isBusy","setIsBusy","dispatch","pushPortfolio","pools","state","onCompleted","positions","onHash","txHash","name","handleClick","newPoolId","pool_dlt_id","reserveId","reserveToken","address","amount","poolId","rejected","failed","e","console","error","message","btnOptions","label","disabled","variant","btn"],"mappings":"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","sourcesContent":["import { Pool } from 'services/observables/tokens';\nimport {\n  stakePoolLevelRewards,\n  stakeRewards,\n} from 'services/web3/protection/rewards';\nimport { useCallback, useState } from 'react';\nimport {\n  rejectNotification,\n  stakeRewardsFailedNotification,\n  stakeRewardsNotification,\n} from 'services/notifications/notifications';\nimport { useDispatch } from 'react-redux';\n\nimport { prettifyNumber } from 'utils/helperFunctions';\nimport {\n  fetchProtectedPositions,\n  ProtectedPositionGrouped,\n} from 'services/web3/protection/positions';\nimport {\n  setLoadingPositions,\n  setProtectedPositions,\n} from 'redux/liquidity/liquidity';\nimport { useAppSelector } from 'redux/index';\nimport { useNavigation } from 'services/router';\n\ninterface Props {\n  pool: Pool;\n  account?: string | null;\n  errorBalance: string;\n  bntAmount: string;\n  position?: ProtectedPositionGrouped;\n}\n\nexport const RewardsStakeCTA = ({\n  pool,\n  account,\n  errorBalance,\n  bntAmount,\n  position,\n}: Props) => {\n  const [isBusy, setIsBusy] = useState(false);\n  const dispatch = useDispatch();\n  const { pushPortfolio } = useNavigation();\n  const pools = useAppSelector<Pool[]>((state) => state.pool.pools);\n\n  const onCompleted = useCallback(async () => {\n    dispatch(setLoadingPositions(true));\n    const positions = await fetchProtectedPositions(pools, account!);\n    dispatch(setProtectedPositions(positions));\n    dispatch(setLoadingPositions(false));\n  }, [account, dispatch, pools]);\n\n  const onHash = useCallback(\n    (txHash: string) => {\n      stakeRewardsNotification(\n        dispatch,\n        txHash,\n        prettifyNumber(bntAmount),\n        pool.name\n      );\n      pushPortfolio();\n    },\n    [bntAmount, dispatch, pushPortfolio, pool.name]\n  );\n\n  const handleClick = async () => {\n    try {\n      setIsBusy(true);\n      if (position) {\n        await stakePoolLevelRewards({\n          newPoolId: pool.pool_dlt_id,\n          reserveId: position.reserveToken.address,\n          amount: bntAmount,\n          poolId: position.pool.pool_dlt_id,\n          onHash: (txHash) => onHash(txHash),\n          onCompleted: () => onCompleted(),\n          rejected: () => rejectNotification(dispatch),\n          failed: () => stakeRewardsFailedNotification(dispatch),\n        });\n      } else {\n        await stakeRewards({\n          amount: bntAmount,\n          poolId: pool.pool_dlt_id,\n          onHash: (txHash) => onHash(txHash),\n          onCompleted: () => onCompleted(),\n          rejected: () => rejectNotification(dispatch),\n          failed: () => stakeRewardsFailedNotification(dispatch),\n        });\n      }\n    } catch (e: any) {\n      console.error('Staking Rewards failed with msg: ', e.message);\n    } finally {\n      setIsBusy(false);\n    }\n  };\n\n  const btnOptions = () => {\n    if (!account) {\n      return { label: 'Login', disabled: false, variant: 'btn-primary' };\n    } else if (isBusy) {\n      return {\n        label: 'Please wait ...',\n        disabled: true,\n        variant: 'btn-primary',\n      };\n    } else if (errorBalance) {\n      return { label: errorBalance, disabled: true, variant: 'btn-error' };\n    } else if (!bntAmount) {\n      return {\n        label: 'Enter amount',\n        disabled: true,\n        variant: 'btn-primary',\n      };\n    } else {\n      return {\n        label: 'Stake and Protect',\n        disabled: false,\n        variant: 'btn-primary',\n      };\n    }\n  };\n\n  const btn = btnOptions();\n\n  return (\n    <button\n      onClick={() => handleClick()}\n      disabled={btn.disabled}\n      className={`${btn.variant} rounded w-full mt-10`}\n    >\n      {btn.label}\n    </button>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}