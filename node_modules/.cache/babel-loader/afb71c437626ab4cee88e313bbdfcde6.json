{"ast":null,"code":"import { getOrderDetails, sendOrders } from 'services/api/keeperDao';\nimport { NULL_ADDRESS } from '@0x/utils';\nimport { ErrorCode, EthNetworks, SignatureType } from 'services/web3/types';\nimport { wethToken } from 'services/web3/config';\nimport { writeWeb3 } from 'services/web3';\nimport BigNumber from 'bignumber.js';\nimport dayjs from 'utils/dayjs';\nimport { NotificationType } from 'redux/notification/notification';\nimport { expandToken } from 'utils/formulas';\nimport { Weth__factory } from '../abis/types';\nimport { utils } from 'ethers';\nexport const depositWeth = async amount => {\n  const tokenContract = Weth__factory.connect(wethToken, writeWeb3.signer);\n  const wei = expandToken(amount, 18);\n  const tx = await tokenContract.deposit({\n    value: wei\n  });\n  return tx.hash;\n};\nexport const withdrawWeth = async amount => {\n  const tokenContract = Weth__factory.connect(wethToken, writeWeb3.signer);\n  const wei = expandToken(amount, 18);\n\n  try {\n    const tx = await tokenContract.withdraw(wei);\n    return {\n      type: NotificationType.pending,\n      title: 'Pending Confirmation',\n      msg: 'Withdraw WETH is pending confirmation',\n      txHash: tx.hash,\n      updatedInfo: {\n        successTitle: 'Success!',\n        successMsg: `Your withdraw of ${amount} WETH has been confirmed`,\n        errorTitle: 'Transaction Failed',\n        errorMsg: `Withdrawing ${amount} WETH had failed. Please try again or contact support.`\n      }\n    };\n  } catch (e) {\n    if (e.code === ErrorCode.DeniedTx) return {\n      type: NotificationType.error,\n      title: 'Transaction Rejected',\n      msg: 'You rejected the transaction. If this was by mistake, please try again.'\n    };\n    return {\n      type: NotificationType.error,\n      title: 'Transaction Failed',\n      msg: `Withdrawing ${amount} WETH had failed. Please try again or contact support.`\n    };\n  }\n};\nexport const createOrder = async (fromToken, toToken, from, to, user, seconds) => {\n  const expiry = Number(dayjs().unix() + seconds);\n  const fromAmountWei = new BigNumber(expandToken(from, fromToken.decimals));\n  const toAmountWei = new BigNumber(expandToken(to, toToken.decimals));\n  const salt = Number(utils.hexlify(utils.randomBytes(6)));\n  const orderDetails = await getOrderDetails();\n  const order = {\n    maker: user.toLowerCase(),\n    taker: NULL_ADDRESS.toLocaleLowerCase(),\n    expiry,\n    makerAmount: fromAmountWei.toString(),\n    makerToken: fromToken.address.toLowerCase(),\n    pool: orderDetails.pool,\n    salt,\n    takerAmount: toAmountWei.toString(),\n    takerToken: toToken.address.toLowerCase(),\n    txOrigin: orderDetails.txOrigin\n  };\n  const signature = await writeWeb3.signer._signTypedData(domain(orderDetails.verifyingContract), types, order);\n  const splittedSign = utils.splitSignature(signature);\n  const jsonOrder = {\n    maker: order.maker.toLowerCase(),\n    taker: order.taker,\n    chainId: EthNetworks.Mainnet,\n    expiry: order.expiry,\n    makerAmount: order.makerAmount,\n    makerToken: order.makerToken.toLowerCase(),\n    pool: order.pool,\n    salt: order.salt,\n    signature: {\n      r: splittedSign.r,\n      s: splittedSign.s,\n      v: splittedSign.v,\n      signatureType: SignatureType.EIP712\n    },\n    takerAmount: order.takerAmount,\n    takerToken: order.takerToken.toLowerCase(),\n    txOrigin: order.txOrigin.toLowerCase(),\n    verifyingContract: orderDetails.verifyingContract.toLowerCase()\n  };\n  await sendOrders([jsonOrder]);\n};\n\nconst domain = exchangeProxyAddress => ({\n  chainId: 1,\n  verifyingContract: exchangeProxyAddress,\n  name: 'ZeroEx',\n  version: '1.0.0'\n});\n\nconst types = {\n  RfqOrder: [{\n    type: 'address',\n    name: 'makerToken'\n  }, {\n    type: 'address',\n    name: 'takerToken'\n  }, {\n    type: 'uint128',\n    name: 'makerAmount'\n  }, {\n    type: 'uint128',\n    name: 'takerAmount'\n  }, {\n    type: 'address',\n    name: 'maker'\n  }, {\n    type: 'address',\n    name: 'taker'\n  }, {\n    type: 'address',\n    name: 'txOrigin'\n  }, {\n    type: 'bytes32',\n    name: 'pool'\n  }, {\n    type: 'uint64',\n    name: 'expiry'\n  }, {\n    type: 'uint256',\n    name: 'salt'\n  }]\n};","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/web3/swap/limit.ts"],"names":["getOrderDetails","sendOrders","NULL_ADDRESS","ErrorCode","EthNetworks","SignatureType","wethToken","writeWeb3","BigNumber","dayjs","NotificationType","expandToken","Weth__factory","utils","depositWeth","amount","tokenContract","connect","signer","wei","tx","deposit","value","hash","withdrawWeth","withdraw","type","pending","title","msg","txHash","updatedInfo","successTitle","successMsg","errorTitle","errorMsg","e","code","DeniedTx","error","createOrder","fromToken","toToken","from","to","user","seconds","expiry","Number","unix","fromAmountWei","decimals","toAmountWei","salt","hexlify","randomBytes","orderDetails","order","maker","toLowerCase","taker","toLocaleLowerCase","makerAmount","toString","makerToken","address","pool","takerAmount","takerToken","txOrigin","signature","_signTypedData","domain","verifyingContract","types","splittedSign","splitSignature","jsonOrder","chainId","Mainnet","r","s","v","signatureType","EIP712","exchangeProxyAddress","name","version","RfqOrder"],"mappings":"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","sourcesContent":["import { Token } from 'services/observables/tokens';\nimport {\n  getOrderDetails,\n  RfqOrderJson,\n  sendOrders,\n} from 'services/api/keeperDao';\nimport { NULL_ADDRESS } from '@0x/utils';\nimport { ErrorCode, EthNetworks, SignatureType } from 'services/web3/types';\nimport { wethToken } from 'services/web3/config';\nimport { writeWeb3 } from 'services/web3';\nimport BigNumber from 'bignumber.js';\nimport dayjs from 'utils/dayjs';\nimport {\n  BaseNotification,\n  NotificationType,\n} from 'redux/notification/notification';\nimport { expandToken } from 'utils/formulas';\nimport { Weth__factory } from '../abis/types';\nimport { utils } from 'ethers';\n\nexport const depositWeth = async (amount: string) => {\n  const tokenContract = Weth__factory.connect(wethToken, writeWeb3.signer);\n  const wei = expandToken(amount, 18);\n\n  const tx = await tokenContract.deposit({ value: wei });\n  return tx.hash;\n};\n\nexport const withdrawWeth = async (\n  amount: string\n): Promise<BaseNotification> => {\n  const tokenContract = Weth__factory.connect(wethToken, writeWeb3.signer);\n  const wei = expandToken(amount, 18);\n\n  try {\n    const tx = await tokenContract.withdraw(wei);\n\n    return {\n      type: NotificationType.pending,\n      title: 'Pending Confirmation',\n      msg: 'Withdraw WETH is pending confirmation',\n      txHash: tx.hash,\n      updatedInfo: {\n        successTitle: 'Success!',\n        successMsg: `Your withdraw of ${amount} WETH has been confirmed`,\n        errorTitle: 'Transaction Failed',\n        errorMsg: `Withdrawing ${amount} WETH had failed. Please try again or contact support.`,\n      },\n    };\n  } catch (e: any) {\n    if (e.code === ErrorCode.DeniedTx)\n      return {\n        type: NotificationType.error,\n        title: 'Transaction Rejected',\n        msg: 'You rejected the transaction. If this was by mistake, please try again.',\n      };\n\n    return {\n      type: NotificationType.error,\n      title: 'Transaction Failed',\n      msg: `Withdrawing ${amount} WETH had failed. Please try again or contact support.`,\n    };\n  }\n};\n\nexport const createOrder = async (\n  fromToken: Token,\n  toToken: Token,\n  from: string,\n  to: string,\n  user: string,\n  seconds: number\n): Promise<void> => {\n  const expiry = Number(dayjs().unix() + seconds);\n  const fromAmountWei = new BigNumber(expandToken(from, fromToken.decimals));\n  const toAmountWei = new BigNumber(expandToken(to, toToken.decimals));\n  const salt = Number(utils.hexlify(utils.randomBytes(6)));\n  const orderDetails = await getOrderDetails();\n\n  const order = {\n    maker: user.toLowerCase(),\n    taker: NULL_ADDRESS.toLocaleLowerCase(),\n    expiry,\n    makerAmount: fromAmountWei.toString(),\n    makerToken: fromToken.address.toLowerCase(),\n    pool: orderDetails.pool,\n    salt,\n    takerAmount: toAmountWei.toString(),\n    takerToken: toToken.address.toLowerCase(),\n    txOrigin: orderDetails.txOrigin,\n  };\n\n  const signature = await writeWeb3.signer._signTypedData(\n    domain(orderDetails.verifyingContract),\n    types,\n    order\n  );\n\n  const splittedSign = utils.splitSignature(signature);\n  const jsonOrder: RfqOrderJson = {\n    maker: order.maker.toLowerCase(),\n    taker: order.taker,\n    chainId: EthNetworks.Mainnet,\n    expiry: order.expiry,\n    makerAmount: order.makerAmount,\n    makerToken: order.makerToken.toLowerCase(),\n    pool: order.pool,\n    salt: order.salt,\n    signature: {\n      r: splittedSign.r,\n      s: splittedSign.s,\n      v: splittedSign.v,\n      signatureType: SignatureType.EIP712,\n    },\n    takerAmount: order.takerAmount,\n    takerToken: order.takerToken.toLowerCase(),\n    txOrigin: order.txOrigin.toLowerCase(),\n    verifyingContract: orderDetails.verifyingContract.toLowerCase(),\n  };\n\n  await sendOrders([jsonOrder]);\n};\n\nconst domain = (exchangeProxyAddress: string) => ({\n  chainId: 1,\n  verifyingContract: exchangeProxyAddress,\n  name: 'ZeroEx',\n  version: '1.0.0',\n});\n\nconst types = {\n  RfqOrder: [\n    { type: 'address', name: 'makerToken' },\n    { type: 'address', name: 'takerToken' },\n    { type: 'uint128', name: 'makerAmount' },\n    { type: 'uint128', name: 'takerAmount' },\n    { type: 'address', name: 'maker' },\n    { type: 'address', name: 'taker' },\n    { type: 'address', name: 'txOrigin' },\n    { type: 'bytes32', name: 'pool' },\n    { type: 'uint64', name: 'expiry' },\n    { type: 'uint256', name: 'salt' },\n  ],\n};\n"]},"metadata":{},"sourceType":"module"}