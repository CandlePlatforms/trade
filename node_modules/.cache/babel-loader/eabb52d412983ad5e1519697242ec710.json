{"ast":null,"code":"import { createSelector, createSlice } from '@reduxjs/toolkit';\nimport { BigNumber } from 'bignumber.js';\nimport { get } from 'lodash';\nconst initialState = {\n  poolTokens: [],\n  lockedAvailableBNT: {\n    locked: [],\n    available: 0\n  },\n  protectedPositions: [],\n  rewards: undefined,\n  loadingPositions: false,\n  loadingRewards: false,\n  loadingLockedBnt: false\n};\nconst liquiditySlice = createSlice({\n  name: 'liquidity',\n  initialState,\n  reducers: {\n    setPoolTokens: (state, action) => {\n      state.poolTokens = action.payload;\n    },\n    setLockedAvailableBNT: (state, action) => {\n      state.lockedAvailableBNT = action.payload;\n    },\n    setProtectedPositions: (state, action) => {\n      state.protectedPositions = action.payload;\n    },\n    setRewards: (state, action) => {\n      state.rewards = action.payload;\n    },\n    setLoadingPositions: (state, action) => {\n      state.loadingPositions = action.payload;\n    },\n    setLoadingRewards: (state, action) => {\n      state.loadingRewards = action.payload;\n    },\n    setLoadingLockedBnt: (state, action) => {\n      state.loadingLockedBnt = action.payload;\n    }\n  }\n});\nexport const getGroupedPositions = createSelector(state => state.liquidity.protectedPositions, protectedPositions => {\n  return protectedPositions.reduce((obj => (acc, val) => {\n    const symbol = val.reserveToken.symbol;\n    const bnt = val.pool.reserves[1];\n    const bntUSDPrice = bnt.usdPrice ? new BigNumber(bnt.usdPrice) : new BigNumber(0);\n    const poolId = val.pool.pool_dlt_id;\n    const groupId = `${poolId}-${symbol}`;\n    const filtered = protectedPositions.filter(pos => pos.pool.pool_dlt_id === poolId && pos.reserveToken.symbol === symbol);\n    let item = obj.get(groupId);\n\n    if (!item) {\n      const calcSum = key => {\n        return filtered.map(pos => Number(get(pos, key))).reduce((sum, current) => sum + current, 0).toString();\n      };\n\n      const sumFees = calcSum('fees');\n      const sumInitalStakeTkn = calcSum('initialStake.tknAmount');\n      const sumInitalStakeUSD = calcSum('initialStake.usdAmount');\n      const sumRoi = new BigNumber(sumFees).div(sumInitalStakeTkn).toString();\n      item = {\n        groupId: groupId,\n        positionId: val.positionId,\n        pool: val.pool,\n        fees: sumFees,\n        initialStake: {\n          usdAmount: sumInitalStakeUSD,\n          tknAmount: sumInitalStakeTkn\n        },\n        protectedAmount: {\n          usdAmount: calcSum('protectedAmount.usdAmount'),\n          tknAmount: calcSum('protectedAmount.tknAmount')\n        },\n        claimableAmount: {\n          usdAmount: calcSum('claimableAmount.usdAmount'),\n          tknAmount: calcSum('claimableAmount.tknAmount')\n        },\n        reserveToken: val.reserveToken,\n        roi: {\n          fees: sumRoi,\n          reserveRewards: new BigNumber(val.rewardsAmount).times(bntUSDPrice).div(sumInitalStakeUSD).toString()\n        },\n        aprs: val.aprs,\n        timestamps: val.timestamps,\n        currentCoveragePercent: val.currentCoveragePercent,\n        rewardsMultiplier: val.rewardsMultiplier,\n        rewardsAmount: val.rewardsAmount,\n        subRows: []\n      };\n      obj.set(groupId, item);\n      acc.push(item);\n    }\n\n    if (filtered.length > 1) {\n      item.subRows.push(val);\n    }\n\n    return acc;\n  })(new Map()), []);\n});\nexport const getPositionById = id => createSelector(getGroupedPositions, positions => {\n  return positions.find(pos => pos.groupId === id);\n});\nexport const getStakeSummary = createSelector(state => state.liquidity.protectedPositions, protectedPositions => {\n  if (protectedPositions.length === 0) return;\n  const initialStake = protectedPositions.map(x => Number(x.initialStake.usdAmount)).reduce((sum, current) => sum + current, 0);\n  const protectedValue = protectedPositions.map(x => Number(x.protectedAmount.usdAmount)).reduce((sum, current) => sum + current, 0);\n  const claimableValue = protectedPositions.map(x => Number(x.claimableAmount.usdAmount)).reduce((sum, current) => sum + current, 0);\n  const fees = protectedValue - initialStake;\n  return {\n    protectedValue,\n    claimableValue,\n    fees\n  };\n});\nexport const {\n  setPoolTokens,\n  setLockedAvailableBNT,\n  setProtectedPositions,\n  setRewards,\n  setLoadingPositions,\n  setLoadingRewards,\n  setLoadingLockedBnt\n} = liquiditySlice.actions;\nexport const liquidity = liquiditySlice.reducer;","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/redux/liquidity/liquidity.ts"],"names":["createSelector","createSlice","BigNumber","get","initialState","poolTokens","lockedAvailableBNT","locked","available","protectedPositions","rewards","undefined","loadingPositions","loadingRewards","loadingLockedBnt","liquiditySlice","name","reducers","setPoolTokens","state","action","payload","setLockedAvailableBNT","setProtectedPositions","setRewards","setLoadingPositions","setLoadingRewards","setLoadingLockedBnt","getGroupedPositions","liquidity","reduce","obj","acc","val","symbol","reserveToken","bnt","pool","reserves","bntUSDPrice","usdPrice","poolId","pool_dlt_id","groupId","filtered","filter","pos","item","calcSum","key","map","Number","sum","current","toString","sumFees","sumInitalStakeTkn","sumInitalStakeUSD","sumRoi","div","positionId","fees","initialStake","usdAmount","tknAmount","protectedAmount","claimableAmount","roi","reserveRewards","rewardsAmount","times","aprs","timestamps","currentCoveragePercent","rewardsMultiplier","subRows","set","push","length","Map","getPositionById","id","positions","find","getStakeSummary","x","protectedValue","claimableValue","actions","reducer"],"mappings":"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","sourcesContent":["import { createSelector, createSlice, RootState } from '@reduxjs/toolkit';\nimport { BigNumber } from 'bignumber.js';\nimport { get } from 'lodash';\nimport { Rewards } from 'services/observables/liquidity';\nimport { PoolToken } from 'services/observables/tokens';\nimport { LockedAvailableBnt } from 'services/web3/lockedbnt/lockedbnt';\nimport {\n  ProtectedPosition,\n  ProtectedPositionGrouped,\n} from 'services/web3/protection/positions';\n\ninterface LiquidityState {\n  poolTokens: PoolToken[];\n  lockedAvailableBNT: LockedAvailableBnt;\n  protectedPositions: ProtectedPosition[];\n  rewards?: Rewards;\n  loadingPositions: boolean;\n  loadingRewards: boolean;\n  loadingLockedBnt: boolean;\n}\n\nconst initialState: LiquidityState = {\n  poolTokens: [],\n  lockedAvailableBNT: {\n    locked: [],\n    available: 0,\n  },\n  protectedPositions: [],\n  rewards: undefined,\n  loadingPositions: false,\n  loadingRewards: false,\n  loadingLockedBnt: false,\n};\n\nconst liquiditySlice = createSlice({\n  name: 'liquidity',\n  initialState,\n  reducers: {\n    setPoolTokens: (state, action) => {\n      state.poolTokens = action.payload;\n    },\n    setLockedAvailableBNT: (state, action) => {\n      state.lockedAvailableBNT = action.payload;\n    },\n    setProtectedPositions: (state, action) => {\n      state.protectedPositions = action.payload;\n    },\n    setRewards: (state, action) => {\n      state.rewards = action.payload;\n    },\n    setLoadingPositions: (state, action) => {\n      state.loadingPositions = action.payload;\n    },\n    setLoadingRewards: (state, action) => {\n      state.loadingRewards = action.payload;\n    },\n    setLoadingLockedBnt: (state, action) => {\n      state.loadingLockedBnt = action.payload;\n    },\n  },\n});\n\nexport const getGroupedPositions = createSelector(\n  (state: RootState) => state.liquidity.protectedPositions,\n  (protectedPositions: ProtectedPosition[]) => {\n    return protectedPositions.reduce(\n      ((obj) => (acc: ProtectedPositionGrouped[], val: ProtectedPosition) => {\n        const symbol = val.reserveToken.symbol;\n\n        const bnt = val.pool.reserves[1];\n        const bntUSDPrice = bnt.usdPrice\n          ? new BigNumber(bnt.usdPrice)\n          : new BigNumber(0);\n        const poolId = val.pool.pool_dlt_id;\n        const groupId = `${poolId}-${symbol}`;\n        const filtered = protectedPositions.filter(\n          (pos) =>\n            pos.pool.pool_dlt_id === poolId &&\n            pos.reserveToken.symbol === symbol\n        );\n\n        let item: ProtectedPositionGrouped = obj.get(groupId);\n\n        if (!item) {\n          const calcSum = (key: string): string => {\n            return filtered\n              .map((pos) => Number(get(pos, key)))\n              .reduce((sum, current) => sum + current, 0)\n              .toString();\n          };\n\n          const sumFees = calcSum('fees');\n          const sumInitalStakeTkn = calcSum('initialStake.tknAmount');\n          const sumInitalStakeUSD = calcSum('initialStake.usdAmount');\n\n          const sumRoi = new BigNumber(sumFees)\n            .div(sumInitalStakeTkn)\n            .toString();\n\n          item = {\n            groupId: groupId,\n            positionId: val.positionId,\n            pool: val.pool,\n            fees: sumFees,\n            initialStake: {\n              usdAmount: sumInitalStakeUSD,\n              tknAmount: sumInitalStakeTkn,\n            },\n            protectedAmount: {\n              usdAmount: calcSum('protectedAmount.usdAmount'),\n              tknAmount: calcSum('protectedAmount.tknAmount'),\n            },\n            claimableAmount: {\n              usdAmount: calcSum('claimableAmount.usdAmount'),\n              tknAmount: calcSum('claimableAmount.tknAmount'),\n            },\n            reserveToken: val.reserveToken,\n            roi: {\n              fees: sumRoi,\n              reserveRewards: new BigNumber(val.rewardsAmount)\n                .times(bntUSDPrice)\n                .div(sumInitalStakeUSD)\n                .toString(),\n            },\n            aprs: val.aprs,\n            timestamps: val.timestamps,\n            currentCoveragePercent: val.currentCoveragePercent,\n            rewardsMultiplier: val.rewardsMultiplier,\n            rewardsAmount: val.rewardsAmount,\n            subRows: [],\n          };\n\n          obj.set(groupId, item);\n          acc.push(item);\n        }\n\n        if (filtered.length > 1) {\n          item.subRows.push(val);\n        }\n        return acc;\n      })(new Map()),\n      []\n    );\n  }\n);\n\nexport const getPositionById = (id: string): any =>\n  createSelector(\n    getGroupedPositions,\n    (positions: ProtectedPositionGrouped[]) => {\n      return positions.find((pos) => pos.groupId === id);\n    }\n  );\n\nexport interface MyStakeSummary {\n  protectedValue: number;\n  claimableValue: number;\n  fees: number;\n}\n\nexport const getStakeSummary = createSelector(\n  (state: RootState) => state.liquidity.protectedPositions,\n  (protectedPositions: ProtectedPosition[]) => {\n    if (protectedPositions.length === 0) return;\n\n    const initialStake = protectedPositions\n      .map((x) => Number(x.initialStake.usdAmount))\n      .reduce((sum, current) => sum + current, 0);\n\n    const protectedValue = protectedPositions\n      .map((x) => Number(x.protectedAmount.usdAmount))\n      .reduce((sum, current) => sum + current, 0);\n\n    const claimableValue = protectedPositions\n      .map((x) => Number(x.claimableAmount.usdAmount))\n      .reduce((sum, current) => sum + current, 0);\n\n    const fees = protectedValue - initialStake;\n\n    return {\n      protectedValue,\n      claimableValue,\n      fees,\n    };\n  }\n);\n\nexport const {\n  setPoolTokens,\n  setLockedAvailableBNT,\n  setProtectedPositions,\n  setRewards,\n  setLoadingPositions,\n  setLoadingRewards,\n  setLoadingLockedBnt,\n} = liquiditySlice.actions;\n\nexport const liquidity = liquiditySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}