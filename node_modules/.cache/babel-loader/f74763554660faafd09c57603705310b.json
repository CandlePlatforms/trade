{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react';\nexport const useInterval = function (callback, delay) {\n  _s();\n\n  let leading = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  useEffect(() => {\n    function tick() {\n      const current = savedCallback.current;\n      current && current();\n    }\n\n    if (delay !== null) {\n      if (leading) tick();\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n\n    return undefined;\n  }, [delay, leading]);\n};\n\n_s(useInterval, \"dqNZMqbncP+HtqBlD20aSNv0Ugk=\");","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/hooks/useInterval.tsx"],"names":["useEffect","useRef","useInterval","callback","delay","leading","savedCallback","current","tick","id","setInterval","clearInterval","undefined"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAEA,OAAO,MAAMC,WAAW,GAAG,UACzBC,QADyB,EAEzBC,KAFyB,EAItB;AAAA;;AAAA,MADHC,OACG,uEADO,IACP;AACH,QAAMC,aAAa,GAAGL,MAAM,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,aAAa,CAACC,OAAd,GAAwBJ,QAAxB;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAIAH,EAAAA,SAAS,CAAC,MAAM;AACd,aAASQ,IAAT,GAAgB;AACd,YAAMD,OAAO,GAAGD,aAAa,CAACC,OAA9B;AACAA,MAAAA,OAAO,IAAIA,OAAO,EAAlB;AACD;;AAED,QAAIH,KAAK,KAAK,IAAd,EAAoB;AAClB,UAAIC,OAAJ,EAAaG,IAAI;AACjB,YAAMC,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAOJ,KAAP,CAAtB;AACA,aAAO,MAAMO,aAAa,CAACF,EAAD,CAA1B;AACD;;AACD,WAAOG,SAAP;AACD,GAZQ,EAYN,CAACR,KAAD,EAAQC,OAAR,CAZM,CAAT;AAaD,CAxBM;;GAAMH,W","sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport const useInterval = (\n  callback: () => void,\n  delay: null | number,\n  leading = true\n) => {\n  const savedCallback = useRef<() => void>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      const current = savedCallback.current;\n      current && current();\n    }\n\n    if (delay !== null) {\n      if (leading) tick();\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n    return undefined;\n  }, [delay, leading]);\n};\n"]},"metadata":{},"sourceType":"module"}