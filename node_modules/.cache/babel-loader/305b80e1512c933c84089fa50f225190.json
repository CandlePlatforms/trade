{"ast":null,"code":"import { initialState as UserState } from 'redux/user/user';\nconst selected_lists = 'userTokenLists';\nconst autoLogin = 'loginAuto';\nconst darkMode = 'darkMode';\nconst slippageTolerance = 'slippageTolerance';\nconst usdToggle = 'usdToggle';\nconst notifications = 'notifications';\nconst showBanner = 'showBanner';\nexport const getTokenListLS = () => {\n  const list = localStorage.getItem(selected_lists);\n  return list ? JSON.parse(list) : [];\n};\nexport const setTokenListLS = userListIds => {\n  localStorage.setItem(selected_lists, JSON.stringify(userListIds));\n};\nexport const getAutoLoginLS = () => {\n  const auto = localStorage.getItem(autoLogin);\n  return auto && JSON.parse(auto);\n};\nexport const setAutoLoginLS = flag => {\n  localStorage.setItem(autoLogin, JSON.stringify(flag));\n};\nexport const getDarkModeLS = () => {\n  const dark = localStorage.getItem(darkMode);\n  return dark && JSON.parse(dark);\n};\nexport const setDarkModeLS = flag => {\n  localStorage.setItem(darkMode, JSON.stringify(flag));\n};\nexport const getSlippageToleranceLS = () => {\n  const slippage = localStorage.getItem(slippageTolerance);\n  if (slippage) return JSON.parse(slippage);\n  return UserState.slippageTolerance;\n};\nexport const setSlippageToleranceLS = flag => {\n  localStorage.setItem(slippageTolerance, JSON.stringify(flag));\n};\nexport const getUsdToggleLS = () => {\n  const usd = localStorage.getItem(usdToggle);\n  return usd && JSON.parse(usd);\n};\nexport const setUsdToggleLS = flag => {\n  localStorage.setItem(usdToggle, JSON.stringify(flag));\n};\nexport const getNotificationsLS = () => {\n  const notify = localStorage.getItem(notifications);\n  return notify ? JSON.parse(notify) : [];\n};\nexport const setNotificationsLS = notify => {\n  localStorage.setItem(notifications, JSON.stringify(notify));\n};\nexport const getShowBannerLS = () => {\n  const show = localStorage.getItem(showBanner);\n  return show ? JSON.parse(show) : undefined;\n};\nexport const setShowBannerLS = flag => {\n  localStorage.setItem(showBanner, JSON.stringify(flag));\n};","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/utils/localStorage.ts"],"names":["initialState","UserState","selected_lists","autoLogin","darkMode","slippageTolerance","usdToggle","notifications","showBanner","getTokenListLS","list","localStorage","getItem","JSON","parse","setTokenListLS","userListIds","setItem","stringify","getAutoLoginLS","auto","setAutoLoginLS","flag","getDarkModeLS","dark","setDarkModeLS","getSlippageToleranceLS","slippage","setSlippageToleranceLS","getUsdToggleLS","usd","setUsdToggleLS","getNotificationsLS","notify","setNotificationsLS","getShowBannerLS","show","undefined","setShowBannerLS"],"mappings":"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","sourcesContent":["import { initialState as UserState } from 'redux/user/user';\nimport { Notification } from 'redux/notification/notification';\n\nconst selected_lists = 'userTokenLists';\nconst autoLogin = 'loginAuto';\nconst darkMode = 'darkMode';\nconst slippageTolerance = 'slippageTolerance';\nconst usdToggle = 'usdToggle';\nconst notifications = 'notifications';\nconst showBanner = 'showBanner';\n\nexport const getTokenListLS = (): string[] => {\n  const list = localStorage.getItem(selected_lists);\n  return list ? JSON.parse(list) : [];\n};\n\nexport const setTokenListLS = (userListIds: string[]) => {\n  localStorage.setItem(selected_lists, JSON.stringify(userListIds));\n};\n\nexport const getAutoLoginLS = (): boolean => {\n  const auto = localStorage.getItem(autoLogin);\n  return auto && JSON.parse(auto);\n};\n\nexport const setAutoLoginLS = (flag: boolean) => {\n  localStorage.setItem(autoLogin, JSON.stringify(flag));\n};\n\nexport const getDarkModeLS = (): boolean => {\n  const dark = localStorage.getItem(darkMode);\n  return dark && JSON.parse(dark);\n};\n\nexport const setDarkModeLS = (flag: boolean) => {\n  localStorage.setItem(darkMode, JSON.stringify(flag));\n};\n\nexport const getSlippageToleranceLS = (): number => {\n  const slippage = localStorage.getItem(slippageTolerance);\n  if (slippage) return JSON.parse(slippage);\n\n  return UserState.slippageTolerance;\n};\n\nexport const setSlippageToleranceLS = (flag: number) => {\n  localStorage.setItem(slippageTolerance, JSON.stringify(flag));\n};\n\nexport const getUsdToggleLS = (): boolean => {\n  const usd = localStorage.getItem(usdToggle);\n  return usd && JSON.parse(usd);\n};\n\nexport const setUsdToggleLS = (flag: boolean) => {\n  localStorage.setItem(usdToggle, JSON.stringify(flag));\n};\n\nexport const getNotificationsLS = (): Notification[] => {\n  const notify = localStorage.getItem(notifications);\n  return notify ? JSON.parse(notify) : [];\n};\n\nexport const setNotificationsLS = (notify: Notification[]) => {\n  localStorage.setItem(notifications, JSON.stringify(notify));\n};\n\nexport const getShowBannerLS = (): boolean | undefined => {\n  const show = localStorage.getItem(showBanner);\n  return show ? JSON.parse(show) : undefined;\n};\n\nexport const setShowBannerLS = (flag: boolean) => {\n  localStorage.setItem(showBanner, JSON.stringify(flag));\n};\n"]},"metadata":{},"sourceType":"module"}