{"ast":null,"code":"import { FrameConnector } from '@web3-react/frame-connector';\nimport { PortisConnector } from '@web3-react/portis-connector';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { FortmaticConnector } from '@web3-react/fortmatic-connector';\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { TorusConnector } from '@web3-react/torus-connector';\nimport { SafeAppConnector } from '@gnosis.pm/safe-apps-web3-react';\nimport { EthNetworks } from 'services/web3/types';\nexport const buildAlchemyUrl = function (network) {\n  let wss = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const net = EthNetworks.Mainnet === network ? 'mainnet' : 'ropsten';\n  const id = network === EthNetworks.Mainnet ? process.env.REACT_APP_ALCHEMY_MAINNET : process.env.REACT_APP_ALCHEMY_ROPSTEN;\n  return `${wss ? 'wss' : 'https'}://eth-${net}.alchemyapi.io/v2/${id}`;\n};\nconst RPC_URLS = {\n  1: buildAlchemyUrl(EthNetworks.Mainnet, false),\n  3: buildAlchemyUrl(EthNetworks.Ropsten, false)\n};\nconst appName = 'bancor';\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42]\n});\nexport const gnosisSafe = new SafeAppConnector();\nexport const walletconnect = new WalletConnectConnector({\n  rpc: {\n    1: RPC_URLS[1],\n    3: RPC_URLS[3]\n  },\n  qrcode: true\n});\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[1],\n  appName: appName\n});\nexport const frame = new FrameConnector({\n  supportedChainIds: [1]\n});\nexport const fortmatic = new FortmaticConnector({\n  apiKey: process.env.REACT_APP_FORTMATIC_API_KEY,\n  chainId: 1\n});\nexport const portis = new PortisConnector({\n  dAppId: process.env.REACT_APP_PORTIS_DAPP_ID,\n  networks: [1, 100]\n});\nexport const torus = new TorusConnector({\n  chainId: 1\n});","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/web3/wallet/connectors.ts"],"names":["FrameConnector","PortisConnector","InjectedConnector","FortmaticConnector","WalletLinkConnector","WalletConnectConnector","TorusConnector","SafeAppConnector","EthNetworks","buildAlchemyUrl","network","wss","net","Mainnet","id","process","env","REACT_APP_ALCHEMY_MAINNET","REACT_APP_ALCHEMY_ROPSTEN","RPC_URLS","Ropsten","appName","injected","supportedChainIds","gnosisSafe","walletconnect","rpc","qrcode","walletlink","url","frame","fortmatic","apiKey","REACT_APP_FORTMATIC_API_KEY","chainId","portis","dAppId","REACT_APP_PORTIS_DAPP_ID","networks","torus"],"mappings":"AAAA,SAASA,cAAT,QAA+B,6BAA/B;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,SAASC,mBAAT,QAAoC,kCAApC;AACA,SAASC,sBAAT,QAAuC,qCAAvC;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAEA,OAAO,MAAMC,eAAe,GAAG,UAACC,OAAD,EAA+C;AAAA,MAAxBC,GAAwB,uEAAT,IAAS;AAC5E,QAAMC,GAAG,GAAGJ,WAAW,CAACK,OAAZ,KAAwBH,OAAxB,GAAkC,SAAlC,GAA8C,SAA1D;AACA,QAAMI,EAAE,GACNJ,OAAO,KAAKF,WAAW,CAACK,OAAxB,GACKE,OAAO,CAACC,GAAR,CAAYC,yBADjB,GAEKF,OAAO,CAACC,GAAR,CAAYE,yBAHnB;AAIA,SAAQ,GAAEP,GAAG,GAAG,KAAH,GAAW,OAAQ,UAASC,GAAI,qBAAoBE,EAAG,EAApE;AACD,CAPM;AASP,MAAMK,QAAuC,GAAG;AAC9C,KAAGV,eAAe,CAACD,WAAW,CAACK,OAAb,EAAsB,KAAtB,CAD4B;AAE9C,KAAGJ,eAAe,CAACD,WAAW,CAACY,OAAb,EAAsB,KAAtB;AAF4B,CAAhD;AAKA,MAAMC,OAAO,GAAG,QAAhB;AAEA,OAAO,MAAMC,QAAQ,GAAG,IAAIpB,iBAAJ,CAAsB;AAC5CqB,EAAAA,iBAAiB,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb;AADyB,CAAtB,CAAjB;AAIP,OAAO,MAAMC,UAAU,GAAG,IAAIjB,gBAAJ,EAAnB;AAEP,OAAO,MAAMkB,aAAa,GAAG,IAAIpB,sBAAJ,CAA2B;AACtDqB,EAAAA,GAAG,EAAE;AAAE,OAAGP,QAAQ,CAAC,CAAD,CAAb;AAAkB,OAAGA,QAAQ,CAAC,CAAD;AAA7B,GADiD;AAEtDQ,EAAAA,MAAM,EAAE;AAF8C,CAA3B,CAAtB;AAKP,OAAO,MAAMC,UAAU,GAAG,IAAIxB,mBAAJ,CAAwB;AAChDyB,EAAAA,GAAG,EAAEV,QAAQ,CAAC,CAAD,CADmC;AAEhDE,EAAAA,OAAO,EAAEA;AAFuC,CAAxB,CAAnB;AAKP,OAAO,MAAMS,KAAK,GAAG,IAAI9B,cAAJ,CAAmB;AAAEuB,EAAAA,iBAAiB,EAAE,CAAC,CAAD;AAArB,CAAnB,CAAd;AAEP,OAAO,MAAMQ,SAAS,GAAG,IAAI5B,kBAAJ,CAAuB;AAC9C6B,EAAAA,MAAM,EAAEjB,OAAO,CAACC,GAAR,CAAYiB,2BAD0B;AAE9CC,EAAAA,OAAO,EAAE;AAFqC,CAAvB,CAAlB;AAKP,OAAO,MAAMC,MAAM,GAAG,IAAIlC,eAAJ,CAAoB;AACxCmC,EAAAA,MAAM,EAAErB,OAAO,CAACC,GAAR,CAAYqB,wBADoB;AAExCC,EAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,GAAJ;AAF8B,CAApB,CAAf;AAKP,OAAO,MAAMC,KAAK,GAAG,IAAIjC,cAAJ,CAAmB;AACtC4B,EAAAA,OAAO,EAAE;AAD6B,CAAnB,CAAd","sourcesContent":["import { FrameConnector } from '@web3-react/frame-connector';\nimport { PortisConnector } from '@web3-react/portis-connector';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { FortmaticConnector } from '@web3-react/fortmatic-connector';\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { TorusConnector } from '@web3-react/torus-connector';\nimport { SafeAppConnector } from '@gnosis.pm/safe-apps-web3-react';\nimport { EthNetworks } from 'services/web3/types';\n\nexport const buildAlchemyUrl = (network: EthNetworks, wss: boolean = true) => {\n  const net = EthNetworks.Mainnet === network ? 'mainnet' : 'ropsten';\n  const id =\n    network === EthNetworks.Mainnet\n      ? (process.env.REACT_APP_ALCHEMY_MAINNET as string)\n      : (process.env.REACT_APP_ALCHEMY_ROPSTEN as string);\n  return `${wss ? 'wss' : 'https'}://eth-${net}.alchemyapi.io/v2/${id}`;\n};\n\nconst RPC_URLS: { [chainId: number]: string } = {\n  1: buildAlchemyUrl(EthNetworks.Mainnet, false),\n  3: buildAlchemyUrl(EthNetworks.Ropsten, false),\n};\n\nconst appName = 'bancor';\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42],\n});\n\nexport const gnosisSafe = new SafeAppConnector();\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: RPC_URLS[1], 3: RPC_URLS[3] },\n  qrcode: true,\n});\n\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[1],\n  appName: appName,\n});\n\nexport const frame = new FrameConnector({ supportedChainIds: [1] });\n\nexport const fortmatic = new FortmaticConnector({\n  apiKey: process.env.REACT_APP_FORTMATIC_API_KEY as string,\n  chainId: 1,\n});\n\nexport const portis = new PortisConnector({\n  dAppId: process.env.REACT_APP_PORTIS_DAPP_ID as string,\n  networks: [1, 100],\n});\n\nexport const torus = new TorusConnector({\n  chainId: 1\n});\n"]},"metadata":{},"sourceType":"module"}