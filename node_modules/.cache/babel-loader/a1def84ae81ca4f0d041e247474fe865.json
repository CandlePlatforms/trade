{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/components/tooltip/TooltipPanel.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect, useCallback } from 'react';\nimport { usePopper } from 'react-popper';\nimport 'components/tooltip/TooltipPanel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TooltipPanel = _ref => {\n  _s();\n\n  let {\n    targetRef,\n    placement = 'top',\n    children\n  } = _ref;\n  const popperRef = useRef(null);\n  const [arrowRef, setArrowRef] = useState(null);\n  const [isVisible, setVisible] = useState(false);\n  const {\n    styles,\n    attributes\n  } = usePopper(targetRef.current, popperRef.current, {\n    placement,\n    modifiers: [{\n      name: 'arrow',\n      options: {\n        element: arrowRef\n      }\n    }, {\n      name: 'offset',\n      options: {\n        offset: [0, 10]\n      }\n    }]\n  });\n  const handleClickOutside = useCallback(e => {\n    return targetRef.current.contains(e.target) ? undefined : setVisible(false);\n  }, [targetRef]);\n  useEffect(() => {\n    if (targetRef.current) {\n      targetRef.current.onclick = () => setVisible(!isVisible);\n\n      targetRef.current.onmouseenter = () => setVisible(true);\n\n      targetRef.current.onmouseleave = () => setVisible(false);\n    }\n\n    if (isVisible) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [targetRef, handleClickOutside, isVisible]);\n  if (!isVisible) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tooltip-panel\",\n    ref: popperRef,\n    style: styles.popper,\n    ...attributes.popper,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tooltip-arrow\",\n      ref: setArrowRef,\n      style: { ...styles.arrow,\n        transform: `${styles.arrow.transform} rotate(45deg)`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TooltipPanel, \"f5JNSsEnWDiY3Ywhzsj6WnWB2+4=\", false, function () {\n  return [usePopper];\n});\n\n_c = TooltipPanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"TooltipPanel\");","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/components/tooltip/TooltipPanel.tsx"],"names":["useState","useRef","useEffect","useCallback","usePopper","TooltipPanel","targetRef","placement","children","popperRef","arrowRef","setArrowRef","isVisible","setVisible","styles","attributes","current","modifiers","name","options","element","offset","handleClickOutside","e","contains","target","undefined","onclick","onmouseenter","onmouseleave","document","addEventListener","removeEventListener","popper","arrow","transform"],"mappings":";;;AAAA,SACEA,QADF,EAEEC,MAFF,EAIEC,SAJF,EAKEC,WALF,QAMO,OANP;AAOA,SAASC,SAAT,QAA0B,cAA1B;AAEA,OAAO,qCAAP;;AAQA,OAAO,MAAMC,YAAY,GAAG,QAIf;AAAA;;AAAA,MAJgB;AAC3BC,IAAAA,SAD2B;AAE3BC,IAAAA,SAAS,GAAG,KAFe;AAG3BC,IAAAA;AAH2B,GAIhB;AACX,QAAMC,SAAS,GAAGR,MAAM,CAAC,IAAD,CAAxB;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAwB,IAAxB,CAAxC;AACA,QAAM,CAACY,SAAD,EAAYC,UAAZ,IAA0Bb,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAM;AAAEc,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAyBX,SAAS,CACtCE,SAAS,CAACU,OAD4B,EAEtCP,SAAS,CAACO,OAF4B,EAGtC;AACET,IAAAA,SADF;AAEEU,IAAAA,SAAS,EAAE,CACT;AACEC,MAAAA,IAAI,EAAE,OADR;AAEEC,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAEV;AADF;AAFX,KADS,EAOT;AACEQ,MAAAA,IAAI,EAAE,QADR;AAEEC,MAAAA,OAAO,EAAE;AACPE,QAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ;AADD;AAFX,KAPS;AAFb,GAHsC,CAAxC;AAsBA,QAAMC,kBAAkB,GAAGnB,WAAW,CACnCoB,CAAD,IAAY;AACV,WAAOjB,SAAS,CAACU,OAAV,CAAmBQ,QAAnB,CAA4BD,CAAC,CAACE,MAA9B,IACHC,SADG,GAEHb,UAAU,CAAC,KAAD,CAFd;AAGD,GALmC,EAMpC,CAACP,SAAD,CANoC,CAAtC;AASAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,SAAS,CAACU,OAAd,EAAuB;AACrBV,MAAAA,SAAS,CAACU,OAAV,CAAkBW,OAAlB,GAA4B,MAAMd,UAAU,CAAC,CAACD,SAAF,CAA5C;;AACAN,MAAAA,SAAS,CAACU,OAAV,CAAkBY,YAAlB,GAAiC,MAAMf,UAAU,CAAC,IAAD,CAAjD;;AACAP,MAAAA,SAAS,CAACU,OAAV,CAAkBa,YAAlB,GAAiC,MAAMhB,UAAU,CAAC,KAAD,CAAjD;AACD;;AACD,QAAID,SAAJ,EAAe;AACbkB,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCT,kBAAvC;AACD;;AAED,WAAO,MAAMQ,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CV,kBAA1C,CAAb;AACD,GAXQ,EAWN,CAAChB,SAAD,EAAYgB,kBAAZ,EAAgCV,SAAhC,CAXM,CAAT;AAaA,MAAI,CAACA,SAAL,EAAgB,OAAO,IAAP;AAEhB,sBACE;AACE,IAAA,SAAS,EAAC,eADZ;AAEE,IAAA,GAAG,EAAEH,SAFP;AAGE,IAAA,KAAK,EAAEK,MAAM,CAACmB,MAHhB;AAAA,OAIMlB,UAAU,CAACkB,MAJjB;AAAA,4BAME;AACE,MAAA,SAAS,EAAC,eADZ;AAEE,MAAA,GAAG,EAAEtB,WAFP;AAGE,MAAA,KAAK,EAAE,EACL,GAAGG,MAAM,CAACoB,KADL;AAELC,QAAAA,SAAS,EAAG,GAAErB,MAAM,CAACoB,KAAP,CAAaC,SAAU;AAFhC;AAHT;AAAA;AAAA;AAAA;AAAA,YANF,EAcG3B,QAdH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAzEM;;GAAMH,Y;UASoBD,S;;;KATpBC,Y","sourcesContent":["import {\n  useState,\n  useRef,\n  MutableRefObject,\n  useEffect,\n  useCallback,\n} from 'react';\nimport { usePopper } from 'react-popper';\nimport type * as PopperJS from '@popperjs/core';\nimport 'components/tooltip/TooltipPanel.css';\n\ntype Props = {\n  targetRef: MutableRefObject<null | HTMLButtonElement>;\n  placement?: PopperJS.Placement;\n  children: JSX.Element | JSX.Element[];\n};\n\nexport const TooltipPanel = ({\n  targetRef,\n  placement = 'top',\n  children,\n}: Props) => {\n  const popperRef = useRef(null);\n  const [arrowRef, setArrowRef] = useState<HTMLDivElement | null>(null);\n  const [isVisible, setVisible] = useState(false);\n\n  const { styles, attributes } = usePopper(\n    targetRef.current,\n    popperRef.current,\n    {\n      placement,\n      modifiers: [\n        {\n          name: 'arrow',\n          options: {\n            element: arrowRef,\n          },\n        },\n        {\n          name: 'offset',\n          options: {\n            offset: [0, 10],\n          },\n        },\n      ],\n    }\n  );\n\n  const handleClickOutside = useCallback(\n    (e: any) => {\n      return targetRef.current!.contains(e.target)\n        ? undefined\n        : setVisible(false);\n    },\n    [targetRef]\n  );\n\n  useEffect(() => {\n    if (targetRef.current) {\n      targetRef.current.onclick = () => setVisible(!isVisible);\n      targetRef.current.onmouseenter = () => setVisible(true);\n      targetRef.current.onmouseleave = () => setVisible(false);\n    }\n    if (isVisible) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [targetRef, handleClickOutside, isVisible]);\n\n  if (!isVisible) return null;\n\n  return (\n    <div\n      className=\"tooltip-panel\"\n      ref={popperRef}\n      style={styles.popper}\n      {...attributes.popper}\n    >\n      <div\n        className=\"tooltip-arrow\"\n        ref={setArrowRef}\n        style={{\n          ...styles.arrow,\n          transform: `${styles.arrow.transform} rotate(45deg)`,\n        }}\n      />\n      {children}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}