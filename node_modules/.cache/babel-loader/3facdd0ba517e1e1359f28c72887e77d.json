{"ast":null,"code":"import { addNotification, NotificationType } from 'redux/notification/notification';\n\nconst showNotification = (notification, dispatch) => dispatch(addNotification(notification));\n\nexport const rejectNotification = dispatch => showNotification({\n  type: NotificationType.error,\n  title: 'Transaction Rejected',\n  msg: 'You rejected the trade. If this was by mistake, please try again.'\n}, dispatch);\nexport const stakeNotification = (dispatch, amount, txHash) => showNotification({\n  type: NotificationType.pending,\n  title: 'Pending Confirmation',\n  msg: 'Staking vBNT is pending confirmation',\n  txHash,\n  updatedInfo: {\n    successTitle: 'Success!',\n    successMsg: `Your stake of ${amount} vBNT has been confirmed`,\n    errorTitle: 'Transaction Failed',\n    errorMsg: `Staking ${amount} vBNT had failed. Please try again or contact support.`\n  }\n}, dispatch);\nexport const unstakeNotification = (dispatch, amount, txHash) => showNotification({\n  type: NotificationType.pending,\n  title: 'Pending Confirmation',\n  msg: 'Unstaking vBNT is pending confirmation',\n  txHash,\n  updatedInfo: {\n    successTitle: 'Success!',\n    successMsg: `Unstaking ${amount} vBNT has been confirmed`,\n    errorTitle: 'Transaction Failed',\n    errorMsg: `Unstaking ${amount} vBNT had failed. Please try again or contact support.`\n  }\n}, dispatch);\nexport const stakeFailedNotification = (dispatch, amount) => showNotification({\n  type: NotificationType.error,\n  title: 'Transaction Failed',\n  msg: `Staking ${amount} vBNT had failed. Please try again or contact support.`\n}, dispatch);\nexport const unstakeFailedNotification = (dispatch, amount) => showNotification({\n  type: NotificationType.error,\n  title: 'Transaction Failed',\n  msg: `Staking ${amount} vBNT had failed. Please try again or contact support.`\n}, dispatch);\nexport const swapNotification = (dispatch, fromToken, toToken, fromAmount, toAmount, txHash) => showNotification({\n  type: NotificationType.pending,\n  title: 'Pending Confirmation',\n  msg: `Trading ${fromAmount} ${fromToken.symbol} is Pending Confirmation`,\n  updatedInfo: {\n    successTitle: 'Success!',\n    successMsg: `Your trade ${fromAmount} ${fromToken.symbol} for ${toAmount} ${toToken.symbol} has been confirmed`,\n    errorTitle: 'Transaction Failed',\n    errorMsg: `Trading ${fromAmount} ${fromToken.symbol} for ${toAmount} ${toToken.symbol} had failed. Please try again or contact support`\n  },\n  txHash\n}, dispatch);\nexport const swapFailedNotification = (dispatch, fromToken, toToken, fromAmount, toAmount) => showNotification({\n  type: NotificationType.error,\n  title: 'Transaction Failed',\n  msg: `Trading ${fromAmount} ${fromToken.symbol} for ${toAmount} ${toToken.symbol} had failed. Please try again or contact support`\n}, dispatch);\nexport const poolExistNotification = dispatch => showNotification({\n  type: NotificationType.error,\n  title: 'Pool Already exist',\n  msg: `The pool already exists on Bancor`\n}, dispatch);\nexport const poolCreateNotification = (dispatch, txHash) => showNotification({\n  type: NotificationType.pending,\n  title: 'Pending Confirmation',\n  msg: 'Creating pool is pending confirmation',\n  txHash,\n  updatedInfo: {\n    successTitle: 'Success!',\n    successMsg: 'Your pool was successfully created',\n    errorTitle: 'Creating Pool Failed',\n    errorMsg: 'Fail creating pool. Please try again or contact support.'\n  }\n}, dispatch);\nexport const ownershipNotification = (dispatch, txHash) => showNotification({\n  type: NotificationType.pending,\n  title: 'Pending Confirmation',\n  msg: 'Accepting ownership is pending confirmation',\n  txHash,\n  updatedInfo: {\n    successTitle: 'Success!',\n    successMsg: 'Ownership Accepted',\n    errorTitle: 'Ownership Failed',\n    errorMsg: 'Failed accepting ownership. Please try again or contact support.'\n  }\n}, dispatch);\nexport const setFeeNotification = (dispatch, txHash) => showNotification({\n  type: NotificationType.pending,\n  title: 'Pending Confirmation',\n  msg: 'Setting convertion fee is pending confirmation',\n  txHash,\n  updatedInfo: {\n    successTitle: 'Success!',\n    successMsg: 'Conversion fee has been set',\n    errorTitle: 'Conversion fee failed',\n    errorMsg: 'conversion fee setting failed. Please try again or contact support.'\n  }\n}, dispatch);\nexport const poolFailedNotification = dispatch => showNotification({\n  type: NotificationType.error,\n  title: 'Creating Pool Failed',\n  msg: `Fail creating pool. Please try again or contact support.`\n}, dispatch);\nexport const stakeRewardsNotification = (dispatch, txHash, amount, pool) => showNotification({\n  type: NotificationType.pending,\n  title: 'Pending Confirmation',\n  msg: `Staking ${amount} BNT rewards is Pending Confirmation`,\n  txHash,\n  updatedInfo: {\n    successTitle: 'Success!',\n    successMsg: `${amount} BNT rewards were successfully staked into the ${pool} pool`,\n    errorTitle: 'Transaction Failed',\n    errorMsg: `Staking ${amount} BNT rewards had failed. Please try again or contact support.`\n  }\n}, dispatch);\nexport const claimRewardsNotification = (dispatch, txHash, amount) => showNotification({\n  type: NotificationType.pending,\n  title: 'Pending Confirmation',\n  msg: `Rewards claiming of ${amount} is Pending Confirmation`,\n  txHash,\n  updatedInfo: {\n    successTitle: 'Success!',\n    successMsg: `${amount} BNT rewards were successfully claimed`,\n    errorTitle: 'Transaction Failed',\n    errorMsg: `Claiming ${amount} BNT rewards had failed. Please try again or contact support.`\n  }\n}, dispatch);\nexport const stakeRewardsFailedNotification = dispatch => showNotification({\n  type: NotificationType.error,\n  title: 'Staking Rewards',\n  msg: `Failed to stake rewards. Please try again or contact support.`\n}, dispatch);\nexport const claimRewardsFailedNotification = dispatch => showNotification({\n  type: NotificationType.error,\n  title: 'Claiming Rewards',\n  msg: `Failed to claim rewards. Please try again or contact support.`\n}, dispatch);\nexport const withdrawProtectedPosition = (dispatch, token, amount, txHash) => showNotification({\n  type: NotificationType.pending,\n  title: 'Pending Confirmation',\n  msg: `Withdrawal of ${amount} ${token.symbol} is Pending Confirmation`,\n  txHash,\n  updatedInfo: {\n    successTitle: 'Success!',\n    successMsg: `Your withdraw of ${amount} ${token.symbol} has been confirmed`,\n    errorTitle: 'Transaction Failed',\n    errorMsg: `Withdrawing ${amount} ${token.symbol} had failed. Please try again or contact support.`\n  }\n}, dispatch);\nexport const withdrawProtectedPositionFailed = (dispatch, token, amount) => showNotification({\n  type: NotificationType.error,\n  title: 'Transaction Failed',\n  msg: `Withdrawing ${amount} ${token.symbol} had failed. Please try again or contact support.`\n}, dispatch);\nexport const removeLiquidityNotification = (dispatch, amount, symbol, txHash) => showNotification({\n  type: NotificationType.pending,\n  title: 'Pending Confirmation',\n  msg: `Removing ${amount} ${symbol} is Pending Confirmation`,\n  txHash,\n  updatedInfo: {\n    successTitle: 'Success!',\n    successMsg: `Your withdraw of ${amount} ${symbol} has been confirmed`,\n    errorTitle: 'Transaction Failed',\n    errorMsg: `Removing ${amount} ${symbol} had failed. Please try again or contact support`\n  }\n}, dispatch);\nexport const removeLiquidityNotificationFailed = (dispatch, amount, symbol) => showNotification({\n  type: NotificationType.error,\n  title: 'Transaction Failed',\n  msg: `Removing ${amount} ${symbol} had failed. Please try again or contact support`\n}, dispatch);\nexport const claimBntNotification = (dispatch, txHash, amount) => showNotification({\n  type: NotificationType.pending,\n  title: 'Pending Confirmation',\n  msg: `Claiming locked ${amount} BNT is Pending Confirmation`,\n  txHash,\n  updatedInfo: {\n    successTitle: 'Success!',\n    successMsg: `${amount} locked BNT were successfully claimed`,\n    errorTitle: 'Transaction Failed',\n    errorMsg: `Claiming locked ${amount} BNT had failed. Please try again or contact support.`\n  }\n}, dispatch);\nexport const addLiquiditySingleNotification = (dispatch, txHash, amount, symbol, pool) => showNotification({\n  type: NotificationType.pending,\n  title: 'Add Protection',\n  msg: `Staking ${amount} ${symbol} for Protection is Pending Confirmation`,\n  txHash,\n  updatedInfo: {\n    successTitle: 'Success!',\n    successMsg: `You Staked ${amount} ${symbol} for Protection in Pool ${pool}`,\n    errorTitle: 'Transaction Failed',\n    errorMsg: `Staking ${amount} ${symbol} for Protection in Pool ${pool} failed. Please try again or contact support.`\n  }\n}, dispatch);\nexport const addLiquiditySingleFailedNotification = (dispatch, amount, symbol, pool) => showNotification({\n  type: NotificationType.error,\n  title: 'Transaction Failed',\n  msg: `Staking ${amount} ${symbol} for protection in pool ${pool} failed. Please try again or contact support.`\n}, dispatch);\nexport const addLiquidityNotification = (dispatch, txHash, amountTkn, tkn, amountBnt, bnt, pool) => showNotification({\n  type: NotificationType.pending,\n  title: 'Add Liquidity',\n  msg: `Adding ${amountTkn} ${tkn} and ${amountBnt} ${bnt} to pool ${pool} is Pending Confirmation`,\n  txHash,\n  updatedInfo: {\n    successTitle: 'Success!',\n    successMsg: `You Added ${amountTkn} ${tkn} and ${amountBnt} ${bnt} to pool ${pool}`,\n    errorTitle: 'Transaction Failed',\n    errorMsg: `Adding ${amountTkn} ${tkn} and ${amountBnt} ${bnt} to pool ${pool} failed. Please try again or contact support.`\n  }\n}, dispatch);\nexport const addLiquidityFailedNotification = (dispatch, amountTkn, tkn, amountBnt, bnt, pool) => showNotification({\n  type: NotificationType.error,\n  title: 'Transaction Failed',\n  msg: `Adding ${amountTkn} ${tkn} and ${amountBnt} ${bnt} to pool ${pool} failed. Please try again or contact support.`\n}, dispatch);","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/notifications/notifications.ts"],"names":["addNotification","NotificationType","showNotification","notification","dispatch","rejectNotification","type","error","title","msg","stakeNotification","amount","txHash","pending","updatedInfo","successTitle","successMsg","errorTitle","errorMsg","unstakeNotification","stakeFailedNotification","unstakeFailedNotification","swapNotification","fromToken","toToken","fromAmount","toAmount","symbol","swapFailedNotification","poolExistNotification","poolCreateNotification","ownershipNotification","setFeeNotification","poolFailedNotification","stakeRewardsNotification","pool","claimRewardsNotification","stakeRewardsFailedNotification","claimRewardsFailedNotification","withdrawProtectedPosition","token","withdrawProtectedPositionFailed","removeLiquidityNotification","removeLiquidityNotificationFailed","claimBntNotification","addLiquiditySingleNotification","addLiquiditySingleFailedNotification","addLiquidityNotification","amountTkn","tkn","amountBnt","bnt","addLiquidityFailedNotification"],"mappings":"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","sourcesContent":["import {\n  addNotification,\n  BaseNotification,\n  NotificationType,\n} from 'redux/notification/notification';\nimport { Token } from 'services/observables/tokens';\n\nconst showNotification = (notification: BaseNotification, dispatch: any) =>\n  dispatch(addNotification(notification));\n\nexport const rejectNotification = (dispatch: any) =>\n  showNotification(\n    {\n      type: NotificationType.error,\n      title: 'Transaction Rejected',\n      msg: 'You rejected the trade. If this was by mistake, please try again.',\n    },\n    dispatch\n  );\n\nexport const stakeNotification = (\n  dispatch: any,\n  amount: string,\n  txHash: string\n) =>\n  showNotification(\n    {\n      type: NotificationType.pending,\n      title: 'Pending Confirmation',\n      msg: 'Staking vBNT is pending confirmation',\n      txHash,\n      updatedInfo: {\n        successTitle: 'Success!',\n        successMsg: `Your stake of ${amount} vBNT has been confirmed`,\n        errorTitle: 'Transaction Failed',\n        errorMsg: `Staking ${amount} vBNT had failed. Please try again or contact support.`,\n      },\n    },\n    dispatch\n  );\n\nexport const unstakeNotification = (\n  dispatch: any,\n  amount: string,\n  txHash: string\n) =>\n  showNotification(\n    {\n      type: NotificationType.pending,\n      title: 'Pending Confirmation',\n      msg: 'Unstaking vBNT is pending confirmation',\n      txHash,\n      updatedInfo: {\n        successTitle: 'Success!',\n        successMsg: `Unstaking ${amount} vBNT has been confirmed`,\n        errorTitle: 'Transaction Failed',\n        errorMsg: `Unstaking ${amount} vBNT had failed. Please try again or contact support.`,\n      },\n    },\n    dispatch\n  );\n\nexport const stakeFailedNotification = (dispatch: any, amount: string) =>\n  showNotification(\n    {\n      type: NotificationType.error,\n      title: 'Transaction Failed',\n      msg: `Staking ${amount} vBNT had failed. Please try again or contact support.`,\n    },\n    dispatch\n  );\n\nexport const unstakeFailedNotification = (dispatch: any, amount: string) =>\n  showNotification(\n    {\n      type: NotificationType.error,\n      title: 'Transaction Failed',\n      msg: `Staking ${amount} vBNT had failed. Please try again or contact support.`,\n    },\n    dispatch\n  );\n\nexport const swapNotification = (\n  dispatch: any,\n  fromToken: Token,\n  toToken: Token,\n  fromAmount: string,\n  toAmount: string,\n  txHash: string\n) =>\n  showNotification(\n    {\n      type: NotificationType.pending,\n      title: 'Pending Confirmation',\n      msg: `Trading ${fromAmount} ${fromToken.symbol} is Pending Confirmation`,\n      updatedInfo: {\n        successTitle: 'Success!',\n        successMsg: `Your trade ${fromAmount} ${fromToken.symbol} for ${toAmount} ${toToken.symbol} has been confirmed`,\n        errorTitle: 'Transaction Failed',\n        errorMsg: `Trading ${fromAmount} ${fromToken.symbol} for ${toAmount} ${toToken.symbol} had failed. Please try again or contact support`,\n      },\n      txHash,\n    },\n    dispatch\n  );\n\nexport const swapFailedNotification = (\n  dispatch: any,\n  fromToken: Token,\n  toToken: Token,\n  fromAmount: string,\n  toAmount: string\n) =>\n  showNotification(\n    {\n      type: NotificationType.error,\n      title: 'Transaction Failed',\n      msg: `Trading ${fromAmount} ${fromToken.symbol} for ${toAmount} ${toToken.symbol} had failed. Please try again or contact support`,\n    },\n    dispatch\n  );\n\nexport const poolExistNotification = (dispatch: any) =>\n  showNotification(\n    {\n      type: NotificationType.error,\n      title: 'Pool Already exist',\n      msg: `The pool already exists on Bancor`,\n    },\n    dispatch\n  );\n\nexport const poolCreateNotification = (dispatch: any, txHash: string) =>\n  showNotification(\n    {\n      type: NotificationType.pending,\n      title: 'Pending Confirmation',\n      msg: 'Creating pool is pending confirmation',\n      txHash,\n      updatedInfo: {\n        successTitle: 'Success!',\n        successMsg: 'Your pool was successfully created',\n        errorTitle: 'Creating Pool Failed',\n        errorMsg: 'Fail creating pool. Please try again or contact support.',\n      },\n    },\n    dispatch\n  );\n\nexport const ownershipNotification = (dispatch: any, txHash: string) =>\n  showNotification(\n    {\n      type: NotificationType.pending,\n      title: 'Pending Confirmation',\n      msg: 'Accepting ownership is pending confirmation',\n      txHash,\n      updatedInfo: {\n        successTitle: 'Success!',\n        successMsg: 'Ownership Accepted',\n        errorTitle: 'Ownership Failed',\n        errorMsg:\n          'Failed accepting ownership. Please try again or contact support.',\n      },\n    },\n    dispatch\n  );\n\nexport const setFeeNotification = (dispatch: any, txHash: string) =>\n  showNotification(\n    {\n      type: NotificationType.pending,\n      title: 'Pending Confirmation',\n      msg: 'Setting convertion fee is pending confirmation',\n      txHash,\n      updatedInfo: {\n        successTitle: 'Success!',\n        successMsg: 'Conversion fee has been set',\n        errorTitle: 'Conversion fee failed',\n        errorMsg:\n          'conversion fee setting failed. Please try again or contact support.',\n      },\n    },\n    dispatch\n  );\n\nexport const poolFailedNotification = (dispatch: any) =>\n  showNotification(\n    {\n      type: NotificationType.error,\n      title: 'Creating Pool Failed',\n      msg: `Fail creating pool. Please try again or contact support.`,\n    },\n    dispatch\n  );\n\nexport const stakeRewardsNotification = (\n  dispatch: any,\n  txHash: string,\n  amount: string,\n  pool: string\n) =>\n  showNotification(\n    {\n      type: NotificationType.pending,\n      title: 'Pending Confirmation',\n      msg: `Staking ${amount} BNT rewards is Pending Confirmation`,\n      txHash,\n      updatedInfo: {\n        successTitle: 'Success!',\n        successMsg: `${amount} BNT rewards were successfully staked into the ${pool} pool`,\n        errorTitle: 'Transaction Failed',\n        errorMsg: `Staking ${amount} BNT rewards had failed. Please try again or contact support.`,\n      },\n    },\n    dispatch\n  );\n\nexport const claimRewardsNotification = (\n  dispatch: any,\n  txHash: string,\n  amount: string\n) =>\n  showNotification(\n    {\n      type: NotificationType.pending,\n      title: 'Pending Confirmation',\n      msg: `Rewards claiming of ${amount} is Pending Confirmation`,\n      txHash,\n      updatedInfo: {\n        successTitle: 'Success!',\n        successMsg: `${amount} BNT rewards were successfully claimed`,\n        errorTitle: 'Transaction Failed',\n        errorMsg: `Claiming ${amount} BNT rewards had failed. Please try again or contact support.`,\n      },\n    },\n    dispatch\n  );\n\nexport const stakeRewardsFailedNotification = (dispatch: any) =>\n  showNotification(\n    {\n      type: NotificationType.error,\n      title: 'Staking Rewards',\n      msg: `Failed to stake rewards. Please try again or contact support.`,\n    },\n    dispatch\n  );\n\nexport const claimRewardsFailedNotification = (dispatch: any) =>\n  showNotification(\n    {\n      type: NotificationType.error,\n      title: 'Claiming Rewards',\n      msg: `Failed to claim rewards. Please try again or contact support.`,\n    },\n    dispatch\n  );\n\nexport const withdrawProtectedPosition = (\n  dispatch: any,\n  token: Token,\n  amount: string,\n  txHash: string\n) =>\n  showNotification(\n    {\n      type: NotificationType.pending,\n      title: 'Pending Confirmation',\n      msg: `Withdrawal of ${amount} ${token.symbol} is Pending Confirmation`,\n      txHash,\n      updatedInfo: {\n        successTitle: 'Success!',\n        successMsg: `Your withdraw of ${amount} ${token.symbol} has been confirmed`,\n        errorTitle: 'Transaction Failed',\n        errorMsg: `Withdrawing ${amount} ${token.symbol} had failed. Please try again or contact support.`,\n      },\n    },\n    dispatch\n  );\n\nexport const withdrawProtectedPositionFailed = (\n  dispatch: any,\n  token: Token,\n  amount: string\n) =>\n  showNotification(\n    {\n      type: NotificationType.error,\n      title: 'Transaction Failed',\n      msg: `Withdrawing ${amount} ${token.symbol} had failed. Please try again or contact support.`,\n    },\n    dispatch\n  );\n\nexport const removeLiquidityNotification = (\n  dispatch: any,\n  amount: string,\n  symbol: string,\n  txHash: string\n) =>\n  showNotification(\n    {\n      type: NotificationType.pending,\n      title: 'Pending Confirmation',\n      msg: `Removing ${amount} ${symbol} is Pending Confirmation`,\n      txHash,\n      updatedInfo: {\n        successTitle: 'Success!',\n        successMsg: `Your withdraw of ${amount} ${symbol} has been confirmed`,\n        errorTitle: 'Transaction Failed',\n        errorMsg: `Removing ${amount} ${symbol} had failed. Please try again or contact support`,\n      },\n    },\n    dispatch\n  );\n\nexport const removeLiquidityNotificationFailed = (\n  dispatch: any,\n  amount: string,\n  symbol: string\n) =>\n  showNotification(\n    {\n      type: NotificationType.error,\n      title: 'Transaction Failed',\n      msg: `Removing ${amount} ${symbol} had failed. Please try again or contact support`,\n    },\n    dispatch\n  );\n\nexport const claimBntNotification = (\n  dispatch: any,\n  txHash: string,\n  amount: string\n) =>\n  showNotification(\n    {\n      type: NotificationType.pending,\n      title: 'Pending Confirmation',\n      msg: `Claiming locked ${amount} BNT is Pending Confirmation`,\n      txHash,\n      updatedInfo: {\n        successTitle: 'Success!',\n        successMsg: `${amount} locked BNT were successfully claimed`,\n        errorTitle: 'Transaction Failed',\n        errorMsg: `Claiming locked ${amount} BNT had failed. Please try again or contact support.`,\n      },\n    },\n    dispatch\n  );\n\nexport const addLiquiditySingleNotification = (\n  dispatch: any,\n  txHash: string,\n  amount: string,\n  symbol: string,\n  pool: string\n) =>\n  showNotification(\n    {\n      type: NotificationType.pending,\n      title: 'Add Protection',\n      msg: `Staking ${amount} ${symbol} for Protection is Pending Confirmation`,\n      txHash,\n      updatedInfo: {\n        successTitle: 'Success!',\n        successMsg: `You Staked ${amount} ${symbol} for Protection in Pool ${pool}`,\n        errorTitle: 'Transaction Failed',\n        errorMsg: `Staking ${amount} ${symbol} for Protection in Pool ${pool} failed. Please try again or contact support.`,\n      },\n    },\n    dispatch\n  );\n\nexport const addLiquiditySingleFailedNotification = (\n  dispatch: any,\n  amount: string,\n  symbol: string,\n  pool: string\n) =>\n  showNotification(\n    {\n      type: NotificationType.error,\n      title: 'Transaction Failed',\n      msg: `Staking ${amount} ${symbol} for protection in pool ${pool} failed. Please try again or contact support.`,\n    },\n    dispatch\n  );\n\nexport const addLiquidityNotification = (\n  dispatch: any,\n  txHash: string,\n  amountTkn: string,\n  tkn: string,\n  amountBnt: string,\n  bnt: string,\n  pool: string\n) =>\n  showNotification(\n    {\n      type: NotificationType.pending,\n      title: 'Add Liquidity',\n      msg: `Adding ${amountTkn} ${tkn} and ${amountBnt} ${bnt} to pool ${pool} is Pending Confirmation`,\n      txHash,\n      updatedInfo: {\n        successTitle: 'Success!',\n        successMsg: `You Added ${amountTkn} ${tkn} and ${amountBnt} ${bnt} to pool ${pool}`,\n        errorTitle: 'Transaction Failed',\n        errorMsg: `Adding ${amountTkn} ${tkn} and ${amountBnt} ${bnt} to pool ${pool} failed. Please try again or contact support.`,\n      },\n    },\n    dispatch\n  );\n\nexport const addLiquidityFailedNotification = (\n  dispatch: any,\n  amountTkn: string,\n  tkn: string,\n  amountBnt: string,\n  bnt: string,\n  pool: string\n) =>\n  showNotification(\n    {\n      type: NotificationType.error,\n      title: 'Transaction Failed',\n      msg: `Adding ${amountTkn} ${tkn} and ${amountBnt} ${bnt} to pool ${pool} failed. Please try again or contact support.`,\n    },\n    dispatch\n  );\n"]},"metadata":{},"sourceType":"module"}