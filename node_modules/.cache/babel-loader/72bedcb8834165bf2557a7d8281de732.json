{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { fetchPendingRewards } from 'services/web3/protection/rewards';\nimport { useInterval } from 'hooks/useInterval';\nimport { useAppSelector } from 'redux/index';\nimport { getTokenById } from 'redux/bancor/bancor';\nimport { getProtectedPools } from 'redux/bancor/pool';\nimport BigNumber from 'bignumber.js';\nimport { useQuery } from 'hooks/useQuery';\nimport { getPositionById } from 'redux/liquidity/liquidity';\nimport { useNavigation } from 'services/router';\nexport const useRewardsClaim = _ref => {\n  _s();\n\n  let {\n    pool\n  } = _ref;\n  const [claimableRewards, setClaimableRewards] = useState(null);\n  const [errorBalance, setErrorBalance] = useState('');\n  const [bntAmount, setBntAmount] = useState('');\n  const [bntAmountUsd, setBntAmountUsd] = useState('');\n  const pools = useAppSelector(getProtectedPools);\n  const {\n    pushRewardsStakeByID,\n    pushRewardsStakeByIDnPos\n  } = useNavigation();\n  const query = useQuery();\n  const posGroupId = query.get('posGroupId');\n  const bnt = useAppSelector(state => getTokenById(state, pool ? pool.reserves[1].address : ''));\n  const position = useAppSelector(getPositionById(posGroupId !== null && posGroupId !== void 0 ? posGroupId : ''));\n  const account = useAppSelector(state => state.user.account);\n\n  const fetchClaimableRewards = async account => {\n    if (posGroupId && position) {\n      setClaimableRewards(position.rewardsAmount);\n    } else {\n      const pendingRewards = await fetchPendingRewards(account);\n      setClaimableRewards(pendingRewards);\n    }\n  };\n\n  const onSelect = pool => {\n    if (posGroupId) pushRewardsStakeByIDnPos(pool.pool_dlt_id, posGroupId);else pushRewardsStakeByID(pool.pool_dlt_id);\n  };\n\n  useInterval(async () => {\n    if (account) {\n      await fetchClaimableRewards(account);\n    }\n  }, account ? 15000 : null);\n  useEffect(() => {\n    if (!account) {\n      setClaimableRewards(null);\n    }\n  }, [account]);\n  useEffect(() => {\n    if (new BigNumber(claimableRewards !== null && claimableRewards !== void 0 ? claimableRewards : 0).lt(bntAmount)) {\n      setErrorBalance('Insufficient Balance');\n    } else {\n      setErrorBalance('');\n    }\n  }, [bntAmount, claimableRewards]);\n  return {\n    claimableRewards,\n    account,\n    bntAmount,\n    setBntAmount,\n    bntAmountUsd,\n    setBntAmountUsd,\n    bnt,\n    errorBalance,\n    pools,\n    onSelect,\n    position\n  };\n};\n\n_s(useRewardsClaim, \"MMHQgNNldM9oguGx1r7SLn4qiuY=\", false, function () {\n  return [useAppSelector, useNavigation, useQuery, useAppSelector, useAppSelector, useAppSelector, useInterval];\n});","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/earn/portfolio/liquidityProtection/rewards/claim/useRewardsClaim.tsx"],"names":["useEffect","useState","fetchPendingRewards","useInterval","useAppSelector","getTokenById","getProtectedPools","BigNumber","useQuery","getPositionById","useNavigation","useRewardsClaim","pool","claimableRewards","setClaimableRewards","errorBalance","setErrorBalance","bntAmount","setBntAmount","bntAmountUsd","setBntAmountUsd","pools","pushRewardsStakeByID","pushRewardsStakeByIDnPos","query","posGroupId","get","bnt","state","reserves","address","position","account","user","fetchClaimableRewards","rewardsAmount","pendingRewards","onSelect","pool_dlt_id","lt"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { fetchPendingRewards } from 'services/web3/protection/rewards';\nimport { useInterval } from 'hooks/useInterval';\nimport { useAppSelector } from 'redux/index';\nimport { Pool, Token } from 'services/observables/tokens';\nimport { getTokenById } from 'redux/bancor/bancor';\nimport { getProtectedPools } from 'redux/bancor/pool';\n\nimport BigNumber from 'bignumber.js';\nimport { useQuery } from 'hooks/useQuery';\nimport { ProtectedPositionGrouped } from 'services/web3/protection/positions';\nimport { getPositionById } from 'redux/liquidity/liquidity';\nimport { useNavigation } from 'services/router';\n\ninterface Props {\n  pool?: Pool;\n}\n\nexport const useRewardsClaim = ({ pool }: Props) => {\n  const [claimableRewards, setClaimableRewards] = useState<string | null>(null);\n  const [errorBalance, setErrorBalance] = useState('');\n  const [bntAmount, setBntAmount] = useState('');\n  const [bntAmountUsd, setBntAmountUsd] = useState('');\n  const pools = useAppSelector<Pool[]>(getProtectedPools);\n  const { pushRewardsStakeByID, pushRewardsStakeByIDnPos } = useNavigation();\n  const query = useQuery();\n  const posGroupId = query.get('posGroupId');\n\n  const bnt = useAppSelector<Token | undefined>((state: any) =>\n    getTokenById(state, pool ? pool.reserves[1].address : '')\n  );\n\n  const position = useAppSelector<ProtectedPositionGrouped | undefined>(\n    getPositionById(posGroupId ?? '')\n  );\n\n  const account = useAppSelector<string | undefined>(\n    (state) => state.user.account\n  );\n\n  const fetchClaimableRewards = async (account: string) => {\n    if (posGroupId && position) {\n      setClaimableRewards(position.rewardsAmount);\n    } else {\n      const pendingRewards = await fetchPendingRewards(account);\n      setClaimableRewards(pendingRewards);\n    }\n  };\n\n  const onSelect = (pool: Pool) => {\n    if (posGroupId) pushRewardsStakeByIDnPos(pool.pool_dlt_id, posGroupId);\n    else pushRewardsStakeByID(pool.pool_dlt_id);\n  };\n\n  useInterval(\n    async () => {\n      if (account) {\n        await fetchClaimableRewards(account);\n      }\n    },\n    account ? 15000 : null\n  );\n\n  useEffect(() => {\n    if (!account) {\n      setClaimableRewards(null);\n    }\n  }, [account]);\n\n  useEffect(() => {\n    if (new BigNumber(claimableRewards ?? 0).lt(bntAmount)) {\n      setErrorBalance('Insufficient Balance');\n    } else {\n      setErrorBalance('');\n    }\n  }, [bntAmount, claimableRewards]);\n\n  return {\n    claimableRewards,\n    account,\n    bntAmount,\n    setBntAmount,\n    bntAmountUsd,\n    setBntAmountUsd,\n    bnt,\n    errorBalance,\n    pools,\n    onSelect,\n    position,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}