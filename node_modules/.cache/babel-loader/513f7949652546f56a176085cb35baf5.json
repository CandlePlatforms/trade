{"ast":null,"code":"import { Web3Provider } from '@ethersproject/providers';\nimport { EthNetworks } from 'services/web3//types';\nimport { providers } from 'ethers';\nimport { buildAlchemyUrl } from 'services/web3/wallet/connectors';\nimport { currentNetwork$ } from 'services/observables/network';\nimport { take } from 'rxjs/operators';\nexport const getProvider = function () {\n  let network = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EthNetworks.Mainnet;\n  if (process.env.REACT_APP_ALCHEMY_MAINNET) return new providers.WebSocketProvider(buildAlchemyUrl(network));\n  return providers.getDefaultProvider(network);\n};\nexport const web3 = {\n  provider: getProvider()\n};\nexport const keepWSOpen = () => {\n  if (!(web3.provider instanceof providers.WebSocketProvider)) return;\n  setInterval(async () => {\n    //Extra check since TS doesnt detect things outside interval\n    if (web3.provider instanceof providers.WebSocketProvider) {\n      if (web3.provider._websocket.readyState === WebSocket.OPEN || web3.provider._websocket.readyState === WebSocket.CONNECTING) return;\n\n      try {\n        web3.provider._websocket.close();\n      } catch (error) {\n        console.error('Failed closing websocket', error);\n      }\n\n      try {\n        console.debug('Reconnecting websocket');\n        const network = await currentNetwork$.pipe(take(1)).toPromise();\n        web3.provider = new providers.WebSocketProvider(buildAlchemyUrl(network));\n      } catch (error) {\n        console.error('Failed init web3', error);\n      }\n    }\n  }, 7500);\n};\nexport const writeWeb3 = {\n  signer: window.ethereum ? new Web3Provider(window.ethereum).getSigner() : new providers.WebSocketProvider(buildAlchemyUrl(EthNetworks.Mainnet)).getSigner()\n};\nexport const setProvider = provider => {\n  web3.provider = provider;\n};\nexport const setSigner = signer => {\n  writeWeb3.signer = signer;\n};","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/web3/index.ts"],"names":["Web3Provider","EthNetworks","providers","buildAlchemyUrl","currentNetwork$","take","getProvider","network","Mainnet","process","env","REACT_APP_ALCHEMY_MAINNET","WebSocketProvider","getDefaultProvider","web3","provider","keepWSOpen","setInterval","_websocket","readyState","WebSocket","OPEN","CONNECTING","close","error","console","debug","pipe","toPromise","writeWeb3","signer","window","ethereum","getSigner","setProvider","setSigner"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,IAAT,QAAqB,gBAArB;AAEA,OAAO,MAAMC,WAAW,GAAG,YAEgC;AAAA,MADzDC,OACyD,uEADlCN,WAAW,CAACO,OACsB;AACzD,MAAIC,OAAO,CAACC,GAAR,CAAYC,yBAAhB,EACE,OAAO,IAAIT,SAAS,CAACU,iBAAd,CAAgCT,eAAe,CAACI,OAAD,CAA/C,CAAP;AAEF,SAAOL,SAAS,CAACW,kBAAV,CAA6BN,OAA7B,CAAP;AACD,CAPM;AASP,OAAO,MAAMO,IAAI,GAAG;AAClBC,EAAAA,QAAQ,EAAET,WAAW;AADH,CAAb;AAIP,OAAO,MAAMU,UAAU,GAAG,MAAM;AAC9B,MAAI,EAAEF,IAAI,CAACC,QAAL,YAAyBb,SAAS,CAACU,iBAArC,CAAJ,EAA6D;AAE7DK,EAAAA,WAAW,CAAC,YAAY;AACtB;AACA,QAAIH,IAAI,CAACC,QAAL,YAAyBb,SAAS,CAACU,iBAAvC,EAA0D;AACxD,UACEE,IAAI,CAACC,QAAL,CAAcG,UAAd,CAAyBC,UAAzB,KAAwCC,SAAS,CAACC,IAAlD,IACAP,IAAI,CAACC,QAAL,CAAcG,UAAd,CAAyBC,UAAzB,KAAwCC,SAAS,CAACE,UAFpD,EAIE;;AAEF,UAAI;AACFR,QAAAA,IAAI,CAACC,QAAL,CAAcG,UAAd,CAAyBK,KAAzB;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACD;;AACD,UAAI;AACFC,QAAAA,OAAO,CAACC,KAAR,CAAc,wBAAd;AACA,cAAMnB,OAAO,GAAG,MAAMH,eAAe,CAACuB,IAAhB,CAAqBtB,IAAI,CAAC,CAAD,CAAzB,EAA8BuB,SAA9B,EAAtB;AACAd,QAAAA,IAAI,CAACC,QAAL,GAAgB,IAAIb,SAAS,CAACU,iBAAd,CACdT,eAAe,CAACI,OAAD,CADD,CAAhB;AAGD,OAND,CAME,OAAOiB,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,kBAAd,EAAkCA,KAAlC;AACD;AACF;AACF,GAxBU,EAwBR,IAxBQ,CAAX;AAyBD,CA5BM;AA8BP,OAAO,MAAMK,SAAS,GAAG;AACvBC,EAAAA,MAAM,EAAEC,MAAM,CAACC,QAAP,GACJ,IAAIhC,YAAJ,CAAiB+B,MAAM,CAACC,QAAxB,EAAkCC,SAAlC,EADI,GAEJ,IAAI/B,SAAS,CAACU,iBAAd,CACET,eAAe,CAACF,WAAW,CAACO,OAAb,CADjB,EAEEyB,SAFF;AAHmB,CAAlB;AAQP,OAAO,MAAMC,WAAW,GACtBnB,QADyB,IAEtB;AACHD,EAAAA,IAAI,CAACC,QAAL,GAAgBA,QAAhB;AACD,CAJM;AAMP,OAAO,MAAMoB,SAAS,GAAIL,MAAD,IAAqC;AAC5DD,EAAAA,SAAS,CAACC,MAAV,GAAmBA,MAAnB;AACD,CAFM","sourcesContent":["import { Web3Provider } from '@ethersproject/providers';\nimport { EthNetworks } from 'services/web3//types';\nimport { providers } from 'ethers';\nimport { buildAlchemyUrl } from 'services/web3/wallet/connectors';\nimport { currentNetwork$ } from 'services/observables/network';\nimport { take } from 'rxjs/operators';\n\nexport const getProvider = (\n  network: EthNetworks = EthNetworks.Mainnet\n): providers.WebSocketProvider | providers.BaseProvider => {\n  if (process.env.REACT_APP_ALCHEMY_MAINNET)\n    return new providers.WebSocketProvider(buildAlchemyUrl(network));\n\n  return providers.getDefaultProvider(network);\n};\n\nexport const web3 = {\n  provider: getProvider(),\n};\n\nexport const keepWSOpen = () => {\n  if (!(web3.provider instanceof providers.WebSocketProvider)) return;\n\n  setInterval(async () => {\n    //Extra check since TS doesnt detect things outside interval\n    if (web3.provider instanceof providers.WebSocketProvider) {\n      if (\n        web3.provider._websocket.readyState === WebSocket.OPEN ||\n        web3.provider._websocket.readyState === WebSocket.CONNECTING\n      )\n        return;\n\n      try {\n        web3.provider._websocket.close();\n      } catch (error) {\n        console.error('Failed closing websocket', error);\n      }\n      try {\n        console.debug('Reconnecting websocket');\n        const network = await currentNetwork$.pipe(take(1)).toPromise();\n        web3.provider = new providers.WebSocketProvider(\n          buildAlchemyUrl(network)\n        );\n      } catch (error) {\n        console.error('Failed init web3', error);\n      }\n    }\n  }, 7500);\n};\n\nexport const writeWeb3 = {\n  signer: window.ethereum\n    ? new Web3Provider(window.ethereum).getSigner()\n    : new providers.WebSocketProvider(\n        buildAlchemyUrl(EthNetworks.Mainnet)\n      ).getSigner(),\n};\n\nexport const setProvider = (\n  provider: providers.WebSocketProvider | providers.BaseProvider\n) => {\n  web3.provider = provider;\n};\n\nexport const setSigner = (signer: providers.JsonRpcSigner) => {\n  writeWeb3.signer = signer;\n};\n"]},"metadata":{},"sourceType":"module"}