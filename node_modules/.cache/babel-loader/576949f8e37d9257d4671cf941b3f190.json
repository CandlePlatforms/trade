{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/components/tooltip/Tooltip.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef } from 'react';\nimport { TooltipPanel } from './TooltipPanel';\nimport { ReactComponent as IconInfo } from \"@svgr/webpack?-svgo,+titleProp,+ref!assets/icons/info-solid.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Tooltip = _ref => {\n  _s();\n\n  let {\n    content,\n    button = /*#__PURE__*/_jsxDEV(IconInfo, {\n      className: \"w-[10px] h-[10px] text-grey-4 dark:text-grey-0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }, this),\n    onClick,\n    placement\n  } = _ref;\n  const buttonRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      ref: buttonRef,\n      onClick: onClick,\n      children: button\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TooltipPanel, {\n      placement: placement,\n      targetRef: buttonRef,\n      children: typeof content === 'string' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-12\",\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this) : content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Tooltip, \"PvhYvZjqGdFMi5KDqD8tkkFprO8=\");\n\n_c = Tooltip;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tooltip\");","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/components/tooltip/Tooltip.tsx"],"names":["useRef","TooltipPanel","Tooltip","content","button","onClick","placement","buttonRef"],"mappings":";;;AAAA,SAA4BA,MAA5B,QAA0C,OAA1C;AACA,SAASC,YAAT,QAA6B,gBAA7B;;;;AAWA,OAAO,MAAMC,OAAO,GAAG,QAOH;AAAA;;AAAA,MAPI;AACtBC,IAAAA,OADsB;AAEtBC,IAAAA,MAAM,gBACJ,QAAC,QAAD;AAAU,MAAA,SAAS,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA,YAHoB;AAKtBC,IAAAA,OALsB;AAMtBC,IAAAA;AANsB,GAOJ;AAClB,QAAMC,SAAS,GAAGP,MAAM,CAA2B,IAA3B,CAAxB;AACA,sBACE;AAAA,4BACE;AAAQ,MAAA,GAAG,EAAEO,SAAb;AAAwB,MAAA,OAAO,EAAEF,OAAjC;AAAA,gBACGD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,YAAD;AAAc,MAAA,SAAS,EAAEE,SAAzB;AAAoC,MAAA,SAAS,EAAEC,SAA/C;AAAA,gBACG,OAAOJ,OAAP,KAAmB,QAAnB,gBACC;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,kBAA0BA;AAA1B;AAAA;AAAA;AAAA;AAAA,cADD,GAGCA;AAJJ;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AAcD,CAvBM;;GAAMD,O;;KAAAA,O","sourcesContent":["import { MouseEventHandler, useRef } from 'react';\nimport { TooltipPanel } from './TooltipPanel';\nimport { ReactComponent as IconInfo } from 'assets/icons/info-solid.svg';\nimport type * as PopperJS from '@popperjs/core';\n\ninterface TooltipProps {\n  button?: string | JSX.Element | JSX.Element[];\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  placement?: PopperJS.Placement;\n  content: string | JSX.Element | JSX.Element[];\n}\n\nexport const Tooltip = ({\n  content,\n  button = (\n    <IconInfo className=\"w-[10px] h-[10px] text-grey-4 dark:text-grey-0\" />\n  ),\n  onClick,\n  placement,\n}: TooltipProps) => {\n  const buttonRef = useRef<HTMLButtonElement | null>(null);\n  return (\n    <>\n      <button ref={buttonRef} onClick={onClick}>\n        {button}\n      </button>\n      <TooltipPanel placement={placement} targetRef={buttonRef}>\n        {typeof content === 'string' ? (\n          <div className=\"text-12\">{content}</div>\n        ) : (\n          content\n        )}\n      </TooltipPanel>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}