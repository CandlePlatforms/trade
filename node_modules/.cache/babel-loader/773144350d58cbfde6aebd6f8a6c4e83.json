{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/earn/portfolio/liquidityProtection/rewards/StakeRewardsBtn.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useAppSelector } from 'redux/index';\nimport { getProtectedPools } from 'redux/bancor/pool';\nimport { SelectPoolModal } from 'components/selectPoolModal/SelectPoolModal';\nimport { useNavigation } from 'services/router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StakeRewardsBtn = _ref => {\n  _s();\n\n  let {\n    buttonClass,\n    buttonLabel,\n    posGroupId\n  } = _ref;\n  const {\n    pushRewardsStakeByID,\n    pushRewardsStakeByIDnPos\n  } = useNavigation();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const pools = useAppSelector(getProtectedPools);\n\n  const onSelect = pool => {\n    if (posGroupId) pushRewardsStakeByIDnPos(pool.pool_dlt_id, posGroupId);else pushRewardsStakeByID(pool.pool_dlt_id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SelectPoolModal, {\n      pools: pools,\n      isOpen: isModalOpen,\n      setIsOpen: setIsModalOpen,\n      onSelect: onSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsModalOpen(true),\n      className: buttonClass,\n      children: buttonLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(StakeRewardsBtn, \"Yp6uyV7R/mmd5G8Cwd90o9WYsvU=\", false, function () {\n  return [useNavigation, useAppSelector];\n});\n\n_c = StakeRewardsBtn;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeRewardsBtn\");","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/earn/portfolio/liquidityProtection/rewards/StakeRewardsBtn.tsx"],"names":["useState","useAppSelector","getProtectedPools","SelectPoolModal","useNavigation","StakeRewardsBtn","buttonClass","buttonLabel","posGroupId","pushRewardsStakeByID","pushRewardsStakeByIDnPos","isModalOpen","setIsModalOpen","pools","onSelect","pool","pool_dlt_id"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,cAAT,QAA+B,aAA/B;AAEA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,eAAT,QAAgC,4CAAhC;AACA,SAASC,aAAT,QAA8B,iBAA9B;;;AAQA,OAAO,MAAMC,eAAe,GAAG,QAIlB;AAAA;;AAAA,MAJmB;AAC9BC,IAAAA,WAD8B;AAE9BC,IAAAA,WAF8B;AAG9BC,IAAAA;AAH8B,GAInB;AACX,QAAM;AAAEC,IAAAA,oBAAF;AAAwBC,IAAAA;AAAxB,MAAqDN,aAAa,EAAxE;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAMa,KAAK,GAAGZ,cAAc,CAASC,iBAAT,CAA5B;;AAEA,QAAMY,QAAQ,GAAIC,IAAD,IAAgB;AAC/B,QAAIP,UAAJ,EAAgBE,wBAAwB,CAACK,IAAI,CAACC,WAAN,EAAmBR,UAAnB,CAAxB,CAAhB,KACKC,oBAAoB,CAACM,IAAI,CAACC,WAAN,CAApB;AACN,GAHD;;AAKA,sBACE;AAAA,4BACE,QAAC,eAAD;AACE,MAAA,KAAK,EAAEH,KADT;AAEE,MAAA,MAAM,EAAEF,WAFV;AAGE,MAAA,SAAS,EAAEC,cAHb;AAIE,MAAA,QAAQ,EAAEE;AAJZ;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAQ,MAAA,OAAO,EAAE,MAAMF,cAAc,CAAC,IAAD,CAArC;AAA6C,MAAA,SAAS,EAAEN,WAAxD;AAAA,gBACGC;AADH;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA,kBADF;AAaD,CA3BM;;GAAMF,e;UAKgDD,a,EAE7CH,c;;;KAPHI,e","sourcesContent":["import { useState } from 'react';\nimport { useAppSelector } from 'redux/index';\nimport { Pool } from 'services/observables/tokens';\nimport { getProtectedPools } from 'redux/bancor/pool';\nimport { SelectPoolModal } from 'components/selectPoolModal/SelectPoolModal';\nimport { useNavigation } from 'services/router';\n\ninterface Props {\n  buttonLabel: string;\n  buttonClass: string;\n  posGroupId?: string;\n}\n\nexport const StakeRewardsBtn = ({\n  buttonClass,\n  buttonLabel,\n  posGroupId,\n}: Props) => {\n  const { pushRewardsStakeByID, pushRewardsStakeByIDnPos } = useNavigation();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const pools = useAppSelector<Pool[]>(getProtectedPools);\n\n  const onSelect = (pool: Pool) => {\n    if (posGroupId) pushRewardsStakeByIDnPos(pool.pool_dlt_id, posGroupId);\n    else pushRewardsStakeByID(pool.pool_dlt_id);\n  };\n\n  return (\n    <>\n      <SelectPoolModal\n        pools={pools}\n        isOpen={isModalOpen}\n        setIsOpen={setIsModalOpen}\n        onSelect={onSelect}\n      />\n      <button onClick={() => setIsModalOpen(true)} className={buttonClass}>\n        {buttonLabel}\n      </button>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}