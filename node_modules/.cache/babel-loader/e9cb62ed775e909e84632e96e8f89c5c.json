{"ast":null,"code":"import { createSelector, createSlice } from '@reduxjs/toolkit';\nimport { orderBy } from 'lodash';\nimport { getTokenWithoutImage } from 'services/web3/config';\nexport const initialState = {\n  tokenLists: [],\n  tokens: [],\n  keeperDaoTokens: [],\n  apiTokens: [],\n  allTokens: [],\n  bntPrice: null\n};\nconst bancorSlice = createSlice({\n  name: 'bancor',\n  initialState,\n  reducers: {\n    setTokenLists: (state, action) => {\n      state.tokenLists = action.payload;\n    },\n    setTokenList: (state, action) => {\n      state.tokens = action.payload;\n    },\n    setAllTokens: (state, action) => {\n      state.allTokens = action.payload;\n    },\n    setApiTokens: (state, action) => {\n      state.apiTokens = action.payload;\n    },\n    updateTokens: (state, action) => {\n      const tokenToUpdate = action.payload;\n      state.tokens = state.tokens.map(token => tokenToUpdate.find(updatedToken => updatedToken.address === token.address) || token);\n    },\n    setKeeperDaoTokens: (state, action) => {\n      state.keeperDaoTokens = action.payload;\n    },\n    setBntPrice: (state, action) => {\n      state.bntPrice = action.payload;\n    }\n  }\n});\nexport const {\n  setTokenLists,\n  setTokenList,\n  setAllTokens,\n  setApiTokens,\n  setKeeperDaoTokens,\n  updateTokens,\n  setBntPrice\n} = bancorSlice.actions;\n\nconst tokens = state => state.bancor.tokens;\n\nconst apiTokens = state => state.bancor.apiTokens;\n\nexport const getTokenById = createSelector(tokens, apiTokens, (_, id) => id, (tokens, apiTokens, id) => {\n  const token = tokens.find(t => t.address === id);\n  if (token) return token;\n  const apiToken = apiTokens.find(t => t.dlt_id === id);\n  if (apiToken) return getTokenWithoutImage(apiToken);\n});\nexport const getTopMovers = createSelector(state => state.bancor.tokens, tokens => {\n  const filtered = tokens.filter(t => {\n    var _t$liquidity;\n\n    return t.isProtected && Number((_t$liquidity = t.liquidity) !== null && _t$liquidity !== void 0 ? _t$liquidity : 0) > 100000;\n  });\n  return orderBy(filtered, 'price_change_24', 'desc').slice(0, 20);\n});\nexport const bancor = bancorSlice.reducer;","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/redux/bancor/bancor.ts"],"names":["createSelector","createSlice","orderBy","getTokenWithoutImage","initialState","tokenLists","tokens","keeperDaoTokens","apiTokens","allTokens","bntPrice","bancorSlice","name","reducers","setTokenLists","state","action","payload","setTokenList","setAllTokens","setApiTokens","updateTokens","tokenToUpdate","map","token","find","updatedToken","address","setKeeperDaoTokens","setBntPrice","actions","bancor","getTokenById","_","id","t","apiToken","dlt_id","getTopMovers","filtered","filter","isProtected","Number","liquidity","slice","reducer"],"mappings":"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","sourcesContent":["import { createSelector, createSlice } from '@reduxjs/toolkit';\nimport { KeeprDaoToken } from 'services/api/keeperDao';\nimport { TokenList, Token } from 'services/observables/tokens';\nimport { RootState } from 'redux/index';\nimport { orderBy } from 'lodash';\nimport { APIToken } from 'services/api/bancor';\nimport { getTokenWithoutImage } from 'services/web3/config';\n\ninterface BancorState {\n  tokenLists: TokenList[];\n  tokens: Token[];\n  keeperDaoTokens: KeeprDaoToken[];\n  allTokens: Token[];\n  apiTokens: APIToken[];\n  bntPrice: string | null;\n}\n\nexport const initialState: BancorState = {\n  tokenLists: [],\n  tokens: [],\n  keeperDaoTokens: [],\n  apiTokens: [],\n  allTokens: [],\n  bntPrice: null,\n};\n\nconst bancorSlice = createSlice({\n  name: 'bancor',\n  initialState,\n  reducers: {\n    setTokenLists: (state, action) => {\n      state.tokenLists = action.payload;\n    },\n    setTokenList: (state, action) => {\n      state.tokens = action.payload;\n    },\n    setAllTokens: (state, action) => {\n      state.allTokens = action.payload;\n    },\n    setApiTokens: (state, action) => {\n      state.apiTokens = action.payload;\n    },\n    updateTokens: (state, action) => {\n      const tokenToUpdate = action.payload as Token[];\n      state.tokens = state.tokens.map(\n        (token) =>\n          tokenToUpdate.find(\n            (updatedToken) => updatedToken.address === token.address\n          ) || token\n      );\n    },\n    setKeeperDaoTokens: (state, action) => {\n      state.keeperDaoTokens = action.payload;\n    },\n    setBntPrice: (state, action) => {\n      state.bntPrice = action.payload;\n    },\n  },\n});\n\nexport const {\n  setTokenLists,\n  setTokenList,\n  setAllTokens,\n  setApiTokens,\n  setKeeperDaoTokens,\n  updateTokens,\n  setBntPrice,\n} = bancorSlice.actions;\n\nconst tokens = (state: RootState) => state.bancor.tokens;\nconst apiTokens = (state: RootState) => state.bancor.apiTokens;\n\nexport const getTokenById = createSelector(\n  tokens,\n  apiTokens,\n  (_: any, id: string) => id,\n  (tokens: Token[], apiTokens: APIToken[], id) => {\n    const token = tokens.find((t) => t.address === id);\n    if (token) return token;\n\n    const apiToken = apiTokens.find((t) => t.dlt_id === id);\n    if (apiToken) return getTokenWithoutImage(apiToken);\n  }\n);\n\nexport const getTopMovers = createSelector(\n  (state: RootState) => state.bancor.tokens,\n  (tokens: Token[]) => {\n    const filtered = tokens.filter(\n      (t) => t.isProtected && Number(t.liquidity ?? 0) > 100000\n    );\n    return orderBy(filtered, 'price_change_24', 'desc').slice(0, 20);\n  }\n);\n\nexport const bancor = bancorSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}