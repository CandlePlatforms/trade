{"ast":null,"code":"/* Autogenerated file. Do not edit manually. */\n\n/* tslint:disable */\n\n/* eslint-disable */\nimport { Contract, utils } from \"ethers\";\nconst _abi = [{\n  inputs: [{\n    components: [{\n      internalType: \"address\",\n      name: \"target\",\n      type: \"address\"\n    }, {\n      internalType: \"bytes\",\n      name: \"callData\",\n      type: \"bytes\"\n    }],\n    internalType: \"struct Multicall2.Call[]\",\n    name: \"calls\",\n    type: \"tuple[]\"\n  }],\n  name: \"aggregate\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"blockNumber\",\n    type: \"uint256\"\n  }, {\n    internalType: \"bytes[]\",\n    name: \"returnData\",\n    type: \"bytes[]\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    components: [{\n      internalType: \"address\",\n      name: \"target\",\n      type: \"address\"\n    }, {\n      internalType: \"bytes\",\n      name: \"callData\",\n      type: \"bytes\"\n    }],\n    internalType: \"struct Multicall2.Call[]\",\n    name: \"calls\",\n    type: \"tuple[]\"\n  }],\n  name: \"blockAndAggregate\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"blockNumber\",\n    type: \"uint256\"\n  }, {\n    internalType: \"bytes32\",\n    name: \"blockHash\",\n    type: \"bytes32\"\n  }, {\n    components: [{\n      internalType: \"bool\",\n      name: \"success\",\n      type: \"bool\"\n    }, {\n      internalType: \"bytes\",\n      name: \"returnData\",\n      type: \"bytes\"\n    }],\n    internalType: \"struct Multicall2.Result[]\",\n    name: \"returnData\",\n    type: \"tuple[]\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"blockNumber\",\n    type: \"uint256\"\n  }],\n  name: \"getBlockHash\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"blockHash\",\n    type: \"bytes32\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"getBlockNumber\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"blockNumber\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"getCurrentBlockCoinbase\",\n  outputs: [{\n    internalType: \"address\",\n    name: \"coinbase\",\n    type: \"address\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"getCurrentBlockDifficulty\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"difficulty\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"getCurrentBlockGasLimit\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"gaslimit\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"getCurrentBlockTimestamp\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"timestamp\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"addr\",\n    type: \"address\"\n  }],\n  name: \"getEthBalance\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"balance\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"getLastBlockHash\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"blockHash\",\n    type: \"bytes32\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"bool\",\n    name: \"requireSuccess\",\n    type: \"bool\"\n  }, {\n    components: [{\n      internalType: \"address\",\n      name: \"target\",\n      type: \"address\"\n    }, {\n      internalType: \"bytes\",\n      name: \"callData\",\n      type: \"bytes\"\n    }],\n    internalType: \"struct Multicall2.Call[]\",\n    name: \"calls\",\n    type: \"tuple[]\"\n  }],\n  name: \"tryAggregate\",\n  outputs: [{\n    components: [{\n      internalType: \"bool\",\n      name: \"success\",\n      type: \"bool\"\n    }, {\n      internalType: \"bytes\",\n      name: \"returnData\",\n      type: \"bytes\"\n    }],\n    internalType: \"struct Multicall2.Result[]\",\n    name: \"returnData\",\n    type: \"tuple[]\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"bool\",\n    name: \"requireSuccess\",\n    type: \"bool\"\n  }, {\n    components: [{\n      internalType: \"address\",\n      name: \"target\",\n      type: \"address\"\n    }, {\n      internalType: \"bytes\",\n      name: \"callData\",\n      type: \"bytes\"\n    }],\n    internalType: \"struct Multicall2.Call[]\",\n    name: \"calls\",\n    type: \"tuple[]\"\n  }],\n  name: \"tryBlockAndAggregate\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"blockNumber\",\n    type: \"uint256\"\n  }, {\n    internalType: \"bytes32\",\n    name: \"blockHash\",\n    type: \"bytes32\"\n  }, {\n    components: [{\n      internalType: \"bool\",\n      name: \"success\",\n      type: \"bool\"\n    }, {\n      internalType: \"bytes\",\n      name: \"returnData\",\n      type: \"bytes\"\n    }],\n    internalType: \"struct Multicall2.Result[]\",\n    name: \"returnData\",\n    type: \"tuple[]\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nexport class Multicall__factory {\n  static createInterface() {\n    return new utils.Interface(_abi);\n  }\n\n  static connect(address, signerOrProvider) {\n    return new Contract(address, _abi, signerOrProvider);\n  }\n\n}\nMulticall__factory.abi = _abi;","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/web3/abis/types/factories/Multicall__factory.ts"],"names":["Contract","utils","_abi","inputs","components","internalType","name","type","outputs","stateMutability","Multicall__factory","createInterface","Interface","connect","address","signerOrProvider","abi"],"mappings":"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","sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport type { Multicall, MulticallInterface } from \"../Multicall\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"aggregate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes[]\",\n        name: \"returnData\",\n        type: \"bytes[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"blockAndAggregate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"blockHash\",\n        type: \"bytes32\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"success\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"returnData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getBlockHash\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"blockHash\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBlockNumber\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCurrentBlockCoinbase\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"coinbase\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCurrentBlockDifficulty\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"difficulty\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCurrentBlockGasLimit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"gaslimit\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCurrentBlockTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"addr\",\n        type: \"address\",\n      },\n    ],\n    name: \"getEthBalance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLastBlockHash\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"blockHash\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bool\",\n        name: \"requireSuccess\",\n        type: \"bool\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryAggregate\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"success\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"returnData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bool\",\n        name: \"requireSuccess\",\n        type: \"bool\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryBlockAndAggregate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"blockHash\",\n        type: \"bytes32\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"success\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"returnData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nexport class Multicall__factory {\n  static readonly abi = _abi;\n  static createInterface(): MulticallInterface {\n    return new utils.Interface(_abi) as MulticallInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Multicall {\n    return new Contract(address, _abi, signerOrProvider) as Multicall;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}