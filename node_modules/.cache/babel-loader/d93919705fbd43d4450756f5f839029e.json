{"ast":null,"code":"import { take } from 'rxjs/operators';\nimport { networkVars$ } from 'services/observables/network';\nimport { shrinkToken, expandToken } from 'utils/formulas';\nimport { web3, writeWeb3 } from 'services/web3';\nimport { ErrorCode } from '../types';\nimport { Governance__factory } from '../abis/types';\nimport dayjs from 'utils/dayjs';\nexport const getStakedAmount = async (user, govToken) => {\n  const networkVars = await networkVars$.pipe(take(1)).toPromise();\n  const govContract = Governance__factory.connect(networkVars.governanceContractAddress, web3.provider);\n  const amount = await govContract.votesOf(user);\n  return shrinkToken(amount.toString(), govToken.decimals);\n};\nexport const stakeAmount = async (amount, govToken, onHash, onCompleted, rejected, failed) => {\n  try {\n    const expandedAmount = expandToken(amount, govToken.decimals);\n    const networkVars = await networkVars$.pipe(take(1)).toPromise();\n    const govContract = Governance__factory.connect(networkVars.governanceContractAddress, writeWeb3.signer);\n    const tx = await govContract.stake(expandedAmount);\n    onHash(tx.hash);\n    await tx.wait();\n    onCompleted();\n  } catch (e) {\n    if (e.code === ErrorCode.DeniedTx) rejected();else failed();\n  }\n};\nexport const unstakeAmount = async (amount, govToken, onHash, onCompleted, rejected, failed) => {\n  try {\n    const expandedAmount = expandToken(amount, govToken.decimals);\n    const networkVars = await networkVars$.pipe(take(1)).toPromise();\n    const govContract = Governance__factory.connect(networkVars.governanceContractAddress, writeWeb3.signer);\n    const tx = await govContract.unstake(expandedAmount);\n    onHash(tx.hash);\n    await tx.wait();\n    onCompleted();\n  } catch (e) {\n    if (e.code === ErrorCode.DeniedTx) rejected();else failed();\n  }\n};\nexport const getUnstakeTimer = async user => {\n  const now = dayjs().unix() * 1000;\n  const networkVars = await networkVars$.pipe(take(1)).toPromise();\n  const govContract = Governance__factory.connect(networkVars.governanceContractAddress, web3.provider);\n  const locks = await govContract.voteLocks(user);\n  const time = Number(locks) * 1000;\n  if (time - now > 0) return time;\n  return undefined;\n};","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/web3/governance/governance.ts"],"names":["take","networkVars$","shrinkToken","expandToken","web3","writeWeb3","ErrorCode","Governance__factory","dayjs","getStakedAmount","user","govToken","networkVars","pipe","toPromise","govContract","connect","governanceContractAddress","provider","amount","votesOf","toString","decimals","stakeAmount","onHash","onCompleted","rejected","failed","expandedAmount","signer","tx","stake","hash","wait","e","code","DeniedTx","unstakeAmount","unstake","getUnstakeTimer","now","unix","locks","voteLocks","time","Number","undefined"],"mappings":"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","sourcesContent":["import { take } from 'rxjs/operators';\nimport { networkVars$ } from 'services/observables/network';\nimport { Token } from 'services/observables/tokens';\nimport { shrinkToken, expandToken } from 'utils/formulas';\nimport { web3, writeWeb3 } from 'services/web3';\nimport { ErrorCode } from '../types';\nimport { Governance__factory } from '../abis/types';\nimport dayjs from 'utils/dayjs';\n\nexport const getStakedAmount = async (\n  user: string,\n  govToken: Token\n): Promise<string> => {\n  const networkVars = await networkVars$.pipe(take(1)).toPromise();\n  const govContract = Governance__factory.connect(\n    networkVars.governanceContractAddress,\n    web3.provider\n  );\n  const amount = await govContract.votesOf(user);\n  return shrinkToken(amount.toString(), govToken.decimals);\n};\n\nexport const stakeAmount = async (\n  amount: string,\n  govToken: Token,\n  onHash: (txHash: string) => void,\n  onCompleted: Function,\n  rejected: Function,\n  failed: Function\n) => {\n  try {\n    const expandedAmount = expandToken(amount, govToken.decimals);\n\n    const networkVars = await networkVars$.pipe(take(1)).toPromise();\n    const govContract = Governance__factory.connect(\n      networkVars.governanceContractAddress,\n      writeWeb3.signer\n    );\n\n    const tx = await govContract.stake(expandedAmount);\n    onHash(tx.hash);\n    await tx.wait();\n    onCompleted();\n  } catch (e: any) {\n    if (e.code === ErrorCode.DeniedTx) rejected();\n    else failed();\n  }\n};\n\nexport const unstakeAmount = async (\n  amount: string,\n  govToken: Token,\n  onHash: (txHash: string) => void,\n  onCompleted: Function,\n  rejected: Function,\n  failed: Function\n) => {\n  try {\n    const expandedAmount = expandToken(amount, govToken.decimals);\n\n    const networkVars = await networkVars$.pipe(take(1)).toPromise();\n    const govContract = Governance__factory.connect(\n      networkVars.governanceContractAddress,\n      writeWeb3.signer\n    );\n\n    const tx = await govContract.unstake(expandedAmount);\n    onHash(tx.hash);\n    await tx.wait();\n    onCompleted();\n  } catch (e: any) {\n    if (e.code === ErrorCode.DeniedTx) rejected();\n    else failed();\n  }\n};\n\nexport const getUnstakeTimer = async (user: string) => {\n  const now = dayjs().unix() * 1000;\n  const networkVars = await networkVars$.pipe(take(1)).toPromise();\n  const govContract = Governance__factory.connect(\n    networkVars.governanceContractAddress,\n    web3.provider\n  );\n  const locks = await govContract.voteLocks(user);\n  const time = Number(locks) * 1000;\n  if (time - now > 0) return time;\n\n  return undefined;\n};\n"]},"metadata":{},"sourceType":"module"}