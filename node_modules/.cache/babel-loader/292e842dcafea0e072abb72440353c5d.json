{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged, map, shareReplay, take } from 'rxjs/operators';\nimport { getNetworkVariables } from 'services/web3/config';\nimport { getProvider, setProvider } from 'services/web3';\nimport { EthNetworks } from 'services/web3/types';\nexport const getChainID = chain => typeof chain === 'string' ? parseInt(chain) : chain;\nexport const currentNetworkReceiver$ = new BehaviorSubject(EthNetworks.Mainnet);\nexport const currentNetwork$ = currentNetworkReceiver$.pipe(distinctUntilChanged(), shareReplay(1));\nexport const setNetwork = async chainId => {\n  const currentChain = await currentNetworkReceiver$.pipe(take(1)).toPromise();\n\n  if ((chainId === EthNetworks.Mainnet || chainId === EthNetworks.Ropsten) && currentChain !== chainId) {\n    setProvider(getProvider(chainId));\n    currentNetworkReceiver$.next(chainId);\n  }\n};\nexport const networkVars$ = currentNetwork$.pipe(map(getNetworkVariables), shareReplay(1));","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/observables/network.ts"],"names":["BehaviorSubject","distinctUntilChanged","map","shareReplay","take","getNetworkVariables","getProvider","setProvider","EthNetworks","getChainID","chain","parseInt","currentNetworkReceiver$","Mainnet","currentNetwork$","pipe","setNetwork","chainId","currentChain","toPromise","Ropsten","next","networkVars$"],"mappings":"AAAA,SAASA,eAAT,QAAgC,MAAhC;AACA,SAASC,oBAAT,EAA+BC,GAA/B,EAAoCC,WAApC,EAAiDC,IAAjD,QAA6D,gBAA7D;AACA,SAASC,mBAAT,QAAoC,sBAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,eAAzC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAEA,OAAO,MAAMC,UAAU,GAAIC,KAAD,IACxB,OAAOA,KAAP,KAAiB,QAAjB,GAA4BC,QAAQ,CAACD,KAAD,CAApC,GAA8CA,KADzC;AAGP,OAAO,MAAME,uBAAuB,GAAG,IAAIZ,eAAJ,CACrCQ,WAAW,CAACK,OADyB,CAAhC;AAIP,OAAO,MAAMC,eAAe,GAAGF,uBAAuB,CAACG,IAAxB,CAC7Bd,oBAAoB,EADS,EAE7BE,WAAW,CAAC,CAAD,CAFkB,CAAxB;AAKP,OAAO,MAAMa,UAAU,GAAG,MAAOC,OAAP,IAAgC;AACxD,QAAMC,YAAY,GAAG,MAAMN,uBAAuB,CAACG,IAAxB,CAA6BX,IAAI,CAAC,CAAD,CAAjC,EAAsCe,SAAtC,EAA3B;;AACA,MACE,CAACF,OAAO,KAAKT,WAAW,CAACK,OAAxB,IAAmCI,OAAO,KAAKT,WAAW,CAACY,OAA5D,KACAF,YAAY,KAAKD,OAFnB,EAGE;AACAV,IAAAA,WAAW,CAACD,WAAW,CAACW,OAAD,CAAZ,CAAX;AACAL,IAAAA,uBAAuB,CAACS,IAAxB,CAA6BJ,OAA7B;AACD;AACF,CATM;AAWP,OAAO,MAAMK,YAAY,GAAGR,eAAe,CAACC,IAAhB,CAC1Bb,GAAG,CAACG,mBAAD,CADuB,EAE1BF,WAAW,CAAC,CAAD,CAFe,CAArB","sourcesContent":["import { BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged, map, shareReplay, take } from 'rxjs/operators';\nimport { getNetworkVariables } from 'services/web3/config';\nimport { getProvider, setProvider } from 'services/web3';\nimport { EthNetworks } from 'services/web3/types';\n\nexport const getChainID = (chain: string | number): EthNetworks =>\n  typeof chain === 'string' ? parseInt(chain) : chain;\n\nexport const currentNetworkReceiver$ = new BehaviorSubject<number>(\n  EthNetworks.Mainnet\n);\n\nexport const currentNetwork$ = currentNetworkReceiver$.pipe(\n  distinctUntilChanged(),\n  shareReplay(1)\n);\n\nexport const setNetwork = async (chainId: EthNetworks) => {\n  const currentChain = await currentNetworkReceiver$.pipe(take(1)).toPromise();\n  if (\n    (chainId === EthNetworks.Mainnet || chainId === EthNetworks.Ropsten) &&\n    currentChain !== chainId\n  ) {\n    setProvider(getProvider(chainId));\n    currentNetworkReceiver$.next(chainId);\n  }\n};\n\nexport const networkVars$ = currentNetwork$.pipe(\n  map(getNetworkVariables),\n  shareReplay(1)\n);\n"]},"metadata":{},"sourceType":"module"}