{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/pages/earn/pools/AddLiquidity.tsx\",\n    _s = $RefreshSig$();\n\nimport { getPoolById } from 'redux/bancor/pool';\nimport { AddLiquiditySingle } from 'elements/earn/pools/addLiquidity/single/AddLiquiditySingle';\nimport { AddLiquidityDual } from 'elements/earn/pools/addLiquidity/dual/AddLiquidityDual';\nimport { AddLiquidityEmpty } from 'elements/earn/pools/addLiquidity/empty/AddLiquidityEmpty';\nimport { useAppSelector } from 'redux/index';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { WidgetLoading } from 'components/widgets/WidgetLoading';\nimport { WidgetError } from 'components/widgets/WidgetError';\nimport { fetchReserveBalances } from 'services/web3/liquidity/liquidity';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AddLiquidity = /*#__PURE__*/React.memo(_c = _s(props => {\n  _s();\n\n  const {\n    id\n  } = props.match.params;\n  const {\n    status,\n    pool\n  } = useAppSelector(getPoolById(id));\n  const [isCheckingType, setIsCheckingType] = useState(false);\n  const [type, setType] = useState('');\n  const [reserveBalances, setReserveBalances] = useState({\n    tknBalance: '0',\n    bntBalance: '0'\n  });\n  const checkType = useCallback(async () => {\n    if (!pool) {\n      return;\n    }\n\n    setIsCheckingType(true);\n\n    if (pool.isProtected) {\n      setType('single');\n    } else {\n      const {\n        tknBalance,\n        bntBalance\n      } = await fetchReserveBalances(pool);\n      setReserveBalances({\n        tknBalance,\n        bntBalance\n      });\n      const isPoolEmpty = [tknBalance, bntBalance].some(b => new BigNumber(b).eq(0));\n\n      if (isPoolEmpty) {\n        setType('empty');\n      } else {\n        setType('dual');\n      }\n    }\n\n    setIsCheckingType(false);\n  }, [pool]);\n  useEffect(() => {\n    void checkType();\n  }, [id, checkType]);\n\n  const isLoading = () => {\n    return status === 'loading' || isCheckingType;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading() ? /*#__PURE__*/_jsxDEV(WidgetLoading, {\n      title: \"Add Liquidity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !pool ? /*#__PURE__*/_jsxDEV(WidgetError, {\n        title: \"Add Liquidity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [type === 'single' && /*#__PURE__*/_jsxDEV(AddLiquiditySingle, {\n          pool: pool\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 39\n        }, this), type === 'dual' && /*#__PURE__*/_jsxDEV(AddLiquidityDual, {\n          pool: pool,\n          reserveBalances: reserveBalances\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 19\n        }, this), type === 'empty' && /*#__PURE__*/_jsxDEV(AddLiquidityEmpty, {\n          pool: pool\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 7\n  }, this);\n}, \"JtICEFJLG/SJ7F7/k+CSVfR76Ts=\", false, function () {\n  return [useAppSelector];\n}));\n_c2 = AddLiquidity;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AddLiquidity$React.memo\");\n$RefreshReg$(_c2, \"AddLiquidity\");","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/pages/earn/pools/AddLiquidity.tsx"],"names":["getPoolById","AddLiquiditySingle","AddLiquidityDual","AddLiquidityEmpty","useAppSelector","React","useCallback","useEffect","useState","BigNumber","WidgetLoading","WidgetError","fetchReserveBalances","AddLiquidity","memo","props","id","match","params","status","pool","isCheckingType","setIsCheckingType","type","setType","reserveBalances","setReserveBalances","tknBalance","bntBalance","checkType","isProtected","isPoolEmpty","some","b","eq","isLoading"],"mappings":"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","sourcesContent":["import { getPoolById, SelectedPool } from 'redux/bancor/pool';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { AddLiquiditySingle } from 'elements/earn/pools/addLiquidity/single/AddLiquiditySingle';\nimport { AddLiquidityDual } from 'elements/earn/pools/addLiquidity/dual/AddLiquidityDual';\nimport { AddLiquidityEmpty } from 'elements/earn/pools/addLiquidity/empty/AddLiquidityEmpty';\nimport { useAppSelector } from 'redux/index';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { WidgetLoading } from 'components/widgets/WidgetLoading';\nimport { WidgetError } from 'components/widgets/WidgetError';\nimport { fetchReserveBalances } from 'services/web3/liquidity/liquidity';\n\nexport const AddLiquidity = React.memo(\n  (props: RouteComponentProps<{ id: string }>) => {\n    const { id } = props.match.params;\n    const { status, pool } = useAppSelector<SelectedPool>(getPoolById(id));\n    const [isCheckingType, setIsCheckingType] = useState(false);\n    const [type, setType] = useState('');\n    const [reserveBalances, setReserveBalances] = useState({\n      tknBalance: '0',\n      bntBalance: '0',\n    });\n\n    const checkType = useCallback(async () => {\n      if (!pool) {\n        return;\n      }\n      setIsCheckingType(true);\n      if (pool.isProtected) {\n        setType('single');\n      } else {\n        const { tknBalance, bntBalance } = await fetchReserveBalances(pool);\n        setReserveBalances({ tknBalance, bntBalance });\n        const isPoolEmpty = [tknBalance, bntBalance].some((b) =>\n          new BigNumber(b).eq(0)\n        );\n\n        if (isPoolEmpty) {\n          setType('empty');\n        } else {\n          setType('dual');\n        }\n      }\n      setIsCheckingType(false);\n    }, [pool]);\n\n    useEffect(() => {\n      void checkType();\n    }, [id, checkType]);\n\n    const isLoading = () => {\n      return status === 'loading' || isCheckingType;\n    };\n\n    return (\n      <div>\n        {isLoading() ? (\n          <WidgetLoading title=\"Add Liquidity\" />\n        ) : (\n          <div>\n            {!pool ? (\n              <WidgetError title=\"Add Liquidity\" />\n            ) : (\n              <div>\n                {type === 'single' && <AddLiquiditySingle pool={pool} />}\n                {type === 'dual' && (\n                  <AddLiquidityDual\n                    pool={pool}\n                    reserveBalances={reserveBalances}\n                  />\n                )}\n                {type === 'empty' && <AddLiquidityEmpty pool={pool} />}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}