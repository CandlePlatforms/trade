{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/modalApprove/modalApprove.tsx\",\n    _s = $RefreshSig$();\n\nimport { Modal } from 'components/modal/Modal';\nimport { ReactComponent as IconLock } from \"@svgr/webpack?-svgo,+titleProp,+ref!assets/icons/lock.svg\";\nimport { addNotification, NotificationType } from 'redux/notification/notification';\nimport { setNetworkContractApproval } from 'services/web3/approval';\nimport { useDispatch } from 'react-redux';\nimport { web3 } from 'services/web3';\nimport { wait } from 'utils/pureFunctions';\nimport { sendConversionApprovedEvent } from 'services/api/googleTagManager';\nimport { ErrorCode } from 'services/web3/types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModalApprove = _ref => {\n  _s();\n\n  let {\n    setIsOpen,\n    isOpen,\n    amount,\n    fromToken,\n    handleApproved,\n    waitForApproval,\n    contract\n  } = _ref;\n  const dispatch = useDispatch();\n  if (!fromToken) return null; // Wait for user to choose approval and proceed with approval based on user selection\n  // Prop amount is UNDEFINED when UNLIMITED\n\n  const approve = async amount => {\n    try {\n      setIsOpen(false);\n      const isUnlimited = amount === undefined;\n      sendConversionApprovedEvent(isUnlimited);\n      const txHash = await setNetworkContractApproval(fromToken, contract, amount);\n      dispatch(addNotification({\n        type: NotificationType.pending,\n        title: 'Pending Confirmation',\n        msg: `Approve ${fromToken.symbol} is pending confirmation`,\n        updatedInfo: {\n          successTitle: 'Transaction Confirmed',\n          successMsg: `${amount || 'Unlimited'} approval set for ${fromToken.symbol}`,\n          errorTitle: 'Transaction Failed',\n          errorMsg: `${fromToken.symbol} approval had failed. Please try again or contact support.`\n        },\n        txHash\n      }));\n\n      if (waitForApproval) {\n        let tx = null;\n\n        while (tx === null) try {\n          await wait(2000);\n          tx = await web3.provider.getTransactionReceipt(txHash);\n        } catch (error) {}\n      }\n\n      handleApproved();\n    } catch (e) {\n      setIsOpen(false);\n      if (e.code === ErrorCode.DeniedTx) dispatch(addNotification({\n        type: NotificationType.error,\n        title: 'Transaction Rejected',\n        msg: 'You rejected the transaction. If this was by mistake, please try again.'\n      }));else addNotification({\n        type: NotificationType.error,\n        title: 'Transaction Failed',\n        msg: `${fromToken.symbol} approval had failed. Please try again or contact support.`\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: 'Swap',\n    setIsOpen: setIsOpen,\n    isOpen: isOpen,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-10\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col items-center text-12 mb-20\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center items-center w-[52px] h-[52px] bg-primary rounded-full mb-14\",\n          children: /*#__PURE__*/_jsxDEV(IconLock, {\n            className: \"w-[22px] text-white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-20 mb-8\",\n          children: [\"Approve \", fromToken.symbol]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-center text-grey-5\",\n          children: [\"Before you can proceed, you need to approve \", fromToken.symbol, ' ', \"spending.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => approve(),\n          className: 'btn-primary w-full my-15',\n          children: \"Approve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-center text-grey-5\",\n          children: \"Want to approve before each transaction?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => approve(amount),\n          className: \"underline\",\n          children: \"Approve limited permission\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ModalApprove, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c = ModalApprove;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalApprove\");","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/modalApprove/modalApprove.tsx"],"names":["Modal","addNotification","NotificationType","setNetworkContractApproval","useDispatch","web3","wait","sendConversionApprovedEvent","ErrorCode","ModalApprove","setIsOpen","isOpen","amount","fromToken","handleApproved","waitForApproval","contract","dispatch","approve","isUnlimited","undefined","txHash","type","pending","title","msg","symbol","updatedInfo","successTitle","successMsg","errorTitle","errorMsg","tx","provider","getTransactionReceipt","error","e","code","DeniedTx"],"mappings":"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","sourcesContent":["import { Modal } from 'components/modal/Modal';\nimport { ReactComponent as IconLock } from 'assets/icons/lock.svg';\nimport {\n  addNotification,\n  NotificationType,\n} from 'redux/notification/notification';\nimport {\n  ApprovalContract,\n  setNetworkContractApproval,\n} from 'services/web3/approval';\nimport { useDispatch } from 'react-redux';\nimport { Token } from 'services/observables/tokens';\nimport { web3 } from 'services/web3';\nimport { wait } from 'utils/pureFunctions';\nimport { sendConversionApprovedEvent } from 'services/api/googleTagManager';\nimport { ErrorCode } from 'services/web3/types';\n\ninterface ModalApproveProps {\n  setIsOpen: Function;\n  isOpen: boolean;\n  amount: string;\n  fromToken?: Token;\n  handleApproved: Function;\n  waitForApproval?: boolean;\n  contract: ApprovalContract;\n}\n\nexport const ModalApprove = ({\n  setIsOpen,\n  isOpen,\n  amount,\n  fromToken,\n  handleApproved,\n  waitForApproval,\n  contract,\n}: ModalApproveProps) => {\n  const dispatch = useDispatch();\n\n  if (!fromToken) return null;\n\n  // Wait for user to choose approval and proceed with approval based on user selection\n  // Prop amount is UNDEFINED when UNLIMITED\n  const approve = async (amount?: string) => {\n    try {\n      setIsOpen(false);\n      const isUnlimited = amount === undefined;\n      sendConversionApprovedEvent(isUnlimited);\n      const txHash = await setNetworkContractApproval(\n        fromToken,\n        contract,\n        amount\n      );\n      dispatch(\n        addNotification({\n          type: NotificationType.pending,\n          title: 'Pending Confirmation',\n          msg: `Approve ${fromToken.symbol} is pending confirmation`,\n          updatedInfo: {\n            successTitle: 'Transaction Confirmed',\n            successMsg: `${amount || 'Unlimited'} approval set for ${\n              fromToken.symbol\n            }`,\n            errorTitle: 'Transaction Failed',\n            errorMsg: `${fromToken.symbol} approval had failed. Please try again or contact support.`,\n          },\n          txHash,\n        })\n      );\n      if (waitForApproval) {\n        let tx = null;\n        while (tx === null)\n          try {\n            await wait(2000);\n            tx = await web3.provider.getTransactionReceipt(txHash);\n          } catch (error) {}\n      }\n      handleApproved();\n    } catch (e: any) {\n      setIsOpen(false);\n      if (e.code === ErrorCode.DeniedTx)\n        dispatch(\n          addNotification({\n            type: NotificationType.error,\n            title: 'Transaction Rejected',\n            msg: 'You rejected the transaction. If this was by mistake, please try again.',\n          })\n        );\n      else\n        addNotification({\n          type: NotificationType.error,\n          title: 'Transaction Failed',\n          msg: `${fromToken.symbol} approval had failed. Please try again or contact support.`,\n        });\n    }\n  };\n\n  return (\n    <Modal title={'Swap'} setIsOpen={setIsOpen} isOpen={isOpen}>\n      <div className=\"p-10\">\n        <div className=\"flex flex-col items-center text-12 mb-20\">\n          <div className=\"flex justify-center items-center w-[52px] h-[52px] bg-primary rounded-full mb-14\">\n            <IconLock className=\"w-[22px] text-white\" />\n          </div>\n          <h2 className=\"text-20 mb-8\">Approve {fromToken.symbol}</h2>\n          <p className=\"text-center text-grey-5\">\n            Before you can proceed, you need to approve {fromToken.symbol}{' '}\n            spending.\n          </p>\n          <button\n            onClick={() => approve()}\n            className={'btn-primary w-full my-15'}\n          >\n            Approve\n          </button>\n          <p className=\"text-center text-grey-5\">\n            Want to approve before each transaction?\n          </p>\n          <button onClick={() => approve(amount)} className=\"underline\">\n            Approve limited permission\n          </button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}