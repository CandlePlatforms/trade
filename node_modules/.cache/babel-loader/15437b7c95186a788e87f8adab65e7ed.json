{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/components/tokenInputPercentage/TokenInputPercentage.tsx\",\n    _s = $RefreshSig$();\n\nimport { BigNumber } from 'bignumber.js';\nimport { TokenInputField } from 'components/tokenInputField/TokenInputField';\nimport { useState, useEffect } from 'react';\nimport { classNameGenerator } from 'utils/pureFunctions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst percentages = [25, 50, 75, 100];\nexport const TokenInputPercentage = _ref => {\n  _s();\n\n  let {\n    token,\n    balance,\n    label,\n    amount,\n    errorMsg,\n    setAmount,\n    debounce,\n    balanceLabel = 'Balance'\n  } = _ref;\n  const [amountUSD, setAmountUSD] = useState('');\n  const [selPercentage, setSelPercentage] = useState(-1);\n  const fieldBalance = balance ? balance : token && token.balance ? token.balance : undefined;\n  useEffect(() => {\n    if (amount && fieldBalance) {\n      const percentage = Number(amount) / Number(fieldBalance) * 100;\n      setSelPercentage(percentages.findIndex(x => percentage.toFixed(10) === x.toFixed(10)));\n      if (debounce) debounce(amount);\n    }\n  }, [amount, token, fieldBalance, debounce]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [token && /*#__PURE__*/_jsxDEV(TokenInputField, {\n      border: true,\n      token: token,\n      input: amount,\n      label: label,\n      errorMsg: errorMsg,\n      debounce: debounce,\n      setInput: setAmount,\n      selectable: false,\n      amountUsd: amountUSD,\n      setAmountUsd: setAmountUSD,\n      fieldBalance: fieldBalance,\n      balanceLabel: balanceLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between space-x-8 mt-15\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:w-[125px]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), percentages.map((slip, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn-sm rounded-10 h-[34px] w-[66px] text-14 ${classNameGenerator({\n          'btn-outline-secondary': selPercentage !== index,\n          'btn-primary': selPercentage === index\n        })} bg-opacity-0`,\n        onClick: () => {\n          setSelPercentage(index);\n\n          if (token && fieldBalance) {\n            const amount = new BigNumber(fieldBalance).times(new BigNumber(slip / 100));\n            setAmount(amount.toString());\n            setAmountUSD((amount.toNumber() * Number(token.usdPrice)).toString());\n          }\n        },\n        children: [\"+\", slip, \"%\"]\n      }, 'slippage' + slip, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TokenInputPercentage, \"fRTT9FtoHrC1qOcV2HHwrap0Mm0=\");\n\n_c = TokenInputPercentage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenInputPercentage\");","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/components/tokenInputPercentage/TokenInputPercentage.tsx"],"names":["BigNumber","TokenInputField","useState","useEffect","classNameGenerator","percentages","TokenInputPercentage","token","balance","label","amount","errorMsg","setAmount","debounce","balanceLabel","amountUSD","setAmountUSD","selPercentage","setSelPercentage","fieldBalance","undefined","percentage","Number","findIndex","x","toFixed","map","slip","index","times","toString","toNumber","usdPrice"],"mappings":"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","sourcesContent":["import { BigNumber } from 'bignumber.js';\nimport { TokenInputField } from 'components/tokenInputField/TokenInputField';\nimport { useState, useEffect } from 'react';\nimport { Token } from 'services/observables/tokens';\nimport { classNameGenerator } from 'utils/pureFunctions';\n\ninterface TokenInputPercentageProps {\n  label: string;\n  token?: Token;\n  balance?: string;\n  amount: string;\n  errorMsg?: string;\n  setAmount: Function;\n  debounce?: Function;\n  balanceLabel?: string;\n}\nconst percentages = [25, 50, 75, 100];\n\nexport const TokenInputPercentage = ({\n  token,\n  balance,\n  label,\n  amount,\n  errorMsg,\n  setAmount,\n  debounce,\n  balanceLabel = 'Balance',\n}: TokenInputPercentageProps) => {\n  const [amountUSD, setAmountUSD] = useState('');\n  const [selPercentage, setSelPercentage] = useState<number>(-1);\n\n  const fieldBalance = balance\n    ? balance\n    : token && token.balance\n    ? token.balance\n    : undefined;\n\n  useEffect(() => {\n    if (amount && fieldBalance) {\n      const percentage = (Number(amount) / Number(fieldBalance)) * 100;\n      setSelPercentage(\n        percentages.findIndex((x) => percentage.toFixed(10) === x.toFixed(10))\n      );\n      if (debounce) debounce(amount);\n    }\n  }, [amount, token, fieldBalance, debounce]);\n\n  return (\n    <>\n      {token && (\n        <TokenInputField\n          border\n          token={token}\n          input={amount}\n          label={label}\n          errorMsg={errorMsg}\n          debounce={debounce}\n          setInput={setAmount}\n          selectable={false}\n          amountUsd={amountUSD}\n          setAmountUsd={setAmountUSD}\n          fieldBalance={fieldBalance}\n          balanceLabel={balanceLabel}\n        />\n      )}\n      <div className=\"flex justify-between space-x-8 mt-15\">\n        <div className=\"md:w-[125px]\" />\n        {percentages.map((slip, index) => (\n          <button\n            key={'slippage' + slip}\n            className={`btn-sm rounded-10 h-[34px] w-[66px] text-14 ${classNameGenerator(\n              {\n                'btn-outline-secondary': selPercentage !== index,\n                'btn-primary': selPercentage === index,\n              }\n            )} bg-opacity-0`}\n            onClick={() => {\n              setSelPercentage(index);\n              if (token && fieldBalance) {\n                const amount = new BigNumber(fieldBalance).times(\n                  new BigNumber(slip / 100)\n                );\n                setAmount(amount.toString());\n                setAmountUSD(\n                  (amount.toNumber() * Number(token.usdPrice)).toString()\n                );\n              }\n            }}\n          >\n            +{slip}%\n          </button>\n        ))}\n      </div>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}