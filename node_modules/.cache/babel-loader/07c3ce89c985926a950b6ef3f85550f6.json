{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/earn/pools/addLiquidity/single/AddLiquiditySingleAmount.tsx\",\n    _s = $RefreshSig$();\n\nimport { TokenInputField } from 'components/tokenInputField/TokenInputField';\nimport { useEffect } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AddLiquiditySingleAmount = _ref => {\n  _s();\n\n  let {\n    pool,\n    token,\n    setToken,\n    amount,\n    setAmount,\n    amountUsd,\n    setAmountUsd,\n    errorMsg,\n    setErrorMsg\n  } = _ref;\n  useEffect(() => {\n    if (new BigNumber(amount).gt(token.balance || 0)) {\n      setErrorMsg('Insufficient Balance');\n    } else {\n      setErrorMsg('');\n    }\n  }, [amount, token.balance, setErrorMsg]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TokenInputField, {\n      setInput: setAmount,\n      selectable: true,\n      border: true,\n      includedTokens: pool.reserves.map(x => x.address),\n      input: amount,\n      label: \"Stake Amount\",\n      token: token,\n      amountUsd: amountUsd,\n      setAmountUsd: setAmountUsd,\n      setToken: token => setToken(token)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), errorMsg && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-5 pl-[140px] text-error\",\n      children: errorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AddLiquiditySingleAmount, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = AddLiquiditySingleAmount;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddLiquiditySingleAmount\");","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/earn/pools/addLiquidity/single/AddLiquiditySingleAmount.tsx"],"names":["TokenInputField","useEffect","BigNumber","AddLiquiditySingleAmount","pool","token","setToken","amount","setAmount","amountUsd","setAmountUsd","errorMsg","setErrorMsg","gt","balance","reserves","map","x","address"],"mappings":";;;AACA,SAASA,eAAT,QAAgC,4CAAhC;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,cAAtB;;;AAaA,OAAO,MAAMC,wBAAwB,GAAG,QAU3B;AAAA;;AAAA,MAV4B;AACvCC,IAAAA,IADuC;AAEvCC,IAAAA,KAFuC;AAGvCC,IAAAA,QAHuC;AAIvCC,IAAAA,MAJuC;AAKvCC,IAAAA,SALuC;AAMvCC,IAAAA,SANuC;AAOvCC,IAAAA,YAPuC;AAQvCC,IAAAA,QARuC;AASvCC,IAAAA;AATuC,GAU5B;AACXX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,IAAIC,SAAJ,CAAcK,MAAd,EAAsBM,EAAtB,CAAyBR,KAAK,CAACS,OAAN,IAAiB,CAA1C,CAAJ,EAAkD;AAChDF,MAAAA,WAAW,CAAC,sBAAD,CAAX;AACD,KAFD,MAEO;AACLA,MAAAA,WAAW,CAAC,EAAD,CAAX;AACD;AACF,GANQ,EAMN,CAACL,MAAD,EAASF,KAAK,CAACS,OAAf,EAAwBF,WAAxB,CANM,CAAT;AAQA,sBACE;AAAA,4BACE,QAAC,eAAD;AACE,MAAA,QAAQ,EAAEJ,SADZ;AAEE,MAAA,UAAU,EAAE,IAFd;AAGE,MAAA,MAAM,MAHR;AAIE,MAAA,cAAc,EAAEJ,IAAI,CAACW,QAAL,CAAcC,GAAd,CAAmBC,CAAD,IAAOA,CAAC,CAACC,OAA3B,CAJlB;AAKE,MAAA,KAAK,EAAEX,MALT;AAME,MAAA,KAAK,EAAC,cANR;AAOE,MAAA,KAAK,EAAEF,KAPT;AAQE,MAAA,SAAS,EAAEI,SARb;AASE,MAAA,YAAY,EAAEC,YAThB;AAUE,MAAA,QAAQ,EAAGL,KAAD,IAAkBC,QAAQ,CAACD,KAAD;AAVtC;AAAA;AAAA;AAAA;AAAA,YADF,EAaGM,QAAQ,iBAAI;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA,gBAA6CA;AAA7C;AAAA;AAAA;AAAA;AAAA,YAbf;AAAA,kBADF;AAiBD,CApCM;;GAAMR,wB;;KAAAA,wB","sourcesContent":["import { Pool, Token } from 'services/observables/tokens';\nimport { TokenInputField } from 'components/tokenInputField/TokenInputField';\nimport { useEffect } from 'react';\nimport BigNumber from 'bignumber.js';\n\ninterface Props {\n  pool: Pool;\n  token: Token;\n  setToken: Function;\n  amount: string;\n  setAmount: Function;\n  amountUsd: string;\n  setAmountUsd: Function;\n  errorMsg: string;\n  setErrorMsg: Function;\n}\nexport const AddLiquiditySingleAmount = ({\n  pool,\n  token,\n  setToken,\n  amount,\n  setAmount,\n  amountUsd,\n  setAmountUsd,\n  errorMsg,\n  setErrorMsg,\n}: Props) => {\n  useEffect(() => {\n    if (new BigNumber(amount).gt(token.balance || 0)) {\n      setErrorMsg('Insufficient Balance');\n    } else {\n      setErrorMsg('');\n    }\n  }, [amount, token.balance, setErrorMsg]);\n\n  return (\n    <>\n      <TokenInputField\n        setInput={setAmount}\n        selectable={true}\n        border\n        includedTokens={pool.reserves.map((x) => x.address)}\n        input={amount}\n        label=\"Stake Amount\"\n        token={token}\n        amountUsd={amountUsd}\n        setAmountUsd={setAmountUsd}\n        setToken={(token: Token) => setToken(token)}\n      />\n      {errorMsg && <div className=\"mt-5 pl-[140px] text-error\">{errorMsg}</div>}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}