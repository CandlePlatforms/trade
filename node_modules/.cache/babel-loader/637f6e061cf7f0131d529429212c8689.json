{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/swapWidget/SwapWidget.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { SwapHeader } from 'elements/swapHeader/SwapHeader';\nimport { SwapMarket } from 'elements/swapMarket/SwapMarket';\nimport { SwapLimit } from 'elements/swapLimit/SwapLimit';\nimport { useAppSelector } from 'redux/index';\nimport { ethToken } from 'services/web3/config';\nimport { Insight } from 'elements/swapInsights/Insight';\nimport { intoTheBlockByToken } from 'services/api/intoTheBlock';\nimport { useAsyncEffect } from 'use-async-effect';\nimport { useNavigation } from 'services/router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SwapWidget = _ref => {\n  _s();\n\n  let {\n    isLimit,\n    setIsLimit,\n    from,\n    to,\n    limit,\n    refreshLimit\n  } = _ref;\n  const tokens = useAppSelector(state => state.bancor.tokens);\n  const {\n    replaceLimit,\n    replaceFrom,\n    replaceTo,\n    switchTokens\n  } = useNavigation();\n  const ethOrFirst = useCallback(() => {\n    const eth = tokens.find(x => x.address === ethToken);\n    return eth ? eth : tokens[0];\n  }, [tokens]);\n  const [fromToken, setFromToken] = useState(ethOrFirst());\n  const [toToken, setToToken] = useState();\n  const [fromTokenITB, setFromTokenITB] = useState();\n  const [toTokenITB, setToTokenITB] = useState();\n  useEffect(() => {\n    if (tokens) {\n      if (from) {\n        const fromToken = tokens.find(x => x.address === from);\n        if (fromToken) setFromToken(fromToken);else setFromToken(ethOrFirst());\n      } else setFromToken(ethOrFirst());\n\n      if (to) {\n        const toToken = tokens.find(x => x.address === to);\n        if (toToken) setToToken(toToken);else setToToken(undefined);\n      } else setToToken(undefined);\n\n      setIsLimit(limit);\n    }\n  }, [from, to, limit, tokens, setIsLimit, ethOrFirst]);\n  useAsyncEffect(async isMounted => {\n    if (fromToken) {\n      const data = await intoTheBlockByToken(fromToken.symbol);\n\n      if (isMounted()) {\n        setFromTokenITB(data);\n      }\n    }\n  }, [fromToken]);\n  useAsyncEffect(async isMounted => {\n    if (toToken) {\n      const data = await intoTheBlockByToken(toToken.symbol);\n\n      if (isMounted()) {\n        setToTokenITB(data);\n      }\n    }\n  }, [toToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white dark:bg-blue-4 h-screen w-screen md:h-auto md:w-auto md:bg-grey-1 md:dark:bg-blue-3\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center w-full mx-auto 2xl:space-x-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"widget \",\n          children: [/*#__PURE__*/_jsxDEV(SwapHeader, {\n            isLimit: isLimit,\n            setIsLimit: limit => replaceLimit(fromToken, tokens, limit, toToken)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: \"widget-separator\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), isLimit ? /*#__PURE__*/_jsxDEV(SwapLimit, {\n            fromToken: fromToken,\n            setFromToken: from => replaceFrom(from, tokens, true, toToken),\n            toToken: toToken,\n            setToToken: to => replaceTo(fromToken, true, to),\n            switchTokens: () => switchTokens(fromToken, true, toToken),\n            refreshLimit: refreshLimit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(SwapMarket, {\n            fromToken: fromToken,\n            setFromToken: from => replaceFrom(from, tokens, false, toToken),\n            toToken: toToken,\n            setToToken: to => replaceTo(fromToken, false, to),\n            switchTokens: () => switchTokens(fromToken, false, toToken)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), isLimit ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-10 text-grey-4 mt-18\",\n          children: \"Limit orders are powered by KeeperDAO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this) : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Insight, {\n        fromToken: fromToken,\n        toToken: toToken,\n        fromTokenIntoBlock: fromTokenITB,\n        toTokenIntoBlock: toTokenITB\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SwapWidget, \"JDXLmlXFJWV/QL5ZgNJZ2etKa9A=\", false, function () {\n  return [useAppSelector, useNavigation, useAsyncEffect, useAsyncEffect];\n});\n\n_c = SwapWidget;\n\nvar _c;\n\n$RefreshReg$(_c, \"SwapWidget\");","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/swapWidget/SwapWidget.tsx"],"names":["useCallback","useEffect","useState","SwapHeader","SwapMarket","SwapLimit","useAppSelector","ethToken","Insight","intoTheBlockByToken","useAsyncEffect","useNavigation","SwapWidget","isLimit","setIsLimit","from","to","limit","refreshLimit","tokens","state","bancor","replaceLimit","replaceFrom","replaceTo","switchTokens","ethOrFirst","eth","find","x","address","fromToken","setFromToken","toToken","setToToken","fromTokenITB","setFromTokenITB","toTokenITB","setToTokenITB","undefined","isMounted","data","symbol"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { SwapHeader } from 'elements/swapHeader/SwapHeader';\nimport { SwapMarket } from 'elements/swapMarket/SwapMarket';\nimport { SwapLimit } from 'elements/swapLimit/SwapLimit';\nimport { Token } from 'services/observables/tokens';\nimport { useAppSelector } from 'redux/index';\nimport { ethToken } from 'services/web3/config';\nimport { Insight } from 'elements/swapInsights/Insight';\nimport { IntoTheBlock, intoTheBlockByToken } from 'services/api/intoTheBlock';\nimport { useAsyncEffect } from 'use-async-effect';\nimport { useNavigation } from 'services/router';\n\ninterface SwapWidgetProps {\n  isLimit: boolean;\n  setIsLimit: Function;\n  from: string | null;\n  to: string | null;\n  limit: string | null;\n  refreshLimit: Function;\n}\n\nexport const SwapWidget = ({\n  isLimit,\n  setIsLimit,\n  from,\n  to,\n  limit,\n  refreshLimit,\n}: SwapWidgetProps) => {\n  const tokens = useAppSelector<Token[]>((state) => state.bancor.tokens);\n  const { replaceLimit, replaceFrom, replaceTo, switchTokens } =\n    useNavigation();\n\n  const ethOrFirst = useCallback(() => {\n    const eth = tokens.find((x) => x.address === ethToken);\n    return eth ? eth : tokens[0];\n  }, [tokens]);\n\n  const [fromToken, setFromToken] = useState(ethOrFirst());\n  const [toToken, setToToken] = useState<Token | undefined>();\n\n  const [fromTokenITB, setFromTokenITB] = useState<IntoTheBlock | undefined>();\n  const [toTokenITB, setToTokenITB] = useState<IntoTheBlock | undefined>();\n\n  useEffect(() => {\n    if (tokens) {\n      if (from) {\n        const fromToken = tokens.find((x) => x.address === from);\n        if (fromToken) setFromToken(fromToken);\n        else setFromToken(ethOrFirst());\n      } else setFromToken(ethOrFirst());\n\n      if (to) {\n        const toToken = tokens.find((x) => x.address === to);\n        if (toToken) setToToken(toToken);\n        else setToToken(undefined);\n      } else setToToken(undefined);\n\n      setIsLimit(limit);\n    }\n  }, [from, to, limit, tokens, setIsLimit, ethOrFirst]);\n\n  useAsyncEffect(\n    async (isMounted) => {\n      if (fromToken) {\n        const data = await intoTheBlockByToken(fromToken.symbol);\n        if (isMounted()) {\n          setFromTokenITB(data);\n        }\n      }\n    },\n    [fromToken]\n  );\n\n  useAsyncEffect(\n    async (isMounted) => {\n      if (toToken) {\n        const data = await intoTheBlockByToken(toToken.symbol);\n        if (isMounted()) {\n          setToTokenITB(data);\n        }\n      }\n    },\n    [toToken]\n  );\n\n  return (\n    <div className=\"bg-white dark:bg-blue-4 h-screen w-screen md:h-auto md:w-auto md:bg-grey-1 md:dark:bg-blue-3\">\n      <div className=\"flex justify-center w-full mx-auto 2xl:space-x-20\">\n        <div>\n          <div className=\"widget \">\n            <SwapHeader\n              isLimit={isLimit}\n              setIsLimit={(limit: boolean) =>\n                replaceLimit(fromToken, tokens, limit, toToken)\n              }\n            />\n            <hr className=\"widget-separator\" />\n            {isLimit ? (\n              <SwapLimit\n                fromToken={fromToken}\n                setFromToken={(from: Token) =>\n                  replaceFrom(from, tokens, true, toToken)\n                }\n                toToken={toToken}\n                setToToken={(to: Token) => replaceTo(fromToken, true, to)}\n                switchTokens={() => switchTokens(fromToken, true, toToken)}\n                refreshLimit={refreshLimit}\n              />\n            ) : (\n              <SwapMarket\n                fromToken={fromToken}\n                setFromToken={(from: Token) =>\n                  replaceFrom(from, tokens, false, toToken)\n                }\n                toToken={toToken}\n                setToToken={(to: Token) => replaceTo(fromToken, false, to)}\n                switchTokens={() => switchTokens(fromToken, false, toToken)}\n              />\n            )}\n          </div>\n          {isLimit ? (\n            <div className=\"text-center text-10 text-grey-4 mt-18\">\n              Limit orders are powered by KeeperDAO\n            </div>\n          ) : (\n            ''\n          )}\n        </div>\n        <Insight\n          fromToken={fromToken}\n          toToken={toToken}\n          fromTokenIntoBlock={fromTokenITB}\n          toTokenIntoBlock={toTokenITB}\n        />\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}