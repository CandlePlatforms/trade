{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/components/table/TableCellExpander.tsx\";\nimport { ReactComponent as IconChevronDown } from \"@svgr/webpack?-svgo,+titleProp,+ref!assets/icons/chevronDown.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getDefaultExpandedContent = () => /*#__PURE__*/_jsxDEV(\"button\", {\n  className: \"btn-outline-primary btn-sm rounded-[12px] !w-[35px] !h-[35px] p-0 border shadow-header\",\n  children: /*#__PURE__*/_jsxDEV(IconChevronDown, {\n    className: \"w-14 rotate-180\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 14,\n  columnNumber: 3\n}, this);\n\nconst getDefaultCollapsedContent = () => /*#__PURE__*/_jsxDEV(\"button\", {\n  className: \"btn-outline-primary btn-sm rounded-[12px] !w-[35px] !h-[35px] p-0 border shadow-header\",\n  children: /*#__PURE__*/_jsxDEV(IconChevronDown, {\n    className: \"w-14\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 19,\n  columnNumber: 3\n}, this);\n\nconst getDefaultCannotExpandContent = () => '';\n\nexport const TableCellExpander = _ref => {\n  let {\n    cellData,\n    canExpandMultiple = false,\n    getExpandedContent = getDefaultExpandedContent,\n    getCollapsedContent = getDefaultCollapsedContent,\n    getCannotExpandContent = getDefaultCannotExpandContent\n  } = _ref;\n  const {\n    row: {\n      canExpand,\n      isExpanded,\n      toggleRowExpanded\n    },\n    toggleAllRowsExpanded\n  } = cellData;\n\n  const handleClick = () => {\n    if (!canExpandMultiple && !isExpanded) {\n      toggleAllRowsExpanded(false);\n    }\n\n    toggleRowExpanded(!isExpanded);\n  };\n\n  return canExpand ? /*#__PURE__*/_jsxDEV(\"span\", {\n    onClick: () => handleClick(),\n    children: isExpanded ? getExpandedContent() : getCollapsedContent()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this) : getCannotExpandContent();\n};\n_c = TableCellExpander;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableCellExpander\");","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/components/table/TableCellExpander.tsx"],"names":["getDefaultExpandedContent","getDefaultCollapsedContent","getDefaultCannotExpandContent","TableCellExpander","cellData","canExpandMultiple","getExpandedContent","getCollapsedContent","getCannotExpandContent","row","canExpand","isExpanded","toggleRowExpanded","toggleAllRowsExpanded","handleClick"],"mappings":";;;;AAYA,MAAMA,yBAAyB,GAAG,mBAChC;AAAQ,EAAA,SAAS,EAAC,wFAAlB;AAAA,yBACE,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF;;AAKA,MAAMC,0BAA0B,GAAG,mBACjC;AAAQ,EAAA,SAAS,EAAC,wFAAlB;AAAA,yBACE,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF;;AAKA,MAAMC,6BAA6B,GAAG,MAAM,EAA5C;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,QAMpB;AAAA,MANqB;AAChCC,IAAAA,QADgC;AAEhCC,IAAAA,iBAAiB,GAAG,KAFY;AAGhCC,IAAAA,kBAAkB,GAAGN,yBAHW;AAIhCO,IAAAA,mBAAmB,GAAGN,0BAJU;AAKhCO,IAAAA,sBAAsB,GAAGN;AALO,GAMrB;AACX,QAAM;AACJO,IAAAA,GAAG,EAAE;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,UAAb;AAAyBC,MAAAA;AAAzB,KADD;AAEJC,IAAAA;AAFI,MAGFT,QAHJ;;AAKA,QAAMU,WAAW,GAAG,MAAM;AACxB,QAAI,CAACT,iBAAD,IAAsB,CAACM,UAA3B,EAAuC;AACrCE,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD;;AACDD,IAAAA,iBAAiB,CAAC,CAACD,UAAF,CAAjB;AACD,GALD;;AAOA,SAAOD,SAAS,gBACd;AAAM,IAAA,OAAO,EAAE,MAAMI,WAAW,EAAhC;AAAA,cACGH,UAAU,GAAGL,kBAAkB,EAArB,GAA0BC,mBAAmB;AAD1D;AAAA;AAAA;AAAA;AAAA,UADc,GAKdC,sBAAsB,EALxB;AAOD,CA1BM;KAAML,iB","sourcesContent":["import { CellProps } from 'react-table';\nimport { ReactComponent as IconChevronDown } from 'assets/icons/chevronDown.svg';\nimport { PropsWithChildren } from 'react';\n\ninterface Props {\n  getExpandedContent?: () => JSX.Element;\n  getCollapsedContent?: () => JSX.Element;\n  getCannotExpandContent?: () => JSX.Element | string;\n  cellData: PropsWithChildren<CellProps<any>>;\n  canExpandMultiple?: boolean;\n}\n\nconst getDefaultExpandedContent = () => (\n  <button className=\"btn-outline-primary btn-sm rounded-[12px] !w-[35px] !h-[35px] p-0 border shadow-header\">\n    <IconChevronDown className=\"w-14 rotate-180\" />\n  </button>\n);\nconst getDefaultCollapsedContent = () => (\n  <button className=\"btn-outline-primary btn-sm rounded-[12px] !w-[35px] !h-[35px] p-0 border shadow-header\">\n    <IconChevronDown className=\"w-14\" />\n  </button>\n);\nconst getDefaultCannotExpandContent = () => '';\n\nexport const TableCellExpander = ({\n  cellData,\n  canExpandMultiple = false,\n  getExpandedContent = getDefaultExpandedContent,\n  getCollapsedContent = getDefaultCollapsedContent,\n  getCannotExpandContent = getDefaultCannotExpandContent,\n}: Props) => {\n  const {\n    row: { canExpand, isExpanded, toggleRowExpanded },\n    toggleAllRowsExpanded,\n  } = cellData;\n\n  const handleClick = () => {\n    if (!canExpandMultiple && !isExpanded) {\n      toggleAllRowsExpanded(false);\n    }\n    toggleRowExpanded(!isExpanded);\n  };\n\n  return canExpand ? (\n    <span onClick={() => handleClick()}>\n      {isExpanded ? getExpandedContent() : getCollapsedContent()}\n    </span>\n  ) : (\n    getCannotExpandContent()\n  );\n};\n"]},"metadata":{},"sourceType":"module"}