{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { user } from 'redux/user/user';\nimport { bancor } from 'redux/bancor/bancor';\nimport { pool } from 'redux/bancor/pool';\nimport { notification } from 'redux/notification/notification';\nimport { liquidity } from './liquidity/liquidity';\nexport const store = configureStore({\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredPaths: ['bancor.tokens', 'bancor.tokenLists']\n    }\n  }),\n  reducer: {\n    user,\n    notification,\n    bancor,\n    pool,\n    liquidity\n  }\n}); // @ts-ignore\n\nexport const useAppDispatch = () => {\n  _s();\n\n  return useDispatch();\n};\n\n_s(useAppDispatch, \"jI3HA1r1Cumjdbu14H7G+TUj798=\", false, function () {\n  return [useDispatch];\n});\n\nexport const useAppSelector = useSelector;","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/redux/index.ts"],"names":["configureStore","useDispatch","useSelector","user","bancor","pool","notification","liquidity","store","middleware","getDefaultMiddleware","serializableCheck","ignoredPaths","reducer","useAppDispatch","useAppSelector"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,WAAT,EAA4CC,WAA5C,QAA+D,aAA/D;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,OAAO,MAAMC,KAAK,GAAGR,cAAc,CAAC;AAClCS,EAAAA,UAAU,EAAGC,oBAAD,IACVA,oBAAoB,CAAC;AACnBC,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,YAAY,EAAE,CAAC,eAAD,EAAkB,mBAAlB;AADG;AADA,GAAD,CAFY;AAOlCC,EAAAA,OAAO,EAAE;AACPV,IAAAA,IADO;AAEPG,IAAAA,YAFO;AAGPF,IAAAA,MAHO;AAIPC,IAAAA,IAJO;AAKPE,IAAAA;AALO;AAPyB,CAAD,CAA5B,C,CAgBP;;AAGA,OAAO,MAAMO,cAAc,GAAG;AAAA;;AAAA,SAAMb,WAAW,EAAjB;AAAA,CAAvB;;GAAMa,c;UAAuBb,W;;;AACpC,OAAO,MAAMc,cAA+C,GAAGb,WAAxD","sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch, TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { user } from 'redux/user/user';\nimport { bancor } from 'redux/bancor/bancor';\nimport { pool } from 'redux/bancor/pool';\nimport { notification } from 'redux/notification/notification';\nimport { liquidity } from './liquidity/liquidity';\n\nexport const store = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredPaths: ['bancor.tokens', 'bancor.tokenLists'],\n      },\n    }),\n  reducer: {\n    user,\n    notification,\n    bancor,\n    pool,\n    liquidity,\n  },\n});\n\n// @ts-ignore\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n"]},"metadata":{},"sourceType":"module"}