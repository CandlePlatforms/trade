{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nimport dayjs from 'dayjs';\nexport let NotificationType;\n\n(function (NotificationType) {\n  NotificationType[NotificationType[\"info\"] = 0] = \"info\";\n  NotificationType[NotificationType[\"success\"] = 1] = \"success\";\n  NotificationType[NotificationType[\"error\"] = 2] = \"error\";\n  NotificationType[NotificationType[\"pending\"] = 3] = \"pending\";\n})(NotificationType || (NotificationType = {}));\n\nexport const initialState = {\n  notifications: []\n};\n\nconst defaultShowSeconds = _ref => {\n  let {\n    type\n  } = _ref;\n\n  switch (type) {\n    case NotificationType.success:\n      return 10;\n\n    default:\n      return 8;\n  }\n};\n\nconst notificationSlice = createSlice({\n  name: 'notification',\n  initialState,\n  reducers: {\n    setNotifications: (state, action) => {\n      state.notifications = action.payload;\n    },\n    addNotification: (state, action) => {\n      const length = state.notifications.unshift({\n        id: nanoid(),\n        type: NotificationType.info,\n        timestamp: dayjs().unix(),\n        showSeconds: defaultShowSeconds(action.payload),\n        ...action.payload\n      });\n\n      if (length > 100) {\n        state.notifications.pop();\n      }\n    },\n    removeNotification: (state, action) => {\n      const index = state.notifications.findIndex(notification => notification.id === action.payload);\n      if (index > -1) state.notifications.splice(index, 1);\n    },\n    hideAlert: (state, action) => {\n      const index = state.notifications.findIndex(notification => notification.id === action.payload);\n      if (index > -1) state.notifications[index].showSeconds = 0;\n    },\n    setStatus: (state, action) => {\n      const index = state.notifications.findIndex(notification => notification.id === action.payload.id);\n\n      if (index > -1) {\n        const oldNotification = state.notifications[index];\n        const notification = {\n          id: oldNotification.id,\n          type: action.payload.type,\n          title: action.payload.title ? action.payload.title : oldNotification.title,\n          msg: action.payload.msg ? action.payload.msg : oldNotification.msg,\n          showSeconds: oldNotification.showSeconds,\n          txHash: oldNotification.txHash,\n          timestamp: oldNotification.timestamp\n        };\n        state.notifications[index] = notification;\n      }\n    }\n  }\n});\nexport const {\n  setNotifications,\n  addNotification,\n  removeNotification,\n  hideAlert,\n  setStatus\n} = notificationSlice.actions;\nexport const notification = notificationSlice.reducer;","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/redux/notification/notification.ts"],"names":["createSlice","nanoid","dayjs","NotificationType","initialState","notifications","defaultShowSeconds","type","success","notificationSlice","name","reducers","setNotifications","state","action","payload","addNotification","length","unshift","id","info","timestamp","unix","showSeconds","pop","removeNotification","index","findIndex","notification","splice","hideAlert","setStatus","oldNotification","title","msg","txHash","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, nanoid, PayloadAction } from '@reduxjs/toolkit';\nimport dayjs from 'dayjs';\n\nexport enum NotificationType {\n  info,\n  success,\n  error,\n  pending,\n}\n\nexport interface BaseNotification {\n  type?: NotificationType;\n  title: string;\n  msg: string;\n  showSeconds?: number;\n  txHash?: string;\n  updatedInfo?: UpdatedInfo;\n}\n\ninterface UpdatedInfo {\n  successTitle?: string;\n  successMsg?: string;\n  errorTitle?: string;\n  errorMsg?: string;\n}\n\nexport interface Notification extends BaseNotification {\n  id: string;\n  timestamp: number;\n}\n\nexport interface NotificationState {\n  notifications: Notification[];\n}\n\nexport const initialState: NotificationState = {\n  notifications: [],\n};\n\nconst defaultShowSeconds = ({ type }: BaseNotification) => {\n  switch (type) {\n    case NotificationType.success:\n      return 10;\n    default:\n      return 8;\n  }\n};\n\nconst notificationSlice = createSlice({\n  name: 'notification',\n  initialState,\n  reducers: {\n    setNotifications: (state, action) => {\n      state.notifications = action.payload;\n    },\n    addNotification: (state, action: PayloadAction<BaseNotification>) => {\n      const length = state.notifications.unshift({\n        id: nanoid(),\n        type: NotificationType.info,\n        timestamp: dayjs().unix(),\n        showSeconds: defaultShowSeconds(action.payload),\n        ...action.payload,\n      });\n\n      if (length > 100) {\n        state.notifications.pop();\n      }\n    },\n    removeNotification: (state, action: PayloadAction<string>) => {\n      const index = state.notifications.findIndex(\n        (notification) => notification.id === action.payload\n      );\n      if (index > -1) state.notifications.splice(index, 1);\n    },\n    hideAlert: (state, action: PayloadAction<string>) => {\n      const index = state.notifications.findIndex(\n        (notification) => notification.id === action.payload\n      );\n      if (index > -1) state.notifications[index].showSeconds = 0;\n    },\n    setStatus: (\n      state,\n      action: PayloadAction<{\n        id: string;\n        type: NotificationType;\n        title?: string;\n        msg?: string;\n      }>\n    ) => {\n      const index = state.notifications.findIndex(\n        (notification) => notification.id === action.payload.id\n      );\n      if (index > -1) {\n        const oldNotification = state.notifications[index];\n        const notification = {\n          id: oldNotification.id,\n          type: action.payload.type,\n          title: action.payload.title\n            ? action.payload.title\n            : oldNotification.title,\n          msg: action.payload.msg ? action.payload.msg : oldNotification.msg,\n          showSeconds: oldNotification.showSeconds,\n          txHash: oldNotification.txHash,\n          timestamp: oldNotification.timestamp,\n        };\n        state.notifications[index] = notification;\n      }\n    },\n  },\n});\n\nexport const {\n  setNotifications,\n  addNotification,\n  removeNotification,\n  hideAlert,\n  setStatus,\n} = notificationSlice.actions;\n\nexport const notification = notificationSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}