{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/earn/portfolio/withdrawLiquidity/WithdrawLiquidityWidget.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport { useAppSelector } from 'redux/index';\nimport { getTokenById } from 'redux/bancor/bancor';\nimport { TokenInputPercentage } from 'components/tokenInputPercentage/TokenInputPercentage';\nimport { WithdrawLiquidityInfo } from './WithdrawLiquidityInfo';\nimport { LinePercentage } from 'components/linePercentage/LinePercentage';\nimport { Modal } from 'components/modal/Modal';\nimport { fetchProtectedPositions, getWithdrawBreakdown, withdrawProtection } from 'services/web3/protection/positions';\nimport { checkPriceDeviationTooHigh } from 'services/web3/liquidity/liquidity';\nimport { useApproveModal } from 'hooks/useApproveModal';\nimport { bntToken, getNetworkVariables } from 'services/web3/config';\nimport { EthNetworks } from 'services/web3/types';\nimport { useWeb3React } from '@web3-react/core';\nimport useAsyncEffect from 'use-async-effect';\nimport { useDebounce } from 'hooks/useDebounce';\nimport BigNumber from 'bignumber.js';\nimport { withdrawProtectedPosition, rejectNotification, withdrawProtectedPositionFailed } from 'services/notifications/notifications';\nimport { useDispatch } from 'react-redux';\nimport { setProtectedPositions } from 'redux/liquidity/liquidity';\nimport { SwapSwitch } from '../../../swapSwitch/SwapSwitch';\nimport { wait } from '../../../../utils/pureFunctions';\nimport { ApprovalContract } from 'services/web3/approval';\nimport { ConversionEvents, sendLiquidityApprovedEvent, sendLiquidityEvent, sendLiquidityFailEvent, sendLiquiditySuccessEvent, setCurrentLiquidity } from '../../../../services/api/googleTagManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const WithdrawLiquidityWidget = _ref => {\n  _s();\n\n  let {\n    protectedPosition,\n    isModalOpen,\n    setIsModalOpen\n  } = _ref;\n  const dispatch = useDispatch();\n  const {\n    chainId\n  } = useWeb3React();\n  const account = useAppSelector(state => state.user.account);\n  const {\n    positionId,\n    reserveToken,\n    currentCoveragePercent,\n    pool\n  } = protectedPosition;\n  const {\n    tknAmount\n  } = protectedPosition.claimableAmount;\n  const [amount, setAmount] = useState('');\n  const [amountDebounce, setAmountebounce] = useDebounce('');\n  const [isPriceDeviationToHigh, setIsPriceDeviationToHigh] = useState(false);\n  const token = useAppSelector(state => getTokenById(state, reserveToken.address));\n  const pools = useAppSelector(state => state.pool.pools);\n  const [breakdown, setBreakdown] = useState();\n  const gov = getNetworkVariables(chainId ? chainId : EthNetworks.Mainnet).govToken;\n  const govToken = useAppSelector(state => getTokenById(state, gov));\n  const bnt = bntToken(chainId !== null && chainId !== void 0 ? chainId : EthNetworks.Mainnet);\n  const withdrawingBNT = reserveToken.address === bnt;\n  const protectionNotReached = currentCoveragePercent !== 1;\n  const multiplierWillReset = true;\n  const emtpyAmount = amount.trim() === '' || Number(amount) === 0;\n  const tokenInsufficent = Number(amount) > Number(tknAmount);\n  const withdrawDisabled = emtpyAmount || tokenInsufficent;\n  const fiatToggle = useAppSelector(state => state.user.usdToggle);\n  const showVBNTWarning = useCallback(() => {\n    var _govToken$balance;\n\n    if (token && token.address !== bnt) {\n      return false;\n    }\n\n    if (!amount) {\n      return false;\n    }\n\n    const govTokenBalance = govToken ? (_govToken$balance = govToken.balance) !== null && _govToken$balance !== void 0 ? _govToken$balance : 0 : 0;\n    const initalStake = protectedPosition.initialStake.tknAmount;\n    return new BigNumber(amount).div(tknAmount).times(initalStake).gt(govTokenBalance);\n  }, [amount, bnt, govToken, protectedPosition.initialStake.tknAmount, tknAmount, token]);\n  useAsyncEffect(async isMounted => {\n    const isPriceDeviationToHigh = await checkPriceDeviationTooHigh(pool, token);\n    setIsPriceDeviationToHigh(isPriceDeviationToHigh);\n\n    if (isMounted()) {\n      if (withdrawDisabled || withdrawingBNT) return;\n      const res = await getWithdrawBreakdown(positionId, amountDebounce, tknAmount);\n      if (res.bntAmount === '0') setBreakdown(undefined);else {\n        const percentage = new BigNumber(res.actualAmount).div(res.expectedAmount).toNumber();\n        setBreakdown({\n          tkn: percentage,\n          bnt: 1 - percentage\n        });\n      }\n    }\n  }, [amountDebounce]);\n  const withdraw = useCallback(async () => {\n    if (token) {\n      let transactionId;\n      await withdrawProtection(positionId, amount, tknAmount, txHash => {\n        transactionId = txHash;\n        withdrawProtectedPosition(dispatch, token, amount, txHash);\n        setIsModalOpen(false);\n      }, async () => {\n        sendLiquiditySuccessEvent(transactionId);\n        const positions = await fetchProtectedPositions(pools, account);\n        dispatch(setProtectedPositions(positions));\n      }, () => {\n        sendLiquidityFailEvent('User rejected transaction');\n        rejectNotification(dispatch);\n      }, errorMsg => {\n        sendLiquidityFailEvent(errorMsg);\n        withdrawProtectedPositionFailed(dispatch, token, amount);\n      });\n    }\n\n    setIsModalOpen(false);\n  }, [account, amount, dispatch, pools, positionId, setIsModalOpen, tknAmount, token]);\n  const [onStart, ModalApprove] = useApproveModal(govToken ? [{\n    amount: amount,\n    token: govToken\n  }] : [], withdraw, ApprovalContract.LiquidityProtection, sendLiquidityEvent, sendLiquidityApprovedEvent);\n  const handleWithdraw = useCallback(async () => {\n    var _token$usdPrice;\n\n    const amountUsd = new BigNumber(amount).times(token ? (_token$usdPrice = token.usdPrice) !== null && _token$usdPrice !== void 0 ? _token$usdPrice : 0 : 0).toString();\n    setCurrentLiquidity('Withdraw Single', chainId, pool.name, token.symbol, amount, amountUsd, undefined, undefined, fiatToggle);\n    sendLiquidityEvent(ConversionEvents.click);\n\n    if (withdrawingBNT) {\n      setIsModalOpen(false);\n      await wait(1000);\n      onStart();\n    } else withdraw();\n  }, [amount, chainId, fiatToggle, onStart, pool.name, setIsModalOpen, token, withdraw, withdrawingBNT]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      setIsOpen: setIsModalOpen,\n      isOpen: isModalOpen,\n      title: \"Withdraw\",\n      large: true,\n      titleElement: /*#__PURE__*/_jsxDEV(SwapSwitch, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 23\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-20 pb-20\",\n        children: [/*#__PURE__*/_jsxDEV(WithdrawLiquidityInfo, {\n          protectionNotReached: protectionNotReached,\n          multiplierWillReset: multiplierWillReset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"my-20\",\n          children: /*#__PURE__*/_jsxDEV(TokenInputPercentage, {\n            label: \"Pool\",\n            token: token,\n            debounce: setAmountebounce,\n            balance: tknAmount,\n            amount: amount,\n            errorMsg: tokenInsufficent ? 'Token balance is currently insufficient' : undefined,\n            setAmount: setAmount,\n            balanceLabel: \"Claimable amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), breakdown && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center mt-20\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Output breakdown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative w-[180px]\",\n            children: /*#__PURE__*/_jsxDEV(LinePercentage, {\n              percentages: [{\n                color: 'blue-4',\n                decPercent: breakdown.tkn,\n                label: token === null || token === void 0 ? void 0 : token.symbol\n              }, {\n                color: 'primary',\n                decPercent: breakdown.bnt,\n                label: 'BNT'\n              }]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this), withdrawingBNT && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-20\",\n          children: \"BNT withdrawals are subject to a 24h lock period before they can be claimed.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }, this), isPriceDeviationToHigh && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-20 rounded bg-error font-medium mt-20 text-white\",\n          children: \"Due to price volatility, withdrawing from your protected position is currently not available. Please try again in a few minutes.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this), showVBNTWarning() && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-20 rounded bg-error font-medium mt-20 text-white\",\n          children: \"Insufficient vBNT balance.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleWithdraw,\n          disabled: withdrawDisabled,\n          className: `btn-primary rounded w-full mt-20`,\n          children: emtpyAmount ? 'Enter Amount' : 'Withdraw'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), ModalApprove]\n  }, void 0, true);\n};\n\n_s(WithdrawLiquidityWidget, \"QnhawOU1QSeQcWbe/6ccE4xBhG4=\", false, function () {\n  return [useDispatch, useWeb3React, useAppSelector, useDebounce, useAppSelector, useAppSelector, useAppSelector, useAppSelector, useAsyncEffect, useApproveModal];\n});\n\n_c = WithdrawLiquidityWidget;\n\nvar _c;\n\n$RefreshReg$(_c, \"WithdrawLiquidityWidget\");","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/elements/earn/portfolio/withdrawLiquidity/WithdrawLiquidityWidget.tsx"],"names":["useCallback","useState","useAppSelector","getTokenById","TokenInputPercentage","WithdrawLiquidityInfo","LinePercentage","Modal","fetchProtectedPositions","getWithdrawBreakdown","withdrawProtection","checkPriceDeviationTooHigh","useApproveModal","bntToken","getNetworkVariables","EthNetworks","useWeb3React","useAsyncEffect","useDebounce","BigNumber","withdrawProtectedPosition","rejectNotification","withdrawProtectedPositionFailed","useDispatch","setProtectedPositions","SwapSwitch","wait","ApprovalContract","ConversionEvents","sendLiquidityApprovedEvent","sendLiquidityEvent","sendLiquidityFailEvent","sendLiquiditySuccessEvent","setCurrentLiquidity","WithdrawLiquidityWidget","protectedPosition","isModalOpen","setIsModalOpen","dispatch","chainId","account","state","user","positionId","reserveToken","currentCoveragePercent","pool","tknAmount","claimableAmount","amount","setAmount","amountDebounce","setAmountebounce","isPriceDeviationToHigh","setIsPriceDeviationToHigh","token","address","pools","breakdown","setBreakdown","gov","Mainnet","govToken","bnt","withdrawingBNT","protectionNotReached","multiplierWillReset","emtpyAmount","trim","Number","tokenInsufficent","withdrawDisabled","fiatToggle","usdToggle","showVBNTWarning","govTokenBalance","balance","initalStake","initialStake","div","times","gt","isMounted","res","bntAmount","undefined","percentage","actualAmount","expectedAmount","toNumber","tkn","withdraw","transactionId","txHash","positions","errorMsg","onStart","ModalApprove","LiquidityProtection","handleWithdraw","amountUsd","usdPrice","toString","name","symbol","click","color","decPercent","label"],"mappings":"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","sourcesContent":["import { useCallback, useState } from 'react';\nimport { useAppSelector } from 'redux/index';\nimport { getTokenById } from 'redux/bancor/bancor';\nimport { Pool, Token } from 'services/observables/tokens';\nimport { TokenInputPercentage } from 'components/tokenInputPercentage/TokenInputPercentage';\nimport { WithdrawLiquidityInfo } from './WithdrawLiquidityInfo';\nimport { LinePercentage } from 'components/linePercentage/LinePercentage';\nimport { Modal } from 'components/modal/Modal';\nimport {\n  fetchProtectedPositions,\n  getWithdrawBreakdown,\n  ProtectedPosition,\n  withdrawProtection,\n} from 'services/web3/protection/positions';\nimport { checkPriceDeviationTooHigh } from 'services/web3/liquidity/liquidity';\nimport { useApproveModal } from 'hooks/useApproveModal';\nimport { bntToken, getNetworkVariables } from 'services/web3/config';\nimport { EthNetworks } from 'services/web3/types';\nimport { useWeb3React } from '@web3-react/core';\nimport useAsyncEffect from 'use-async-effect';\nimport { useDebounce } from 'hooks/useDebounce';\nimport BigNumber from 'bignumber.js';\nimport {\n  withdrawProtectedPosition,\n  rejectNotification,\n  withdrawProtectedPositionFailed,\n} from 'services/notifications/notifications';\nimport { useDispatch } from 'react-redux';\nimport { setProtectedPositions } from 'redux/liquidity/liquidity';\nimport { SwapSwitch } from '../../../swapSwitch/SwapSwitch';\nimport { wait } from '../../../../utils/pureFunctions';\nimport { ApprovalContract } from 'services/web3/approval';\nimport {\n  ConversionEvents,\n  sendLiquidityApprovedEvent,\n  sendLiquidityEvent,\n  sendLiquidityFailEvent,\n  sendLiquiditySuccessEvent,\n  setCurrentLiquidity,\n} from '../../../../services/api/googleTagManager';\n\ninterface Props {\n  protectedPosition: ProtectedPosition;\n  isModalOpen: boolean;\n  setIsModalOpen: Function;\n}\n\nexport const WithdrawLiquidityWidget = ({\n  protectedPosition,\n  isModalOpen,\n  setIsModalOpen,\n}: Props) => {\n  const dispatch = useDispatch();\n  const { chainId } = useWeb3React();\n  const account = useAppSelector<string | undefined>(\n    (state) => state.user.account\n  );\n  const { positionId, reserveToken, currentCoveragePercent, pool } =\n    protectedPosition;\n  const { tknAmount } = protectedPosition.claimableAmount;\n  const [amount, setAmount] = useState('');\n  const [amountDebounce, setAmountebounce] = useDebounce('');\n  const [isPriceDeviationToHigh, setIsPriceDeviationToHigh] = useState(false);\n  const token = useAppSelector<Token | undefined>((state: any) =>\n    getTokenById(state, reserveToken.address)\n  );\n  const pools = useAppSelector<Pool[]>((state) => state.pool.pools);\n  const [breakdown, setBreakdown] = useState<\n    { tkn: number; bnt: number } | undefined\n  >();\n  const gov = getNetworkVariables(\n    chainId ? chainId : EthNetworks.Mainnet\n  ).govToken;\n  const govToken = useAppSelector<Token | undefined>((state: any) =>\n    getTokenById(state, gov)\n  );\n  const bnt = bntToken(chainId ?? EthNetworks.Mainnet);\n\n  const withdrawingBNT = reserveToken.address === bnt;\n  const protectionNotReached = currentCoveragePercent !== 1;\n  const multiplierWillReset = true;\n  const emtpyAmount = amount.trim() === '' || Number(amount) === 0;\n  const tokenInsufficent = Number(amount) > Number(tknAmount);\n  const withdrawDisabled = emtpyAmount || tokenInsufficent;\n  const fiatToggle = useAppSelector<boolean>((state) => state.user.usdToggle);\n\n  const showVBNTWarning = useCallback(() => {\n    if (token && token.address !== bnt) {\n      return false;\n    }\n    if (!amount) {\n      return false;\n    }\n    const govTokenBalance = govToken ? govToken.balance ?? 0 : 0;\n    const initalStake = protectedPosition.initialStake.tknAmount;\n    return new BigNumber(amount)\n      .div(tknAmount)\n      .times(initalStake)\n      .gt(govTokenBalance);\n  }, [\n    amount,\n    bnt,\n    govToken,\n    protectedPosition.initialStake.tknAmount,\n    tknAmount,\n    token,\n  ]);\n\n  useAsyncEffect(\n    async (isMounted) => {\n      const isPriceDeviationToHigh = await checkPriceDeviationTooHigh(\n        pool,\n        token!\n      );\n      setIsPriceDeviationToHigh(isPriceDeviationToHigh);\n\n      if (isMounted()) {\n        if (withdrawDisabled || withdrawingBNT) return;\n        const res = await getWithdrawBreakdown(\n          positionId,\n          amountDebounce,\n          tknAmount\n        );\n\n        if (res.bntAmount === '0') setBreakdown(undefined);\n        else {\n          const percentage = new BigNumber(res.actualAmount)\n            .div(res.expectedAmount)\n            .toNumber();\n\n          setBreakdown({ tkn: percentage, bnt: 1 - percentage });\n        }\n      }\n    },\n    [amountDebounce]\n  );\n\n  const withdraw = useCallback(async () => {\n    if (token) {\n      let transactionId: string;\n      await withdrawProtection(\n        positionId,\n        amount,\n        tknAmount,\n        (txHash: string) => {\n          transactionId = txHash;\n          withdrawProtectedPosition(dispatch, token, amount, txHash);\n          setIsModalOpen(false);\n        },\n        async () => {\n          sendLiquiditySuccessEvent(transactionId);\n          const positions = await fetchProtectedPositions(pools, account!);\n          dispatch(setProtectedPositions(positions));\n        },\n        () => {\n          sendLiquidityFailEvent('User rejected transaction');\n          rejectNotification(dispatch);\n        },\n        (errorMsg) => {\n          sendLiquidityFailEvent(errorMsg);\n          withdrawProtectedPositionFailed(dispatch, token, amount);\n        }\n      );\n    }\n    setIsModalOpen(false);\n  }, [\n    account,\n    amount,\n    dispatch,\n    pools,\n    positionId,\n    setIsModalOpen,\n    tknAmount,\n    token,\n  ]);\n\n  const [onStart, ModalApprove] = useApproveModal(\n    govToken ? [{ amount: amount, token: govToken }] : [],\n    withdraw,\n    ApprovalContract.LiquidityProtection,\n    sendLiquidityEvent,\n    sendLiquidityApprovedEvent\n  );\n\n  const handleWithdraw = useCallback(async () => {\n    const amountUsd = new BigNumber(amount)\n      .times(token ? token.usdPrice ?? 0 : 0)\n      .toString();\n    setCurrentLiquidity(\n      'Withdraw Single',\n      chainId,\n      pool.name,\n      token!.symbol,\n      amount,\n      amountUsd,\n      undefined,\n      undefined,\n      fiatToggle\n    );\n    sendLiquidityEvent(ConversionEvents.click);\n    if (withdrawingBNT) {\n      setIsModalOpen(false);\n      await wait(1000);\n      onStart();\n    } else withdraw();\n  }, [\n    amount,\n    chainId,\n    fiatToggle,\n    onStart,\n    pool.name,\n    setIsModalOpen,\n    token,\n    withdraw,\n    withdrawingBNT,\n  ]);\n\n  return (\n    <>\n      <Modal\n        setIsOpen={setIsModalOpen}\n        isOpen={isModalOpen}\n        title=\"Withdraw\"\n        large\n        titleElement={<SwapSwitch />}\n      >\n        <div className=\"px-20 pb-20\">\n          <WithdrawLiquidityInfo\n            protectionNotReached={protectionNotReached}\n            multiplierWillReset={multiplierWillReset}\n          />\n          <div className=\"my-20\">\n            <TokenInputPercentage\n              label=\"Pool\"\n              token={token}\n              debounce={setAmountebounce}\n              balance={tknAmount}\n              amount={amount}\n              errorMsg={\n                tokenInsufficent\n                  ? 'Token balance is currently insufficient'\n                  : undefined\n              }\n              setAmount={setAmount}\n              balanceLabel=\"Claimable amount\"\n            />\n          </div>\n          {breakdown && (\n            <div className=\"flex justify-between items-center mt-20\">\n              <div>Output breakdown</div>\n              <div className=\"relative w-[180px]\">\n                <LinePercentage\n                  percentages={[\n                    {\n                      color: 'blue-4',\n                      decPercent: breakdown.tkn,\n                      label: token?.symbol,\n                    },\n                    {\n                      color: 'primary',\n                      decPercent: breakdown.bnt,\n                      label: 'BNT',\n                    },\n                  ]}\n                />\n              </div>\n            </div>\n          )}\n          {withdrawingBNT && (\n            <div className=\"mt-20\">\n              BNT withdrawals are subject to a 24h lock period before they can\n              be claimed.\n            </div>\n          )}\n          {isPriceDeviationToHigh && (\n            <div className=\"p-20 rounded bg-error font-medium mt-20 text-white\">\n              Due to price volatility, withdrawing from your protected position\n              is currently not available. Please try again in a few minutes.\n            </div>\n          )}\n          {showVBNTWarning() && (\n            <div className=\"p-20 rounded bg-error font-medium mt-20 text-white\">\n              Insufficient vBNT balance.\n            </div>\n          )}\n          <button\n            onClick={handleWithdraw}\n            disabled={withdrawDisabled}\n            className={`btn-primary rounded w-full mt-20`}\n          >\n            {emtpyAmount ? 'Enter Amount' : 'Withdraw'}\n          </button>\n        </div>\n      </Modal>\n      {ModalApprove}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}