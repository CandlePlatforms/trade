{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { sortBy } from 'lodash';\nimport { first, take } from 'rxjs/operators';\nimport { bancorConverterRegistry$, liquidityProtection$, settingsContractAddress$, systemStoreAddress$ } from 'services/observables/contracts';\nimport { expandToken, reduceBySlippage, shrinkToken } from 'utils/formulas';\nimport { calculateBntNeededToOpenSpace, calculatePriceDeviationTooHigh, decToPpm } from 'utils/helperFunctions';\nimport { web3, writeWeb3 } from '..';\nimport { ConverterRegistry__factory, Converter__factory, LiquidityProtectionSettings__factory, LiquidityProtectionSystemStore__factory, LiquidityProtection__factory } from '../abis/types';\nimport { bntToken, changeGas, ethToken, zeroAddress } from '../config';\nimport { ErrorCode, PoolType } from '../types';\nimport { ConversionEvents, sendLiquidityEvent } from '../../api/googleTagManager';\nexport const createPool = async (token, fee, network, noPool, onHash, onAccept, onFee, rejected, failed) => {\n  try {\n    const converterRegistryAddress = await bancorConverterRegistry$.pipe(take(1)).toPromise();\n    const regContract = ConverterRegistry__factory.connect(converterRegistryAddress, writeWeb3.signer);\n    const reserves = [bntToken(network), token.address];\n    const weights = ['500000', '500000'];\n    const poolAddress = await regContract.getLiquidityPoolByConfig(PoolType.Traditional, reserves, weights);\n    if (poolAddress !== zeroAddress) noPool();\n    const tx = await regContract.newConverter(PoolType.Traditional, token.name, token.symbol, token.decimals, 50000, reserves, weights);\n    onHash(tx.hash);\n    await tx.wait();\n    const converterAddress = await web3.provider.getTransactionReceipt(tx.hash);\n    const converter = Converter__factory.connect(converterAddress.logs[0].address, writeWeb3.signer);\n    const ownerShip = await converter.acceptOwnership();\n    onAccept(ownerShip.hash);\n    await ownerShip.wait();\n    const conversionFee = await converter.setConversionFee(decToPpm(fee));\n    onFee(conversionFee.hash);\n  } catch (e) {\n    if (e.code === ErrorCode.DeniedTx) rejected();else failed();\n  }\n};\nexport const addLiquidity = async (bntAmount, bnt, tknAmount, tkn, converterAddress, onHash, onCompleted, rejected, failed) => {\n  try {\n    const contract = Converter__factory.connect(converterAddress, writeWeb3.signer);\n    const tknWei = expandToken(tknAmount, tkn.decimals);\n    const bntWei = expandToken(bntAmount, bnt.decimals);\n    const value = tkn.address === ethToken ? tknWei : undefined;\n    sendLiquidityEvent(ConversionEvents.wallet_req);\n    const estimate = await contract.estimateGas.addLiquidity([bnt.address, tkn.address], [bntWei, tknWei], '1', {\n      value\n    });\n    const gasLimit = changeGas(estimate.toString());\n    const tx = await contract.addLiquidity([bnt.address, tkn.address], [bntWei, tknWei], '1', {\n      value,\n      gasLimit\n    });\n    sendLiquidityEvent(ConversionEvents.wallet_confirm, tx.hash);\n    onHash(tx.hash);\n    await tx.wait();\n    onCompleted();\n  } catch (e) {\n    console.error(e);\n    if (e.code === ErrorCode.DeniedTx) rejected();else failed(e.message);\n  }\n};\nexport const removeLiquidity = async (poolToken, onHash, onCompleted, rejected, failed) => {\n  const slippage = 0.05;\n\n  try {\n    const contract = Converter__factory.connect(poolToken.converter, writeWeb3.signer);\n    const minBntReturn = expandToken(reduceBySlippage(poolToken.bnt.amount, slippage), poolToken.poolDecimals);\n    const minTknReturn = expandToken(reduceBySlippage(poolToken.tkn.amount, slippage), poolToken.poolDecimals);\n\n    const liquidateFn = async () => {\n      if (poolToken.version < 28) {\n        return await contract.liquidate(expandToken(poolToken.amount, poolToken.poolDecimals));\n      } else {\n        return await contract.removeLiquidity(expandToken(poolToken.amount, poolToken.poolDecimals), [poolToken.bnt.token.address, poolToken.tkn.token.address], [minBntReturn, minTknReturn]);\n      }\n    };\n\n    sendLiquidityEvent(ConversionEvents.wallet_req);\n    const tx = await liquidateFn();\n    sendLiquidityEvent(ConversionEvents.wallet_confirm);\n    onHash(tx.hash);\n    await tx.wait();\n    onCompleted();\n  } catch (e) {\n    console.error(e);\n    if (e.code === ErrorCode.DeniedTx) rejected();else failed(e.message);\n  }\n};\nexport const addLiquiditySingle = async (pool, token, amount, onHash, onCompleted, rejected, failed) => {\n  try {\n    const liquidityProtectionContract = await liquidityProtection$.pipe(first()).toPromise();\n    const contract = LiquidityProtection__factory.connect(liquidityProtectionContract, writeWeb3.signer);\n    const fromIsEth = ethToken === token.address;\n    sendLiquidityEvent(ConversionEvents.wallet_req);\n    const estimate = await contract.estimateGas.addLiquidity(pool.pool_dlt_id, token.address, expandToken(amount, token.decimals), {\n      value: fromIsEth ? expandToken(amount, 18) : undefined\n    });\n    const gasLimit = changeGas(estimate.toString());\n    const tx = await contract.addLiquidity(pool.pool_dlt_id, token.address, expandToken(amount, token.decimals), {\n      value: fromIsEth ? expandToken(amount, 18) : undefined,\n      gasLimit\n    });\n    onHash(tx.hash);\n    sendLiquidityEvent(ConversionEvents.wallet_confirm, tx.hash);\n    await tx.wait();\n    onCompleted();\n  } catch (e) {\n    console.error(e);\n    if (e.code === ErrorCode.DeniedTx) rejected();else failed(e.message);\n  }\n};\nexport const checkPriceDeviationTooHigh = async (pool, selectedTkn) => {\n  const converterContract = Converter__factory.connect(pool.converter_dlt_id, web3.provider);\n  const settingsAddress = await settingsContractAddress$.pipe(take(1)).toPromise();\n  const settingsContract = LiquidityProtectionSettings__factory.connect(settingsAddress, web3.provider);\n  const [primaryReserveAddress, secondaryReserveAddress] = sortBy(pool.reserves, [o => o.address !== selectedTkn.address]).map(x => x.address);\n  const [recentAverageRate, averageRateMaxDeviation, primaryReserveBalance, secondaryReserveBalance] = await Promise.all([converterContract.recentAverageRate(selectedTkn.address), settingsContract.averageRateMaxDeviation(), converterContract.reserveBalance(primaryReserveAddress), converterContract.reserveBalance(secondaryReserveAddress)]);\n  const averageRate = new BigNumber(recentAverageRate['1'].toString()).dividedBy(new BigNumber(recentAverageRate['0'].toString()));\n\n  if (averageRate.isNaN()) {\n    throw new Error('Price deviation calculation failed. Please contact support.');\n  }\n\n  return calculatePriceDeviationTooHigh(averageRate, new BigNumber(primaryReserveBalance.toString()), new BigNumber(secondaryReserveBalance.toString()), new BigNumber(averageRateMaxDeviation));\n};\nexport const getSpaceAvailable = async (id, tknDecimals) => {\n  const liquidityProtectionContract = await liquidityProtection$.pipe(first()).toPromise();\n  const contract = LiquidityProtection__factory.connect(liquidityProtectionContract, web3.provider);\n  const result = await contract.poolAvailableSpace(id);\n  return {\n    bnt: shrinkToken(result['1'].toString(), 18),\n    tkn: shrinkToken(result['0'].toString(), tknDecimals)\n  };\n};\nexport const fetchBntNeededToOpenSpace = async pool => {\n  const settingsAddress = await settingsContractAddress$.pipe(take(1)).toPromise();\n  const settingsContract = LiquidityProtectionSettings__factory.connect(settingsAddress, web3.provider);\n  const systemStoreAddress = await systemStoreAddress$.pipe(take(1)).toPromise();\n  const systemStoreContract = LiquidityProtectionSystemStore__factory.connect(systemStoreAddress, web3.provider);\n  const networkTokenMintingLimits = await settingsContract.networkTokenMintingLimits(pool.pool_dlt_id);\n  const networkTokensMinted = await systemStoreContract.networkTokensMinted(pool.pool_dlt_id);\n  const {\n    tknBalance,\n    bntBalance\n  } = await fetchReserveBalances(pool);\n  const bntNeeded = calculateBntNeededToOpenSpace(bntBalance, tknBalance, networkTokensMinted.toString(), networkTokenMintingLimits.toString());\n  return shrinkToken(bntNeeded, 18);\n};\nexport const fetchReserveBalances = async (pool, blockHeight) => {\n  const converterContract = Converter__factory.connect(pool.converter_dlt_id, web3.provider);\n  const tknBalance = (await converterContract.getConnectorBalance(pool.reserves[0].address, {\n    blockTag: blockHeight\n  })).toString();\n  const bntBalance = (await converterContract.getConnectorBalance(pool.reserves[1].address, {\n    blockTag: blockHeight\n  })).toString();\n  return {\n    tknBalance,\n    bntBalance\n  };\n};\nexport const buildReserveBalancesCall = pool => {\n  const contract = Converter__factory.connect(pool.converter_dlt_id, web3.provider);\n\n  const buildCall = address => {\n    return {\n      contractAddress: contract.address,\n      interface: contract.interface,\n      methodName: 'getConnectorBalance',\n      methodParameters: [address]\n    };\n  };\n\n  return [buildCall(pool.reserves[0].address), buildCall(pool.reserves[1].address)];\n};\nexport const buildPoolROICall = (contract, poolToken, reserveToken, reserveAmount, poolRateN, poolRateD, reserveRateN, reserveRateD) => ({\n  contractAddress: contract.address,\n  interface: contract.interface,\n  methodName: 'poolROI',\n  methodParameters: [poolToken, reserveToken, reserveAmount, poolRateN, poolRateD, reserveRateN, reserveRateD]\n});\nexport const buildRemoveLiquidityReturnCall = (contract, id, portion, removeTimestamp) => {\n  return {\n    contractAddress: contract.address,\n    interface: contract.interface,\n    methodName: 'removeLiquidityReturn',\n    methodParameters: [id, portion, String(removeTimestamp)]\n  };\n};\nexport const buildProtectionDelayCall = contract => {\n  const buildCall = methodName => {\n    return {\n      contractAddress: contract.address,\n      interface: contract.interface,\n      methodName: methodName,\n      methodParameters: []\n    };\n  };\n\n  return [buildCall('minProtectionDelay'), buildCall('maxProtectionDelay')];\n};","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/web3/liquidity/liquidity.ts"],"names":["BigNumber","sortBy","first","take","bancorConverterRegistry$","liquidityProtection$","settingsContractAddress$","systemStoreAddress$","expandToken","reduceBySlippage","shrinkToken","calculateBntNeededToOpenSpace","calculatePriceDeviationTooHigh","decToPpm","web3","writeWeb3","ConverterRegistry__factory","Converter__factory","LiquidityProtectionSettings__factory","LiquidityProtectionSystemStore__factory","LiquidityProtection__factory","bntToken","changeGas","ethToken","zeroAddress","ErrorCode","PoolType","ConversionEvents","sendLiquidityEvent","createPool","token","fee","network","noPool","onHash","onAccept","onFee","rejected","failed","converterRegistryAddress","pipe","toPromise","regContract","connect","signer","reserves","address","weights","poolAddress","getLiquidityPoolByConfig","Traditional","tx","newConverter","name","symbol","decimals","hash","wait","converterAddress","provider","getTransactionReceipt","converter","logs","ownerShip","acceptOwnership","conversionFee","setConversionFee","e","code","DeniedTx","addLiquidity","bntAmount","bnt","tknAmount","tkn","onCompleted","contract","tknWei","bntWei","value","undefined","wallet_req","estimate","estimateGas","gasLimit","toString","wallet_confirm","console","error","message","removeLiquidity","poolToken","slippage","minBntReturn","amount","poolDecimals","minTknReturn","liquidateFn","version","liquidate","addLiquiditySingle","pool","liquidityProtectionContract","fromIsEth","pool_dlt_id","checkPriceDeviationTooHigh","selectedTkn","converterContract","converter_dlt_id","settingsAddress","settingsContract","primaryReserveAddress","secondaryReserveAddress","o","map","x","recentAverageRate","averageRateMaxDeviation","primaryReserveBalance","secondaryReserveBalance","Promise","all","reserveBalance","averageRate","dividedBy","isNaN","Error","getSpaceAvailable","id","tknDecimals","result","poolAvailableSpace","fetchBntNeededToOpenSpace","systemStoreAddress","systemStoreContract","networkTokenMintingLimits","networkTokensMinted","tknBalance","bntBalance","fetchReserveBalances","bntNeeded","blockHeight","getConnectorBalance","blockTag","buildReserveBalancesCall","buildCall","contractAddress","interface","methodName","methodParameters","buildPoolROICall","reserveToken","reserveAmount","poolRateN","poolRateD","reserveRateN","reserveRateD","buildRemoveLiquidityReturnCall","portion","removeTimestamp","String","buildProtectionDelayCall"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js';\nimport { sortBy } from 'lodash';\nimport { first, take } from 'rxjs/operators';\nimport {\n  bancorConverterRegistry$,\n  liquidityProtection$,\n  settingsContractAddress$,\n  systemStoreAddress$,\n} from 'services/observables/contracts';\nimport { Pool, PoolToken, Token } from 'services/observables/tokens';\nimport { expandToken, reduceBySlippage, shrinkToken } from 'utils/formulas';\nimport {\n  calculateBntNeededToOpenSpace,\n  calculatePriceDeviationTooHigh,\n  decToPpm,\n} from 'utils/helperFunctions';\nimport { web3, writeWeb3 } from '..';\nimport {\n  ConverterRegistry__factory,\n  Converter__factory,\n  LiquidityProtection,\n  LiquidityProtectionSettings,\n  LiquidityProtectionSettings__factory,\n  LiquidityProtectionSystemStore__factory,\n  LiquidityProtection__factory,\n} from '../abis/types';\nimport { MultiCall } from 'services/web3/multicall/multicall';\nimport { bntToken, changeGas, ethToken, zeroAddress } from '../config';\nimport { ErrorCode, EthNetworks, PoolType } from '../types';\nimport {\n  ConversionEvents,\n  sendLiquidityEvent,\n} from '../../api/googleTagManager';\n\nexport const createPool = async (\n  token: Token,\n  fee: string,\n  network: EthNetworks,\n  noPool: Function,\n  onHash: (txHash: string) => void,\n  onAccept: (txHash: string) => void,\n  onFee: (txHash: string) => void,\n  rejected: Function,\n  failed: Function\n) => {\n  try {\n    const converterRegistryAddress = await bancorConverterRegistry$\n      .pipe(take(1))\n      .toPromise();\n\n    const regContract = ConverterRegistry__factory.connect(\n      converterRegistryAddress,\n      writeWeb3.signer\n    );\n\n    const reserves = [bntToken(network), token.address];\n    const weights = ['500000', '500000'];\n\n    const poolAddress = await regContract.getLiquidityPoolByConfig(\n      PoolType.Traditional,\n      reserves,\n      weights\n    );\n\n    if (poolAddress !== zeroAddress) noPool();\n\n    const tx = await regContract.newConverter(\n      PoolType.Traditional,\n      token.name,\n      token.symbol,\n      token.decimals,\n      50000,\n      reserves,\n      weights\n    );\n\n    onHash(tx.hash);\n    await tx.wait();\n\n    const converterAddress = await web3.provider.getTransactionReceipt(tx.hash);\n    const converter = Converter__factory.connect(\n      converterAddress.logs[0].address,\n      writeWeb3.signer\n    );\n    const ownerShip = await converter.acceptOwnership();\n    onAccept(ownerShip.hash);\n    await ownerShip.wait();\n\n    const conversionFee = await converter.setConversionFee(decToPpm(fee));\n    onFee(conversionFee.hash);\n  } catch (e: any) {\n    if (e.code === ErrorCode.DeniedTx) rejected();\n    else failed();\n  }\n};\n\nexport const addLiquidity = async (\n  bntAmount: string,\n  bnt: Token,\n  tknAmount: string,\n  tkn: Token,\n  converterAddress: string,\n  onHash: (txHash: string) => void,\n  onCompleted: Function,\n  rejected: Function,\n  failed: (error: string) => void\n) => {\n  try {\n    const contract = Converter__factory.connect(\n      converterAddress,\n      writeWeb3.signer\n    );\n    const tknWei = expandToken(tknAmount, tkn.decimals);\n    const bntWei = expandToken(bntAmount, bnt.decimals);\n\n    const value = tkn.address === ethToken ? tknWei : undefined;\n\n    sendLiquidityEvent(ConversionEvents.wallet_req);\n\n    const estimate = await contract.estimateGas.addLiquidity(\n      [bnt.address, tkn.address],\n      [bntWei, tknWei],\n      '1',\n      { value }\n    );\n    const gasLimit = changeGas(estimate.toString());\n\n    const tx = await contract.addLiquidity(\n      [bnt.address, tkn.address],\n      [bntWei, tknWei],\n      '1',\n      { value, gasLimit }\n    );\n\n    sendLiquidityEvent(ConversionEvents.wallet_confirm, tx.hash);\n\n    onHash(tx.hash);\n\n    await tx.wait();\n    onCompleted();\n  } catch (e: any) {\n    console.error(e);\n    if (e.code === ErrorCode.DeniedTx) rejected();\n    else failed(e.message);\n  }\n};\n\nexport const removeLiquidity = async (\n  poolToken: PoolToken,\n  onHash: (txHash: string) => void,\n  onCompleted: Function,\n  rejected: Function,\n  failed: (error: string) => void\n) => {\n  const slippage = 0.05;\n  try {\n    const contract = Converter__factory.connect(\n      poolToken.converter,\n      writeWeb3.signer\n    );\n\n    const minBntReturn = expandToken(\n      reduceBySlippage(poolToken.bnt.amount, slippage),\n      poolToken.poolDecimals\n    );\n    const minTknReturn = expandToken(\n      reduceBySlippage(poolToken.tkn.amount, slippage),\n      poolToken.poolDecimals\n    );\n\n    const liquidateFn = async () => {\n      if (poolToken.version < 28) {\n        return await contract.liquidate(\n          expandToken(poolToken.amount, poolToken.poolDecimals)\n        );\n      } else {\n        return await contract.removeLiquidity(\n          expandToken(poolToken.amount, poolToken.poolDecimals),\n          [poolToken.bnt.token.address, poolToken.tkn.token.address],\n          [minBntReturn, minTknReturn]\n        );\n      }\n    };\n    sendLiquidityEvent(ConversionEvents.wallet_req);\n\n    const tx = await liquidateFn();\n    sendLiquidityEvent(ConversionEvents.wallet_confirm);\n\n    onHash(tx.hash);\n    await tx.wait();\n    onCompleted();\n  } catch (e: any) {\n    console.error(e);\n    if (e.code === ErrorCode.DeniedTx) rejected();\n    else failed(e.message);\n  }\n};\n\nexport const addLiquiditySingle = async (\n  pool: Pool,\n  token: Token,\n  amount: string,\n  onHash: (txHash: string) => void,\n  onCompleted: Function,\n  rejected: Function,\n  failed: (error: string) => void\n) => {\n  try {\n    const liquidityProtectionContract = await liquidityProtection$\n      .pipe(first())\n      .toPromise();\n\n    const contract = LiquidityProtection__factory.connect(\n      liquidityProtectionContract,\n      writeWeb3.signer\n    );\n    const fromIsEth = ethToken === token.address;\n\n    sendLiquidityEvent(ConversionEvents.wallet_req);\n\n    const estimate = await contract.estimateGas.addLiquidity(\n      pool.pool_dlt_id,\n      token.address,\n      expandToken(amount, token.decimals),\n      { value: fromIsEth ? expandToken(amount, 18) : undefined }\n    );\n    const gasLimit = changeGas(estimate.toString());\n\n    const tx = await contract.addLiquidity(\n      pool.pool_dlt_id,\n      token.address,\n      expandToken(amount, token.decimals),\n      { value: fromIsEth ? expandToken(amount, 18) : undefined, gasLimit }\n    );\n    onHash(tx.hash);\n    sendLiquidityEvent(ConversionEvents.wallet_confirm, tx.hash);\n\n    await tx.wait();\n\n    onCompleted();\n  } catch (e: any) {\n    console.error(e);\n    if (e.code === ErrorCode.DeniedTx) rejected();\n    else failed(e.message);\n  }\n};\n\nexport const checkPriceDeviationTooHigh = async (\n  pool: Pool,\n  selectedTkn: Token\n): Promise<boolean> => {\n  const converterContract = Converter__factory.connect(\n    pool.converter_dlt_id,\n    web3.provider\n  );\n\n  const settingsAddress = await settingsContractAddress$\n    .pipe(take(1))\n    .toPromise();\n\n  const settingsContract = LiquidityProtectionSettings__factory.connect(\n    settingsAddress,\n    web3.provider\n  );\n\n  const [primaryReserveAddress, secondaryReserveAddress] = sortBy(\n    pool.reserves,\n    [(o) => o.address !== selectedTkn.address]\n  ).map((x) => x.address);\n\n  const [\n    recentAverageRate,\n    averageRateMaxDeviation,\n    primaryReserveBalance,\n    secondaryReserveBalance,\n  ] = await Promise.all([\n    converterContract.recentAverageRate(selectedTkn.address),\n    settingsContract.averageRateMaxDeviation(),\n    converterContract.reserveBalance(primaryReserveAddress),\n    converterContract.reserveBalance(secondaryReserveAddress),\n  ]);\n\n  const averageRate = new BigNumber(\n    recentAverageRate['1'].toString()\n  ).dividedBy(new BigNumber(recentAverageRate['0'].toString()));\n\n  if (averageRate.isNaN()) {\n    throw new Error(\n      'Price deviation calculation failed. Please contact support.'\n    );\n  }\n\n  return calculatePriceDeviationTooHigh(\n    averageRate,\n    new BigNumber(primaryReserveBalance.toString()),\n    new BigNumber(secondaryReserveBalance.toString()),\n    new BigNumber(averageRateMaxDeviation)\n  );\n};\n\nexport const getSpaceAvailable = async (id: string, tknDecimals: number) => {\n  const liquidityProtectionContract = await liquidityProtection$\n    .pipe(first())\n    .toPromise();\n  const contract = LiquidityProtection__factory.connect(\n    liquidityProtectionContract,\n    web3.provider\n  );\n\n  const result = await contract.poolAvailableSpace(id);\n\n  return {\n    bnt: shrinkToken(result['1'].toString(), 18),\n    tkn: shrinkToken(result['0'].toString(), tknDecimals),\n  };\n};\n\nexport const fetchBntNeededToOpenSpace = async (\n  pool: Pool\n): Promise<string> => {\n  const settingsAddress = await settingsContractAddress$\n    .pipe(take(1))\n    .toPromise();\n  const settingsContract = LiquidityProtectionSettings__factory.connect(\n    settingsAddress,\n    web3.provider\n  );\n\n  const systemStoreAddress = await systemStoreAddress$\n    .pipe(take(1))\n    .toPromise();\n  const systemStoreContract = LiquidityProtectionSystemStore__factory.connect(\n    systemStoreAddress,\n    web3.provider\n  );\n\n  const networkTokenMintingLimits =\n    await settingsContract.networkTokenMintingLimits(pool.pool_dlt_id);\n\n  const networkTokensMinted = await systemStoreContract.networkTokensMinted(\n    pool.pool_dlt_id\n  );\n\n  const { tknBalance, bntBalance } = await fetchReserveBalances(pool);\n\n  const bntNeeded = calculateBntNeededToOpenSpace(\n    bntBalance,\n    tknBalance,\n    networkTokensMinted.toString(),\n    networkTokenMintingLimits.toString()\n  );\n\n  return shrinkToken(bntNeeded, 18);\n};\n\nexport const fetchReserveBalances = async (\n  pool: Pool,\n  blockHeight?: number\n) => {\n  const converterContract = Converter__factory.connect(\n    pool.converter_dlt_id,\n    web3.provider\n  );\n  const tknBalance = (\n    await converterContract.getConnectorBalance(pool.reserves[0].address, {\n      blockTag: blockHeight,\n    })\n  ).toString();\n\n  const bntBalance = (\n    await converterContract.getConnectorBalance(pool.reserves[1].address, {\n      blockTag: blockHeight,\n    })\n  ).toString();\n\n  return { tknBalance, bntBalance };\n};\n\nexport const buildReserveBalancesCall = (pool: Pool): MultiCall[] => {\n  const contract = Converter__factory.connect(\n    pool.converter_dlt_id,\n    web3.provider\n  );\n  const buildCall = (address: string): MultiCall => {\n    return {\n      contractAddress: contract.address,\n      interface: contract.interface,\n      methodName: 'getConnectorBalance',\n      methodParameters: [address],\n    };\n  };\n\n  return [\n    buildCall(pool.reserves[0].address),\n    buildCall(pool.reserves[1].address),\n  ];\n};\n\nexport const buildPoolROICall = (\n  contract: LiquidityProtection,\n  poolToken: string,\n  reserveToken: string,\n  reserveAmount: string,\n  poolRateN: string,\n  poolRateD: string,\n  reserveRateN: string,\n  reserveRateD: string\n): MultiCall => ({\n  contractAddress: contract.address,\n  interface: contract.interface,\n  methodName: 'poolROI',\n  methodParameters: [\n    poolToken,\n    reserveToken,\n    reserveAmount,\n    poolRateN,\n    poolRateD,\n    reserveRateN,\n    reserveRateD,\n  ],\n});\n\nexport const buildRemoveLiquidityReturnCall = (\n  contract: LiquidityProtection,\n  id: string,\n  portion: string,\n  removeTimestamp: number\n): MultiCall => {\n  return {\n    contractAddress: contract.address,\n    interface: contract.interface,\n    methodName: 'removeLiquidityReturn',\n    methodParameters: [id, portion, String(removeTimestamp)],\n  };\n};\n\nexport const buildProtectionDelayCall = (\n  contract: LiquidityProtectionSettings\n): MultiCall[] => {\n  const buildCall = (methodName: string): MultiCall => {\n    return {\n      contractAddress: contract.address,\n      interface: contract.interface,\n      methodName: methodName,\n      methodParameters: [],\n    };\n  };\n\n  return [buildCall('minProtectionDelay'), buildCall('maxProtectionDelay')];\n};\n"]},"metadata":{},"sourceType":"module"}