{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { gnosisSafe, injected } from 'services/web3/wallet/connectors';\nimport { getAutoLoginLS, setAutoLoginLS } from 'utils/localStorage';\nimport { IS_IN_IFRAME } from 'utils/helperFunctions';\nexport const useAutoConnect = () => {\n  _s();\n\n  const {\n    activate,\n    active\n  } = useWeb3React();\n  const [triedAutoLogin, setTriedAutoLogin] = useState(false);\n  useEffect(() => {\n    if (IS_IN_IFRAME) gnosisSafe.isSafeApp().then(loadedInSafe => {\n      if (loadedInSafe) {\n        activate(gnosisSafe, undefined, true).catch(() => {\n          setTriedAutoLogin(true);\n        });\n      }\n    });else if (getAutoLoginLS()) injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).then(async () => {\n          setAutoLoginLS(true);\n          setTriedAutoLogin(true);\n        }).catch(() => console.error('Failed to auto login'));\n      }\n    });\n    setTriedAutoLogin(true);\n  }, [activate]);\n  useEffect(() => {\n    if (!triedAutoLogin && active) {\n      setTriedAutoLogin(true);\n    }\n  }, [triedAutoLogin, active]);\n  return triedAutoLogin;\n};\n\n_s(useAutoConnect, \"y5V1dOf8hBwdt57e9oxH5exZOpM=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"sources":["/Users/safahi/Desktop/webapp-v2-feature-gtm_events/src/services/web3/wallet/hooks.ts"],"names":["useState","useEffect","useWeb3React","gnosisSafe","injected","getAutoLoginLS","setAutoLoginLS","IS_IN_IFRAME","useAutoConnect","activate","active","triedAutoLogin","setTriedAutoLogin","isSafeApp","then","loadedInSafe","undefined","catch","isAuthorized","console","error"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,iCAArC;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,oBAA/C;AACA,SAASC,YAAT,QAA6B,uBAA7B;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAClC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAuBR,YAAY,EAAzC;AAEA,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsCZ,QAAQ,CAAC,KAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,YAAJ,EACEJ,UAAU,CAACU,SAAX,GAAuBC,IAAvB,CAA6BC,YAAD,IAAkB;AAC5C,UAAIA,YAAJ,EAAkB;AAChBN,QAAAA,QAAQ,CAACN,UAAD,EAAaa,SAAb,EAAwB,IAAxB,CAAR,CAAsCC,KAAtC,CAA4C,MAAM;AAChDL,UAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,SAFD;AAGD;AACF,KAND,EADF,KAQK,IAAIP,cAAc,EAAlB,EACHD,QAAQ,CAACc,YAAT,GAAwBJ,IAAxB,CAA8BI,YAAD,IAA2B;AACtD,UAAIA,YAAJ,EAAkB;AAChBT,QAAAA,QAAQ,CAACL,QAAD,EAAWY,SAAX,EAAsB,IAAtB,CAAR,CACGF,IADH,CACQ,YAAY;AAChBR,UAAAA,cAAc,CAAC,IAAD,CAAd;AACAM,UAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,SAJH,EAKGK,KALH,CAKS,MAAME,OAAO,CAACC,KAAR,CAAc,sBAAd,CALf;AAMD;AACF,KATD;AAWFR,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,GAtBQ,EAsBN,CAACH,QAAD,CAtBM,CAAT;AAwBAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACU,cAAD,IAAmBD,MAAvB,EAA+B;AAC7BE,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD;AACF,GAJQ,EAIN,CAACD,cAAD,EAAiBD,MAAjB,CAJM,CAAT;AAMA,SAAOC,cAAP;AACD,CApCM;;GAAMH,c;UACkBN,Y","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { gnosisSafe, injected } from 'services/web3/wallet/connectors';\nimport { getAutoLoginLS, setAutoLoginLS } from 'utils/localStorage';\nimport { IS_IN_IFRAME } from 'utils/helperFunctions';\n\nexport const useAutoConnect = () => {\n  const { activate, active } = useWeb3React();\n\n  const [triedAutoLogin, setTriedAutoLogin] = useState(false);\n\n  useEffect(() => {\n    if (IS_IN_IFRAME)\n      gnosisSafe.isSafeApp().then((loadedInSafe) => {\n        if (loadedInSafe) {\n          activate(gnosisSafe, undefined, true).catch(() => {\n            setTriedAutoLogin(true);\n          });\n        }\n      });\n    else if (getAutoLoginLS())\n      injected.isAuthorized().then((isAuthorized: boolean) => {\n        if (isAuthorized) {\n          activate(injected, undefined, true)\n            .then(async () => {\n              setAutoLoginLS(true);\n              setTriedAutoLogin(true);\n            })\n            .catch(() => console.error('Failed to auto login'));\n        }\n      });\n\n    setTriedAutoLogin(true);\n  }, [activate]);\n\n  useEffect(() => {\n    if (!triedAutoLogin && active) {\n      setTriedAutoLogin(true);\n    }\n  }, [triedAutoLogin, active]);\n\n  return triedAutoLogin;\n};\n"]},"metadata":{},"sourceType":"module"}