{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContractAddressesForChainOrThrow = exports.ChainId = void 0;\n\nconst addresses_json_1 = __importDefault(require(\"../addresses.json\"));\n\nvar ChainId;\n\n(function (ChainId) {\n  ChainId[ChainId[\"Mainnet\"] = 1] = \"Mainnet\";\n  ChainId[ChainId[\"Ropsten\"] = 3] = \"Ropsten\";\n  ChainId[ChainId[\"Rinkeby\"] = 4] = \"Rinkeby\";\n  ChainId[ChainId[\"Kovan\"] = 42] = \"Kovan\";\n  ChainId[ChainId[\"Ganache\"] = 1337] = \"Ganache\";\n  ChainId[ChainId[\"BSC\"] = 56] = \"BSC\";\n  ChainId[ChainId[\"Polygon\"] = 137] = \"Polygon\";\n  ChainId[ChainId[\"PolygonMumbai\"] = 80001] = \"PolygonMumbai\";\n  ChainId[ChainId[\"Avalanche\"] = 43114] = \"Avalanche\";\n  ChainId[ChainId[\"Fantom\"] = 250] = \"Fantom\";\n  ChainId[ChainId[\"Celo\"] = 42220] = \"Celo\";\n})(ChainId = exports.ChainId || (exports.ChainId = {}));\n/**\n * Used to get addresses of contracts that have been deployed to either the\n * Ethereum mainnet or a supported testnet. Throws if there are no known\n * contracts deployed on the corresponding chain.\n * @param chainId The desired chainId.\n * @returns The set of addresses for contracts which have been deployed on the\n * given chainId.\n */\n\n\nfunction getContractAddressesForChainOrThrow(chainId) {\n  const chainToAddresses = addresses_json_1.default;\n\n  if (chainToAddresses[chainId] === undefined) {\n    throw new Error(`Unknown chain id (${chainId}). No known 0x contracts have been deployed on this chain.`);\n  }\n\n  return chainToAddresses[chainId];\n}\n\nexports.getContractAddressesForChainOrThrow = getContractAddressesForChainOrThrow;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,gBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;AA6CA,IAAY,OAAZ;;AAAA,CAAA,UAAY,OAAZ,EAAmB;AACf,EAAA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,EAAA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,EAAA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,EAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,GAAA,EAAA,CAAA,GAAA,OAAA;AACA,EAAA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,GAAA,IAAA,CAAA,GAAA,SAAA;AACA,EAAA,OAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAA,KAAA;AACA,EAAA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,GAAA,GAAA,CAAA,GAAA,SAAA;AACA,EAAA,OAAA,CAAA,OAAA,CAAA,eAAA,CAAA,GAAA,KAAA,CAAA,GAAA,eAAA;AACA,EAAA,OAAA,CAAA,OAAA,CAAA,WAAA,CAAA,GAAA,KAAA,CAAA,GAAA,WAAA;AACA,EAAA,OAAA,CAAA,OAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAA;AACA,EAAA,OAAA,CAAA,OAAA,CAAA,MAAA,CAAA,GAAA,KAAA,CAAA,GAAA,MAAA;AACH,CAZD,EAAY,OAAO,GAAP,OAAA,CAAA,OAAA,KAAA,OAAA,CAAA,OAAA,GAAO,EAAP,CAAZ;AAcA;;;;;;;AAOG;;;AACH,SAAgB,mCAAhB,CAAoD,OAApD,EAAoE;AAChE,QAAM,gBAAgB,GAA6C,gBAAA,CAAA,OAAnE;;AAEA,MAAI,gBAAgB,CAAC,OAAD,CAAhB,KAA8B,SAAlC,EAA6C;AACzC,UAAM,IAAI,KAAJ,CAAU,qBAAqB,OAAO,4DAAtC,CAAN;AACH;;AACD,SAAO,gBAAgB,CAAC,OAAD,CAAvB;AACH;;AAPD,OAAA,CAAA,mCAAA,GAAA,mCAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getContractAddressesForChainOrThrow = exports.ChainId = void 0;\nconst addresses_json_1 = __importDefault(require(\"../addresses.json\"));\nvar ChainId;\n(function (ChainId) {\n    ChainId[ChainId[\"Mainnet\"] = 1] = \"Mainnet\";\n    ChainId[ChainId[\"Ropsten\"] = 3] = \"Ropsten\";\n    ChainId[ChainId[\"Rinkeby\"] = 4] = \"Rinkeby\";\n    ChainId[ChainId[\"Kovan\"] = 42] = \"Kovan\";\n    ChainId[ChainId[\"Ganache\"] = 1337] = \"Ganache\";\n    ChainId[ChainId[\"BSC\"] = 56] = \"BSC\";\n    ChainId[ChainId[\"Polygon\"] = 137] = \"Polygon\";\n    ChainId[ChainId[\"PolygonMumbai\"] = 80001] = \"PolygonMumbai\";\n    ChainId[ChainId[\"Avalanche\"] = 43114] = \"Avalanche\";\n    ChainId[ChainId[\"Fantom\"] = 250] = \"Fantom\";\n    ChainId[ChainId[\"Celo\"] = 42220] = \"Celo\";\n})(ChainId = exports.ChainId || (exports.ChainId = {}));\n/**\n * Used to get addresses of contracts that have been deployed to either the\n * Ethereum mainnet or a supported testnet. Throws if there are no known\n * contracts deployed on the corresponding chain.\n * @param chainId The desired chainId.\n * @returns The set of addresses for contracts which have been deployed on the\n * given chainId.\n */\nfunction getContractAddressesForChainOrThrow(chainId) {\n    const chainToAddresses = addresses_json_1.default;\n    if (chainToAddresses[chainId] === undefined) {\n        throw new Error(`Unknown chain id (${chainId}). No known 0x contracts have been deployed on this chain.`);\n    }\n    return chainToAddresses[chainId];\n}\nexports.getContractAddressesForChainOrThrow = getContractAddressesForChainOrThrow;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}